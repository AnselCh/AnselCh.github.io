{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-aomori/source/dist/build.css","path":"dist/build.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/build.js","path":"dist/build.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/custom.js","path":"dist/custom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/app.js","path":"javascripts/app.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/dist/custom.css","path":"dist/custom.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/class-module.js","path":"javascripts/class-module.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/disqusjs.js","path":"javascripts/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/custom.js","path":"javascripts/custom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/valine.js","path":"javascripts/valine.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/images/AN_logo.png","path":"images/AN_logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/images/AN_logo2.png","path":"images/AN_logo2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/javascripts/gitalk.js","path":"javascripts/gitalk.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/highlight.min.js","path":"modules/highlight.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/lazyload.min.js","path":"modules/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","path":"modules/algoliasearch-lite.umd.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/md5.min.js","path":"modules/md5.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","path":"modules/perfect-scrollbar.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/nprogress.js","path":"modules/nprogress.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/swiper-bundle.min.js","path":"modules/swiper-bundle.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/tocbot.min.js","path":"modules/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/typed.min.js","path":"modules/typed.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/modules/plyr.js","path":"modules/plyr.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/base.scss","path":"stylesheets/base.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/github.css","path":"stylesheets/github.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/media-fixed.scss","path":"stylesheets/media-fixed.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/normalize.css","path":"stylesheets/normalize.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/nprogress.css","path":"stylesheets/nprogress.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/page.scss","path":"stylesheets/page.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/plyr.css","path":"stylesheets/plyr.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/post.css","path":"stylesheets/post.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/remark42.css","path":"stylesheets/remark42.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","path":"stylesheets/spectre-exp.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","path":"stylesheets/spectre-icons.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre.min.css","path":"stylesheets/spectre.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/style.scss","path":"stylesheets/style.scss","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","path":"stylesheets/perfect-scrollbar.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","path":"stylesheets/swiper-bundle.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-aomori/source/stylesheets/tocbot.css","path":"stylesheets/tocbot.css","modified":0,"renderable":1},{"_id":"source/about/test.jpg","path":"about/test.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/docker-memo.md","hash":"1f7063e0ed932a25a5ba0eea2f8a1064d7cc9154","modified":1683899348061},{"_id":"source/.DS_Store","hash":"694db492eb933c4ad738cfd786130357c9986183","modified":1683901791010},{"_id":"source/_posts/clockapp.md","hash":"6dcdcb5f9b54e5b65bbc63df53e91d6e50e44e34","modified":1683899348061},{"_id":"source/_posts/handgestures.md","hash":"69959ea45c1a0b395fc5da73bdda5a090835f818","modified":1683899348065},{"_id":"source/_posts/pytorch-tips.md","hash":"113f17b8521a6eeee5acc76d88ebb3c982d57f6a","modified":1683899348367},{"_id":"source/_posts/membersys.md","hash":"6eed18e065acdf5b1eed7277701066438611bbeb","modified":1683899348364},{"_id":"source/about/index.md","hash":"4ad9374ca7decb42aa44c23f38ede39ced484ec5","modified":1683905226867},{"_id":"source/_posts/fastapi.md","hash":"cd7468229df863c0d25319d3bd9d35c94bff79e5","modified":1683899348062},{"_id":"source/_posts/yolo-tips.md","hash":"d5b8ce4dac19ec56912de1d174f7fabe723a8180","modified":1683899348368},{"_id":"source/_posts/yolov5-practice.md","hash":"aa5906c362e88bdd5dc8028e8ea45698aeb28052","modified":1683899348368},{"_id":"source/_posts/clockapp/max.jpg","hash":"af3f48221fb3266c215dd431fcdd74a782df71e6","modified":1683899348061},{"_id":"source/_posts/fastapi/ajaxpost.jpg","hash":"c4ed1f248f3be91f01c002fcd9ab662d64117443","modified":1683899348062},{"_id":"source/_posts/docker-memo/vscode_wsl2.jpg","hash":"f71e86f9d1e9266b3932c56ddc122ab5ac679c8d","modified":1683899348062},{"_id":"source/_posts/clockapp/min.jpg","hash":"5afb16b2f114f5734419c53a3518c8dca5447361","modified":1683899348061},{"_id":"source/_posts/fastapi/get1.jpg","hash":"100b44c59f2f2ea1efd3ca771323dc0091fa4528","modified":1683899348063},{"_id":"source/_posts/handgestures/how_many.png","hash":"cc6a8d137dc7118fa6d21ac28b5ee728667e198e","modified":1683899348361},{"_id":"source/_posts/handgestures/labe_csv.png","hash":"14c9a23a5bc2c7af68e01ab9a209af509df318c5","modified":1683899348361},{"_id":"source/_posts/handgestures/app.png","hash":"32cd0cc86c0b04b7dd054857de880be489c52c5b","modified":1683899348065},{"_id":"source/_posts/handgestures/success.png","hash":"a7f401dc0a4ee9afc3923f68d149cb9a1c6cab94","modified":1683899348364},{"_id":"source/_posts/membersys/memberlistSign.jpg","hash":"42c16959f161a2fbad074feba49d6619ed74eaa1","modified":1683899348366},{"_id":"source/_posts/membersys/register.jpg","hash":"d1b57ec961e60d74cf4a17e785ba4faa7d876512","modified":1683899348367},{"_id":"source/_posts/handgestures/setting.png","hash":"3ba634de7245d48e4dae3366eb3006b0b7a2b072","modified":1683899348364},{"_id":"source/_posts/membersys/程式架構.jpg","hash":"b730fa537eb8e0072736407119ab083462c49144","modified":1683899348367},{"_id":"source/_posts/membersys/notadmin.jpg","hash":"414bb098addf1ce54aeb146daf76c98f77264e11","modified":1683899348366},{"_id":"source/_posts/yolov5-practice/plate1.jpg","hash":"5e6c24ca2e8843d9954b706c41ce837c06f434a6","modified":1683899348386},{"_id":"source/_posts/pytorch-tips/cmd.png","hash":"1239521249eb90da0a9b27208f687dc60b37d146","modified":1683899348368},{"_id":"source/about/test.jpg","hash":"e0cc0c3979756149ccda0509d31c31c152772a63","modified":1683899348389},{"_id":"source/_posts/fastapi/get2.jpg","hash":"df1b25728c4353c98ac731f4239f17e33eaa6ca2","modified":1683899348064},{"_id":"source/_posts/handgestures/functions.png","hash":"7d6921cf6a629afe6fc717d5ef4a0ff5ac4abd52","modified":1683899348360},{"_id":"source/_posts/membersys/index.jpg","hash":"58f9fa95fbeb4bafaf30e3338ed43262a259ee09","modified":1683899348365},{"_id":"source/_posts/pytorch-tips/support.png","hash":"5d2589f189a59c745cd80d23f1df7f9f04ae817e","modified":1683899348368},{"_id":"source/_posts/yolov5-practice/chat_flow.jpg","hash":"b98ec8a503411b43538102e236813ffe3b472322","modified":1683899348374},{"_id":"source/_posts/yolov5-practice/crop.jpg","hash":"10016c10fa60ba8aa12e29f739bdf72382514912","modified":1683899348375},{"_id":"source/_posts/membersys/signin.jpg","hash":"7543134b552baf7040ce489e589b23e3066b7388","modified":1683899348367},{"_id":"source/_posts/yolov5-practice/result.jpg","hash":"24621bd0d5580d9ed72c15292eb25d8bdf5f8a17","modified":1683899348387},{"_id":"source/_posts/handgestures/hand_landmarks.png","hash":"9c3a107427d303b0412dd4abe27de6d3126a7201","modified":1683899348361},{"_id":"source/_posts/membersys/plzsignin.jpg","hash":"4ddd6ffd20f2f411e9f52651671920301aba117f","modified":1683899348367},{"_id":"themes/hexo-theme-aomori/.eslintignore","hash":"0d8193103ddb9947903ebb5204cf1e188902f1f8","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/.babelrc","hash":"98714b5432f56c788e08a5194f2f33148da6ca63","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/LICENSE","hash":"df86e662005fc659cb72166664f8360223c10864","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/.prettierrc","hash":"8f8d09c16c9623c6e0a5d8f22b64292ee98a5a4c","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/.eslintrc.js","hash":"7d4dd8cabb411820feb1bfebb14992255fe2b714","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/README.md","hash":"9284588f3d73b808fef81ae9eb1544658ee036e0","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/package.json","hash":"bcce9db85589a1603342f16caabb829ed879c6d0","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/CHANGELOG.md","hash":"45e3f28e7a4085134630a77b499670a8bcac6df1","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/_config.yml","hash":"7b06be8d7fdf7f3849c29d2b9904e57095069ba4","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/gulpfile.js","hash":"98fb1db3899065e2517ffd834780093c1c9dd453","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/stylelint.config.js","hash":"35805e8a64447c3e9fec8cb7ca619783b4ffa4af","modified":1683899348401},{"_id":"themes/hexo-theme-aomori/languages/ja.yml","hash":"90a615a4f6e9af92ec7695022c475ff4ce3b8081","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/languages/cn.yml","hash":"041cda235156e1a078c27b969cadc4e29d017475","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/languages/it.yml","hash":"64a5acadfdcd365474ba1161041f8c5938f59683","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/index.ejs","hash":"ca9a6b1e5d2d952757671637156c5d72e6a0cb13","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/page.ejs","hash":"5e77fecc752e7baa7ce5ac57162980202160811d","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/layout/layout.ejs","hash":"c5dd66db0cea3796abda36146ab38f061c91f39e","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/.github/dependabot.yml","hash":"7e68a5fac86d2eb86706b9ec9e99bd0ce00c15b0","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/layout/post.ejs","hash":"f80a3073ea72631a26292ba16906b6d692a6e67c","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/layout/_widget/category.ejs","hash":"70bba3e81f42135ffeb2d129834fd5df8aea4c10","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_widget/archive.ejs","hash":"4d00993c9f80ddbce6d4b8317d4c29a4fb1fb139","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_widget/recent_posts.ejs","hash":"d45e8c7b9c7fec1b8fdeabaa5026f27da0a04304","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_widget/toc.ejs","hash":"05a8cea96817332d13bf3ede759e6f72ed0f7973","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/.github/workflows/action.yml","hash":"da59ad2d1d153ec97069cd74b920ea2e44d8ce3a","modified":1683899348390},{"_id":"themes/hexo-theme-aomori/layout/_widget/tag.ejs","hash":"e45f32b6c1b3a23c361d2c7dc70207d93c0f71b1","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/article-index.ejs","hash":"a436624e8aeb8c94113566cb1756e5c031cf5d8d","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/layout/_partial/archive-post.ejs","hash":"74371ea0ece20630f686459a3df334b760c6bc55","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/layout/_partial/article-tweet.ejs","hash":"67045e6d5d4bf141ad3e8a2bf34624ca5938e626","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/archive.ejs","hash":"f15750967beb06d91491aade0b4b00cb76a37dc9","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/layout/_partial/footer.ejs","hash":"f3366e3e0363de14099c6bf97727e844abe1f04b","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/head.ejs","hash":"b4fe8c26c41ecb03e666ef9fa45aae43c420bd38","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/header.ejs","hash":"29618017302e56fcb0bcc3a6487bacf6cb668086","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/article.ejs","hash":"64fd49d64394a8a91030a56012a0131ee113d0a8","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/meta.ejs","hash":"c8c71be685e412afbd8e9b25262e22f483f5e729","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/sidebar.ejs","hash":"10e3e7a90e3e91e14dda67e823c73fa5f1e7d675","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/social.ejs","hash":"3ab80663dee0f4e3ae33ec4f42874530c7e926ec","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/search.ejs","hash":"1569fd207c3be44ad37b644fb1399416a54779d3","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/source/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":1683899348396},{"_id":"themes/hexo-theme-aomori/source/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/images/AN_logo2.png","hash":"ffd422d0341db75b894ead9ca619618af04b4076","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/images/AN_logo.png","hash":"231521aa901a4cb0acd380d7fe5ac23f2438d36f","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/modules/lazyload.min.js","hash":"a9b706094ef95a2f4ce0ec6eef0181951c5a7208","modified":1683899348398},{"_id":"themes/hexo-theme-aomori/source/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1683899348398},{"_id":"themes/hexo-theme-aomori/source/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":1683899348398},{"_id":"themes/hexo-theme-aomori/source/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":1683899348398},{"_id":"themes/hexo-theme-aomori/source/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":1683899348399},{"_id":"themes/hexo-theme-aomori/source/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":1683899348399},{"_id":"themes/hexo-theme-aomori/source/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":1683899348399},{"_id":"themes/hexo-theme-aomori/source/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":1683899348401},{"_id":"themes/hexo-theme-aomori/source/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":1683899348401},{"_id":"themes/hexo-theme-aomori/source/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":1683899348400},{"_id":"themes/hexo-theme-aomori/source/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":1683899348401},{"_id":"themes/hexo-theme-aomori/source/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":1683899348401},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/friends.ejs","hash":"514e137c0e19e06dd3e930a98e5569cf83446b0a","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/default.ejs","hash":"23e0039aeba6413b99319fad4cea4e225aab38a1","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/ad.ejs","hash":"0a8130bcec7879f830976858b8d0dfe0ba036c01","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/comments.ejs","hash":"1502b23d5520b5db6c31c8036187f5373b4eb794","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/nav.ejs","hash":"d86028403ef9a098747712dc3103ed69c5089daa","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/copyright.ejs","hash":"4f1f566351a2ddff3f44f854a58f65ba6b28072c","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/photography.ejs","hash":"6a71806820a4d92082d307a0e4dc67976d4038c4","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/refer.ejs","hash":"cc1e673e1054b62da356fc066e048b084a03559a","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/date.ejs","hash":"c610dc1283e5d6ae582b9544ee6836e9fcea1b7c","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/reprint.ejs","hash":"75e9c766d19cb0907214e5628e00868b2adb6dcb","modified":1683899348393},{"_id":"source/_posts/fastapi/console.jpg","hash":"f5112ee84955a026aaa3e9bd45c5196e8f676b3e","modified":1683899348063},{"_id":"source/_posts/fastapi/swagger.jpg","hash":"ef92ad81877bea4a3eb26379dbe6ff378ca107cf","modified":1683899348065},{"_id":"source/_posts/fastapi/signup.jpg","hash":"3469a2d2e8e7c42d16ab1923b8b81181295a600c","modified":1683899348064},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/gallery.ejs","hash":"4502ca02780f3054cfaa517c9946d8c0479966cb","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/layout/_partial/page/photography-item.ejs","hash":"a6c1097d3428110825ca106c1379f2cd8034057f","modified":1683899348392},{"_id":"themes/hexo-theme-aomori/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1683899348393},{"_id":"themes/hexo-theme-aomori/source/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":1683899348398},{"_id":"themes/hexo-theme-aomori/source/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":1683899348399},{"_id":"source/_posts/handgestures/hand_crops.png","hash":"e1d0f01e7d0f0c40fa346a303b653d24a961a74b","modified":1683899348360},{"_id":"source/_posts/handgestures/csv.png","hash":"7d04042ab19243f59b1de270656263e35e59f918","modified":1683899348067},{"_id":"source/_posts/membersys/memberlist.jpg","hash":"2ccf25a972ddbd008afeaec4df423b61b861d6f1","modified":1683899348366},{"_id":"themes/hexo-theme-aomori/docs/cover.png","hash":"f52354acc7e9e52efcafc2c33e41a4907c541055","modified":1683899348391},{"_id":"themes/hexo-theme-aomori/source/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":1683899348394},{"_id":"themes/hexo-theme-aomori/source/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":1683899348397},{"_id":"themes/hexo-theme-aomori/source/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":1683899348399},{"_id":"source/_posts/yolov5-practice/roboflow.jpg","hash":"2700512d5bffc47a60b7bcf8715073a6885abd3a","modified":1683899348389},{"_id":"themes/hexo-theme-aomori/source/dist/build.js","hash":"a36f7dc0df1c252b2f407ceed1bb2bd6f31ba2ce","modified":1683899348396},{"_id":"source/_posts/handgestures/append.png","hash":"b224a2fa6967885eaf8890b2ca3f1f7ccdce10e1","modified":1683899348066},{"_id":"source/_posts/handgestures/mpsolutions.png","hash":"21b73216be1be4f19db972f0cded42602dc32556","modified":1683899348364},{"_id":"source/_posts/yolov5-practice/TEST.JPG","hash":"b744316e59d88e2701da18ae212b1e6b7a14709b","modified":1683899348374},{"_id":"source/_posts/yolov5-practice/output.png","hash":"493d25346b567a30f8288c0d57702b486deaa8cb","modified":1683899348386},{"_id":"source/_posts/handgestures/example.gif","hash":"ec0808d53cb38e8f6653489c5cb3859245e74b92","modified":1683899348356},{"_id":"public/about/index.html","hash":"8602a4d34a8cb22e5db340a4c2ce73bc04b6cf47","modified":1683905246253},{"_id":"public/categories/repository/index.html","hash":"cfff6e36146d7e0c77128038c1fc9f90dd191c61","modified":1683905246253},{"_id":"public/categories/tutorial/index.html","hash":"a46f6ddeeffcb26e7f7bfa163c3c383dcd710ff6","modified":1683905246253},{"_id":"public/archives/index.html","hash":"988bd0070a091124ffe8bad2189f87b8c65fc2bf","modified":1683905246253},{"_id":"public/archives/2023/index.html","hash":"545a053d2a52eceddc555c2d0f66a2007e127e75","modified":1683905246253},{"_id":"public/archives/2023/02/index.html","hash":"20bb846d9ffa254c3da60dab494639d76ea4b2b1","modified":1683905246253},{"_id":"public/archives/2023/03/index.html","hash":"e5e3dbf361cb89f16666caf37fc31d77d0f90813","modified":1683905246253},{"_id":"public/archives/2023/04/index.html","hash":"9195c1a7e94862a73ad85344f94795a429ce7495","modified":1683905246253},{"_id":"public/tags/Python/index.html","hash":"1cc5f27a5c870582213fb54d2413589b11534d39","modified":1683905246253},{"_id":"public/tags/PyQt5/index.html","hash":"92efe1a5fac484c6d4cc6c01af446b8b9b6ad7b9","modified":1683905246253},{"_id":"public/tags/WSL2/index.html","hash":"8da3b7916db7e612b9c700400d0ff9351981ba70","modified":1683905246253},{"_id":"public/tags/Docker/index.html","hash":"3ee2606480587b9903bb7aa83bd0a52f08e395df","modified":1683905246253},{"_id":"public/tags/Fastapi/index.html","hash":"b5bd53469f207a330eef31d05ae457f5cef79ea8","modified":1683905246253},{"_id":"public/tags/RESTful-API/index.html","hash":"fddce0b7d1d61731f4d18c04f4f6b5713e43cd26","modified":1683905246253},{"_id":"public/tags/AJAX/index.html","hash":"1583c1ad956db96953c9fc50c77bd14a835aa6b4","modified":1683905246253},{"_id":"public/tags/JavaScript/index.html","hash":"d99e1519943db0937735a3138676e21b77be6d2d","modified":1683905246253},{"_id":"public/tags/Flask/index.html","hash":"12f6ac7f4863843ef98b05fba7f73d52233f7b9b","modified":1683905246253},{"_id":"public/tags/MongoDB/index.html","hash":"a4eab091a1d6ce56e3b3f828f21e8d5ecb3c1889","modified":1683905246253},{"_id":"public/tags/Atlas/index.html","hash":"7a75c93f402963d0b8758d56030a500f8a5194af","modified":1683905246253},{"_id":"public/tags/Pytorch/index.html","hash":"505119ed7bba693853646b10eb31f3a8d193ab1c","modified":1683905246253},{"_id":"public/tags/Machine-Learning/index.html","hash":"28af6d845da1f182cbcd4ae9ca07badd13b8ad77","modified":1683905246253},{"_id":"public/tags/ML/index.html","hash":"2d2dd8990fde8b0aa05d4e65e4b8ec8edb333601","modified":1683905246253},{"_id":"public/tags/AI/index.html","hash":"64d8a522303d74487391e2c5e77a844f1815c7a2","modified":1683905246253},{"_id":"public/tags/Yolo/index.html","hash":"c36eb516454b8d19de2644f699a7e37c18bbec40","modified":1683905246253},{"_id":"public/tags/DL/index.html","hash":"92d199e94ebc7bb66b465a8115da40e5d7a5e4d1","modified":1683905246253},{"_id":"public/tags/CUDA/index.html","hash":"a3deef14ab1727f7039d0903173273d281064186","modified":1683905246253},{"_id":"public/tags/Mediapipe/index.html","hash":"4b764a8eb27c169399f3ec241353660bd7eaca5b","modified":1683905246253},{"_id":"public/tags/OpenCV/index.html","hash":"7f7b61c50c851b10c4f56ecf0f370938bb684c87","modified":1683905246253},{"_id":"public/tags/Tensorflow/index.html","hash":"304e158c677f1d0a91201f723eec86405d8974d8","modified":1683905246253},{"_id":"public/2023/04/12/docker-memo/index.html","hash":"76287da7b3afc512b5f4c4474aaa0ed5203b5bfa","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/index.html","hash":"03f4de58b8afb31acc8402d1b630359374169ae3","modified":1683905246253},{"_id":"public/2023/04/07/membersys/index.html","hash":"7c428aa07273bdb5988a816597bd44ffe8315e08","modified":1683905246253},{"_id":"public/2023/03/06/clockapp/index.html","hash":"24171b9f620623697394cd20598f4724ea2ecdcb","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/index.html","hash":"1d519837b5ffe994a7868d2a013f16022fc01748","modified":1683905246253},{"_id":"public/2023/02/18/yolo-tips/index.html","hash":"55a0dd3a95fa6605ee335e29a5e97ffac068e8a5","modified":1683905246253},{"_id":"public/2023/02/08/pytorch-tips/index.html","hash":"4610a2fe6caefd99a2130af8bc2a8e328a9724fd","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/index.html","hash":"37577ee2c454478e14d6cece8ded5955f5e23810","modified":1683905246253},{"_id":"public/page/2/index.html","hash":"ff6f6288bb06979429161956c906c67141ab4eb5","modified":1683905246253},{"_id":"public/index.html","hash":"9f3764d8433ed59ef2a1f02f305c597968e7d993","modified":1683905246253},{"_id":"public/images/AN_logo2.png","hash":"ffd422d0341db75b894ead9ca619618af04b4076","modified":1683905246253},{"_id":"public/images/AN_logo.png","hash":"231521aa901a4cb0acd380d7fe5ac23f2438d36f","modified":1683905246253},{"_id":"public/stylesheets/page.scss","hash":"57c6874a0520cb31f2295e5d75c8dabde066b478","modified":1683905246253},{"_id":"public/2023/03/06/clockapp/max.jpg","hash":"af3f48221fb3266c215dd431fcdd74a782df71e6","modified":1683905246253},{"_id":"public/stylesheets/style.scss","hash":"613fdeba6d7c7a2746e572ede464cd4db42ac570","modified":1683905246253},{"_id":"public/stylesheets/base.scss","hash":"a26efbbdcf15e8d6e3c044e733294fc6e8bedc77","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/get1.jpg","hash":"100b44c59f2f2ea1efd3ca771323dc0091fa4528","modified":1683905246253},{"_id":"public/stylesheets/media-fixed.scss","hash":"4b0ff31517a8a3106cf227d85ec305b346cfa69b","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/ajaxpost.jpg","hash":"c4ed1f248f3be91f01c002fcd9ab662d64117443","modified":1683905246253},{"_id":"public/2023/03/06/clockapp/min.jpg","hash":"5afb16b2f114f5734419c53a3518c8dca5447361","modified":1683905246253},{"_id":"public/2023/04/07/membersys/memberlistSign.jpg","hash":"42c16959f161a2fbad074feba49d6619ed74eaa1","modified":1683905246253},{"_id":"public/2023/04/12/docker-memo/vscode_wsl2.jpg","hash":"f71e86f9d1e9266b3932c56ddc122ab5ac679c8d","modified":1683905246253},{"_id":"public/2023/04/07/membersys/notadmin.jpg","hash":"414bb098addf1ce54aeb146daf76c98f77264e11","modified":1683905246253},{"_id":"public/2023/04/07/membersys/程式架構.jpg","hash":"b730fa537eb8e0072736407119ab083462c49144","modified":1683905246253},{"_id":"public/2023/02/08/pytorch-tips/cmd.png","hash":"1239521249eb90da0a9b27208f687dc60b37d146","modified":1683905246253},{"_id":"public/2023/04/07/membersys/register.jpg","hash":"d1b57ec961e60d74cf4a17e785ba4faa7d876512","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/plate1.jpg","hash":"5e6c24ca2e8843d9954b706c41ce837c06f434a6","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/app.png","hash":"32cd0cc86c0b04b7dd054857de880be489c52c5b","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/how_many.png","hash":"cc6a8d137dc7118fa6d21ac28b5ee728667e198e","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/setting.png","hash":"3ba634de7245d48e4dae3366eb3006b0b7a2b072","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/success.png","hash":"a7f401dc0a4ee9afc3923f68d149cb9a1c6cab94","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/labe_csv.png","hash":"14c9a23a5bc2c7af68e01ab9a209af509df318c5","modified":1683905246253},{"_id":"public/about/test.jpg","hash":"e0cc0c3979756149ccda0509d31c31c152772a63","modified":1683905246253},{"_id":"public/javascripts/app.js","hash":"6bf67a2221f0dce645467ec0e83f30a242730f39","modified":1683905246253},{"_id":"public/javascripts/disqusjs.js","hash":"1152117cee4e335306b79983573721aeb6418d39","modified":1683905246253},{"_id":"public/javascripts/custom.js","hash":"b186b1ae8921a3bf4d8746ac5f39acc10269ff96","modified":1683905246253},{"_id":"public/javascripts/valine.js","hash":"64a97abf6fb7291bccda74f108b5661a9694ebef","modified":1683905246253},{"_id":"public/javascripts/class-module.js","hash":"a771801e8e5528130a947958f605f9fc4c6d913d","modified":1683905246253},{"_id":"public/javascripts/gitalk.js","hash":"b2b847d6a4b8866f1a21896ab34b94adc607c6b4","modified":1683905246253},{"_id":"public/modules/algoliasearch-lite.umd.js","hash":"bcd46b678c70779298df8ffad570ab14e434d292","modified":1683905246253},{"_id":"public/modules/lazyload.min.js","hash":"a9b706094ef95a2f4ce0ec6eef0181951c5a7208","modified":1683905246253},{"_id":"public/modules/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1683905246253},{"_id":"public/modules/nprogress.js","hash":"14757ab1fcf209a4f17c9da3d6abb196fa65cba2","modified":1683905246253},{"_id":"public/stylesheets/github.css","hash":"ee593952684a791317ee8b77ad096e729dec649e","modified":1683905246253},{"_id":"public/modules/typed.min.js","hash":"ad8a75bd4743122b5dbf517221506607588ec50b","modified":1683905246253},{"_id":"public/modules/tocbot.min.js","hash":"76cd7f7ae727d3883d69a04a4402a46684e4d4d0","modified":1683905246253},{"_id":"public/stylesheets/normalize.css","hash":"ebe0759bf259b6caeadee6137973481046ac5636","modified":1683905246253},{"_id":"public/stylesheets/nprogress.css","hash":"af66636e02bccfe2fdf7c1ad7de1face9bf5ae2d","modified":1683905246253},{"_id":"public/stylesheets/remark42.css","hash":"b12749bacee85f203fcd10afd9212838ffef06f3","modified":1683905246253},{"_id":"public/stylesheets/spectre-icons.min.css","hash":"0f624fe521e0eb6c1f775f13eb0fb93ab6cf802c","modified":1683905246253},{"_id":"public/stylesheets/perfect-scrollbar.css","hash":"a94e730430930b2e048352996ff44bf28647669d","modified":1683905246253},{"_id":"public/stylesheets/tocbot.css","hash":"635010b494dae3d91d3be1b079b72b26ab2cc5b8","modified":1683905246253},{"_id":"public/stylesheets/swiper-bundle.min.css","hash":"a1fd2a708504af70216469cbd582cf698db8e461","modified":1683905246253},{"_id":"public/stylesheets/post.css","hash":"3f06ce944c9f721cdb5ea26c96fa11f9c2f6ec2f","modified":1683905246253},{"_id":"public/dist/custom.css","hash":"225a8abab79b67565badb8d8e9dd73f56537ba28","modified":1683905246253},{"_id":"public/dist/custom.js","hash":"d7679202f697b6547c456c08bab4edc9b76faaf4","modified":1683905246253},{"_id":"public/dist/build.css","hash":"d08b3ac3ce76582649bf4445c62c99011e3d5583","modified":1683905246253},{"_id":"public/modules/highlight.min.js","hash":"5c25af3caf3f02695741a4b989fedcca6cc1e88d","modified":1683905246253},{"_id":"public/dist/build.js","hash":"a36f7dc0df1c252b2f407ceed1bb2bd6f31ba2ce","modified":1683905246253},{"_id":"public/modules/perfect-scrollbar.min.js","hash":"cd1784e029249ebf5d57de1f677a4a61019706ae","modified":1683905246253},{"_id":"public/stylesheets/plyr.css","hash":"89c8e024bad75eec921898cae702785d77272dda","modified":1683905246253},{"_id":"public/stylesheets/spectre-exp.min.css","hash":"9ca686024f1e3c742a488156e8fcf4f7f5518425","modified":1683905246253},{"_id":"public/stylesheets/spectre.min.css","hash":"419c87aed0f592239f2adcbb6396731c6a7711cc","modified":1683905246253},{"_id":"public/modules/plyr.js","hash":"6bce9267aa6e64f77973f7079cea430d88befca1","modified":1683905246253},{"_id":"public/modules/swiper-bundle.min.js","hash":"72bd612182b6c475aa3d896231341a87da680ecb","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/get2.jpg","hash":"df1b25728c4353c98ac731f4239f17e33eaa6ca2","modified":1683905246253},{"_id":"public/2023/04/07/membersys/index.jpg","hash":"58f9fa95fbeb4bafaf30e3338ed43262a259ee09","modified":1683905246253},{"_id":"public/2023/04/07/membersys/signin.jpg","hash":"7543134b552baf7040ce489e589b23e3066b7388","modified":1683905246253},{"_id":"public/2023/02/08/pytorch-tips/support.png","hash":"5d2589f189a59c745cd80d23f1df7f9f04ae817e","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/result.jpg","hash":"24621bd0d5580d9ed72c15292eb25d8bdf5f8a17","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/chat_flow.jpg","hash":"b98ec8a503411b43538102e236813ffe3b472322","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/crop.jpg","hash":"10016c10fa60ba8aa12e29f739bdf72382514912","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/functions.png","hash":"7d6921cf6a629afe6fc717d5ef4a0ff5ac4abd52","modified":1683905246253},{"_id":"public/2023/04/07/membersys/plzsignin.jpg","hash":"4ddd6ffd20f2f411e9f52651671920301aba117f","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/hand_landmarks.png","hash":"9c3a107427d303b0412dd4abe27de6d3126a7201","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/swagger.jpg","hash":"ef92ad81877bea4a3eb26379dbe6ff378ca107cf","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/console.jpg","hash":"f5112ee84955a026aaa3e9bd45c5196e8f676b3e","modified":1683905246253},{"_id":"public/2023/03/15/fastapi/signup.jpg","hash":"3469a2d2e8e7c42d16ab1923b8b81181295a600c","modified":1683905246253},{"_id":"public/2023/04/07/membersys/memberlist.jpg","hash":"2ccf25a972ddbd008afeaec4df423b61b861d6f1","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/csv.png","hash":"7d04042ab19243f59b1de270656263e35e59f918","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/hand_crops.png","hash":"e1d0f01e7d0f0c40fa346a303b653d24a961a74b","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/roboflow.jpg","hash":"2700512d5bffc47a60b7bcf8715073a6885abd3a","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/append.png","hash":"b224a2fa6967885eaf8890b2ca3f1f7ccdce10e1","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/mpsolutions.png","hash":"21b73216be1be4f19db972f0cded42602dc32556","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/TEST.JPG","hash":"b744316e59d88e2701da18ae212b1e6b7a14709b","modified":1683905246253},{"_id":"public/2023/03/01/yolov5-practice/output.png","hash":"493d25346b567a30f8288c0d57702b486deaa8cb","modified":1683905246253},{"_id":"public/2023/02/01/handgestures/example.gif","hash":"ec0808d53cb38e8f6653489c5cb3859245e74b92","modified":1683905246253}],"Category":[{"name":"repository","_id":"clhkppfqc0003uxrh2tv3e05l"},{"name":"tutorial","_id":"clhkppfqd0005uxrh6u5x67ag"}],"Data":[],"Page":[{"_content":"\n<p align=\"center\">\n  <img src=\"test.jpg\" alt=\"avatar\" width=\"200\" style=\"margin-bottom: 6px; border-radius: 50%;\n  border: 4px #ffffff solid;\n  box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -webkit-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -moz-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\"/>\n</p>\n\n# About me\n\n我是Ansel，過去在傳產擔任FAE工程師，目前任職於軟體公司擔任PM。\n身為一個轉職工程師有著好學的心，在工作之餘也不忘精進自己的知識，寫寫code看看流行的技術等等！\n而過去工作中也應用到Iot產業中十分流行的Arduino，為了成為一個全方位的人才，除了軟體技能之外也向公司前輩學習基本電路的知識，讓工作能夠事半功倍!\n\n在這個Hexo網站中，我想把一些side projects、學習筆記或是一些技術分享丟上來，當作自己的一個成長紀錄!\n如果有興趣，也可以透過email📪: __anannannan0102@gmail.com__ 聯絡我\n或是對於side projects有疑問，也可以在[GitHub](https://github.com/AnselCh)的Issue中回應。\n","source":"about/index.md","raw":"\n<p align=\"center\">\n  <img src=\"test.jpg\" alt=\"avatar\" width=\"200\" style=\"margin-bottom: 6px; border-radius: 50%;\n  border: 4px #ffffff solid;\n  box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -webkit-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -moz-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\"/>\n</p>\n\n# About me\n\n我是Ansel，過去在傳產擔任FAE工程師，目前任職於軟體公司擔任PM。\n身為一個轉職工程師有著好學的心，在工作之餘也不忘精進自己的知識，寫寫code看看流行的技術等等！\n而過去工作中也應用到Iot產業中十分流行的Arduino，為了成為一個全方位的人才，除了軟體技能之外也向公司前輩學習基本電路的知識，讓工作能夠事半功倍!\n\n在這個Hexo網站中，我想把一些side projects、學習筆記或是一些技術分享丟上來，當作自己的一個成長紀錄!\n如果有興趣，也可以透過email📪: __anannannan0102@gmail.com__ 聯絡我\n或是對於side projects有疑問，也可以在[GitHub](https://github.com/AnselCh)的Issue中回應。\n","date":"2023-05-12T15:27:06.867Z","updated":"2023-05-12T15:27:06.867Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clhkppfq80000uxrhcx414wgq","content":"<p align=\"center\">\n  <img src=\"test.jpg\" alt=\"avatar\" width=\"200\" style=\"margin-bottom: 6px; border-radius: 50%;\n  border: 4px #ffffff solid;\n  box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -webkit-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -moz-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\"/>\n</p>\n\n<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><p>我是Ansel，過去在傳產擔任FAE工程師，目前任職於軟體公司擔任PM。<br>身為一個轉職工程師有著好學的心，在工作之餘也不忘精進自己的知識，寫寫code看看流行的技術等等！<br>而過去工作中也應用到Iot產業中十分流行的Arduino，為了成為一個全方位的人才，除了軟體技能之外也向公司前輩學習基本電路的知識，讓工作能夠事半功倍!</p>\n<p>在這個Hexo網站中，我想把一些side projects、學習筆記或是一些技術分享丟上來，當作自己的一個成長紀錄!<br>如果有興趣，也可以透過email📪: <strong><a href=\"mailto:&#97;&#110;&#x61;&#x6e;&#x6e;&#97;&#x6e;&#x6e;&#x61;&#x6e;&#48;&#x31;&#48;&#50;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#110;&#x61;&#x6e;&#x6e;&#97;&#x6e;&#x6e;&#x61;&#x6e;&#48;&#x31;&#48;&#50;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong> 聯絡我<br>或是對於side projects有疑問，也可以在<a href=\"https://github.com/AnselCh\">GitHub</a>的Issue中回應。</p>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\">\n  <img src=\"test.jpg\" alt=\"avatar\" width=\"200\" style=\"margin-bottom: 6px; border-radius: 50%;\n  border: 4px #ffffff solid;\n  box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -webkit-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\n  -moz-box-shadow: 6px 6px 10px -4px rgba(189,189,189,0.75);\"/>\n</p>\n\n<h1 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h1><p>我是Ansel，過去在傳產擔任FAE工程師，目前任職於軟體公司擔任PM。<br>身為一個轉職工程師有著好學的心，在工作之餘也不忘精進自己的知識，寫寫code看看流行的技術等等！<br>而過去工作中也應用到Iot產業中十分流行的Arduino，為了成為一個全方位的人才，除了軟體技能之外也向公司前輩學習基本電路的知識，讓工作能夠事半功倍!</p>\n<p>在這個Hexo網站中，我想把一些side projects、學習筆記或是一些技術分享丟上來，當作自己的一個成長紀錄!<br>如果有興趣，也可以透過email📪: <strong><a href=\"mailto:&#97;&#110;&#x61;&#x6e;&#x6e;&#97;&#x6e;&#x6e;&#x61;&#x6e;&#48;&#x31;&#48;&#50;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#110;&#x61;&#x6e;&#x6e;&#97;&#x6e;&#x6e;&#x61;&#x6e;&#48;&#x31;&#48;&#50;&#64;&#103;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong> 聯絡我<br>或是對於side projects有疑問，也可以在<a href=\"https://github.com/AnselCh\">GitHub</a>的Issue中回應。</p>\n"}],"Post":[{"title":"[PyQt5] 做一個GUI介面的時鐘吧!","date":"2023-03-06T03:06:13.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<img src=\"./max.jpg\" alt=\"max\" style=\"display:block; margin:auto;\"/>\n\n專案地址:https://github.com/AnselCh/widget_clock\n\n# 目標\n做出一個可以自訂位子且能調整透明度的小時鐘。\n\n<!--more-->\n\n# 正文\n\n```\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom time import strftime\nimport sys\nimport threading\n```\n\n載入GUI套件跟多執行緒，因為不能因調整透明度導致時間暫停更新，所以採用多執行緒。\n\n```\nclass MyWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Ann Clock')\n        self.setWindowFlags(Qt.WindowStaysOnTopHint)  # 視窗置頂\n        self.setWindowFlag(Qt.FramelessWindowHint)  # 標題列消失\n        self.setAttribute(Qt.WA_TranslucentBackground)  # 整個label以外設為半透明\n        self.resize(360, 110)\n        self.setUpdatesEnabled(True)  # 時間更新的Thread\n        self.ui()\n        self.clock_window = True\n```\n主視窗建置跟設定\n\n```\ndef ui(self):\n\n        self.label_time = QLabel(self)\n        font = QFont()\n        font.setFamily('calibri')\n        font.setPointSize(40)\n        font.setBold(True)\n        self.label = QLabel(self)\n        self.label.setGeometry(140, 90, 100, 30)\n        self.label_time.setFont(font)\n        self.label_time.setAlignment(Qt.AlignCenter)\n        radius = 12\n        self.label_time.setStyleSheet('''\n            color:\tblack;\n            background:rgb(245, 245, 245);\n            border-top-left-radius:{0}px;\n            border-bottom-left-radius:{0}px;\n            border-top-right-radius:{0}px;\n            border-bottom-right-radius:{0}px;\n            '''.format(radius))\n        self.slider = QSlider(self)\n        self.slider.setGeometry(30, 75, 300, 30)\n        self.slider.setRange(1, 10)\n        self.slider.setValue(5)\n        self.slider.setOrientation(1)\n        self.slider.setStyleSheet('''\n        QSlider {   border-radius: 10px;    }\n        QSlider::groove:horizontal {\n            height: 5px;\n            background: #C2C287;\n        }\n        QSlider::handle:horizontal{\n            background: #FFFFAA;\n            width: 16px;\n            height: 16px;\n            margin:-6px 0;\n            border-radius:8px;\n        }\n        QSlider::sub-page:horizontal{\n            background:#A5A552;\n        }\n        ''')\n```\nsetStyleSheet設定四個角的平滑度跟label顏色\n並加上slider(滑桿)調整透明度\n\n```\ndef nowtime(self):\n        while self.clock_window:\n            string = strftime('%H:%M:%S %p')\n            self.label_time.setText(string)\n```\n\n這邊是刷新時間的while迴圈，等等會用一個執行緒調用\n\n```\ndef transparency(self):\n        while self.clock_window:\n            user_setting = ((self.slider.value())/10)\n            tran = user_setting\n            self.setWindowOpacity(tran)\n\n```\n\n這邊是讀取slider調整數值while迴圈，等等會用另一個執行緒調用，來實現一邊調整透明度又不影響時間更新。\n\n```\ndef closeEvent(self, event):\n        self.clock_window = False\n\ndef mousePressEvent(self, event):\n    self.oldPosition = event.globalPos()\n\ndef mouseMoveEvent(self, event):\n    delta = QPoint(event.globalPos() - self.oldPosition)\n    self.move(self.x() + delta.x(), self.y() + delta.y())\n    self.oldPosition = event.globalPos()\n\n```\ncloseEvent是結束視窗函數，下面兩段則是讓視窗能夠點及任何位子就能拉到自訂位子，不過在ubuntu上執行位子會有點怪怪的，不確定是不是我個人問題?\n\n```\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MyWidget()\n    clock = threading.Thread(target=window.nowtime)\n    se = threading.Thread(target=window.transparency)\n    clock.start()\n    se.start()\n    window.show()\n    sys.exit(app.exec_())\n```\n最後是啟動GUI的函式。\n\n","source":"_posts/clockapp.md","raw":"---\ntitle: \"[PyQt5] 做一個GUI介面的時鐘吧!\"\ncategories:\n  - repository\ndate: 2023-03-06 11:06:13\ntags: [Python,PyQt5]\n---\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n<img src=\"./max.jpg\" alt=\"max\" style=\"display:block; margin:auto;\"/>\n\n專案地址:https://github.com/AnselCh/widget_clock\n\n# 目標\n做出一個可以自訂位子且能調整透明度的小時鐘。\n\n<!--more-->\n\n# 正文\n\n```\nfrom PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom time import strftime\nimport sys\nimport threading\n```\n\n載入GUI套件跟多執行緒，因為不能因調整透明度導致時間暫停更新，所以採用多執行緒。\n\n```\nclass MyWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle('Ann Clock')\n        self.setWindowFlags(Qt.WindowStaysOnTopHint)  # 視窗置頂\n        self.setWindowFlag(Qt.FramelessWindowHint)  # 標題列消失\n        self.setAttribute(Qt.WA_TranslucentBackground)  # 整個label以外設為半透明\n        self.resize(360, 110)\n        self.setUpdatesEnabled(True)  # 時間更新的Thread\n        self.ui()\n        self.clock_window = True\n```\n主視窗建置跟設定\n\n```\ndef ui(self):\n\n        self.label_time = QLabel(self)\n        font = QFont()\n        font.setFamily('calibri')\n        font.setPointSize(40)\n        font.setBold(True)\n        self.label = QLabel(self)\n        self.label.setGeometry(140, 90, 100, 30)\n        self.label_time.setFont(font)\n        self.label_time.setAlignment(Qt.AlignCenter)\n        radius = 12\n        self.label_time.setStyleSheet('''\n            color:\tblack;\n            background:rgb(245, 245, 245);\n            border-top-left-radius:{0}px;\n            border-bottom-left-radius:{0}px;\n            border-top-right-radius:{0}px;\n            border-bottom-right-radius:{0}px;\n            '''.format(radius))\n        self.slider = QSlider(self)\n        self.slider.setGeometry(30, 75, 300, 30)\n        self.slider.setRange(1, 10)\n        self.slider.setValue(5)\n        self.slider.setOrientation(1)\n        self.slider.setStyleSheet('''\n        QSlider {   border-radius: 10px;    }\n        QSlider::groove:horizontal {\n            height: 5px;\n            background: #C2C287;\n        }\n        QSlider::handle:horizontal{\n            background: #FFFFAA;\n            width: 16px;\n            height: 16px;\n            margin:-6px 0;\n            border-radius:8px;\n        }\n        QSlider::sub-page:horizontal{\n            background:#A5A552;\n        }\n        ''')\n```\nsetStyleSheet設定四個角的平滑度跟label顏色\n並加上slider(滑桿)調整透明度\n\n```\ndef nowtime(self):\n        while self.clock_window:\n            string = strftime('%H:%M:%S %p')\n            self.label_time.setText(string)\n```\n\n這邊是刷新時間的while迴圈，等等會用一個執行緒調用\n\n```\ndef transparency(self):\n        while self.clock_window:\n            user_setting = ((self.slider.value())/10)\n            tran = user_setting\n            self.setWindowOpacity(tran)\n\n```\n\n這邊是讀取slider調整數值while迴圈，等等會用另一個執行緒調用，來實現一邊調整透明度又不影響時間更新。\n\n```\ndef closeEvent(self, event):\n        self.clock_window = False\n\ndef mousePressEvent(self, event):\n    self.oldPosition = event.globalPos()\n\ndef mouseMoveEvent(self, event):\n    delta = QPoint(event.globalPos() - self.oldPosition)\n    self.move(self.x() + delta.x(), self.y() + delta.y())\n    self.oldPosition = event.globalPos()\n\n```\ncloseEvent是結束視窗函數，下面兩段則是讓視窗能夠點及任何位子就能拉到自訂位子，不過在ubuntu上執行位子會有點怪怪的，不確定是不是我個人問題?\n\n```\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MyWidget()\n    clock = threading.Thread(target=window.nowtime)\n    se = threading.Thread(target=window.transparency)\n    clock.start()\n    se.start()\n    window.show()\n    sys.exit(app.exec_())\n```\n最後是啟動GUI的函式。\n\n","slug":"clockapp","published":1,"updated":"2023-05-12T13:49:08.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqa0001uxrh4e35b3p3","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<img src=\"./max.jpg\" alt=\"max\" style=\"display:block; margin:auto;\"/>\n\n<p>專案地址:<a href=\"https://github.com/AnselCh/widget_clock\">https://github.com/AnselCh/widget_clock</a></p>\n<h1 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h1><p>做出一個可以自訂位子且能調整透明度的小時鐘。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><pre><code>from PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom time import strftime\nimport sys\nimport threading\n</code></pre>\n<p>載入GUI套件跟多執行緒，因為不能因調整透明度導致時間暫停更新，所以採用多執行緒。</p>\n<pre><code>class MyWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(&#39;Ann Clock&#39;)\n        self.setWindowFlags(Qt.WindowStaysOnTopHint)  # 視窗置頂\n        self.setWindowFlag(Qt.FramelessWindowHint)  # 標題列消失\n        self.setAttribute(Qt.WA_TranslucentBackground)  # 整個label以外設為半透明\n        self.resize(360, 110)\n        self.setUpdatesEnabled(True)  # 時間更新的Thread\n        self.ui()\n        self.clock_window = True\n</code></pre>\n<p>主視窗建置跟設定</p>\n<pre><code>def ui(self):\n\n        self.label_time = QLabel(self)\n        font = QFont()\n        font.setFamily(&#39;calibri&#39;)\n        font.setPointSize(40)\n        font.setBold(True)\n        self.label = QLabel(self)\n        self.label.setGeometry(140, 90, 100, 30)\n        self.label_time.setFont(font)\n        self.label_time.setAlignment(Qt.AlignCenter)\n        radius = 12\n        self.label_time.setStyleSheet(&#39;&#39;&#39;\n            color:\tblack;\n            background:rgb(245, 245, 245);\n            border-top-left-radius:&#123;0&#125;px;\n            border-bottom-left-radius:&#123;0&#125;px;\n            border-top-right-radius:&#123;0&#125;px;\n            border-bottom-right-radius:&#123;0&#125;px;\n            &#39;&#39;&#39;.format(radius))\n        self.slider = QSlider(self)\n        self.slider.setGeometry(30, 75, 300, 30)\n        self.slider.setRange(1, 10)\n        self.slider.setValue(5)\n        self.slider.setOrientation(1)\n        self.slider.setStyleSheet(&#39;&#39;&#39;\n        QSlider &#123;   border-radius: 10px;    &#125;\n        QSlider::groove:horizontal &#123;\n            height: 5px;\n            background: #C2C287;\n        &#125;\n        QSlider::handle:horizontal&#123;\n            background: #FFFFAA;\n            width: 16px;\n            height: 16px;\n            margin:-6px 0;\n            border-radius:8px;\n        &#125;\n        QSlider::sub-page:horizontal&#123;\n            background:#A5A552;\n        &#125;\n        &#39;&#39;&#39;)\n</code></pre>\n<p>setStyleSheet設定四個角的平滑度跟label顏色<br>並加上slider(滑桿)調整透明度</p>\n<pre><code>def nowtime(self):\n        while self.clock_window:\n            string = strftime(&#39;%H:%M:%S %p&#39;)\n            self.label_time.setText(string)\n</code></pre>\n<p>這邊是刷新時間的while迴圈，等等會用一個執行緒調用</p>\n<pre><code>def transparency(self):\n        while self.clock_window:\n            user_setting = ((self.slider.value())/10)\n            tran = user_setting\n            self.setWindowOpacity(tran)\n</code></pre>\n<p>這邊是讀取slider調整數值while迴圈，等等會用另一個執行緒調用，來實現一邊調整透明度又不影響時間更新。</p>\n<pre><code>def closeEvent(self, event):\n        self.clock_window = False\n\ndef mousePressEvent(self, event):\n    self.oldPosition = event.globalPos()\n\ndef mouseMoveEvent(self, event):\n    delta = QPoint(event.globalPos() - self.oldPosition)\n    self.move(self.x() + delta.x(), self.y() + delta.y())\n    self.oldPosition = event.globalPos()\n</code></pre>\n<p>closeEvent是結束視窗函數，下面兩段則是讓視窗能夠點及任何位子就能拉到自訂位子，不過在ubuntu上執行位子會有點怪怪的，不確定是不是我個人問題?</p>\n<pre><code>if __name__ == &#39;__main__&#39;:\n    app = QApplication(sys.argv)\n    window = MyWidget()\n    clock = threading.Thread(target=window.nowtime)\n    se = threading.Thread(target=window.transparency)\n    clock.start()\n    se.start()\n    window.show()\n    sys.exit(app.exec_())\n</code></pre>\n<p>最後是啟動GUI的函式。</p>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<img src=\"./max.jpg\" alt=\"max\" style=\"display:block; margin:auto;\"/>\n\n<p>專案地址:<a href=\"https://github.com/AnselCh/widget_clock\">https://github.com/AnselCh/widget_clock</a></p>\n<h1 id=\"目標\"><a href=\"#目標\" class=\"headerlink\" title=\"目標\"></a>目標</h1><p>做出一個可以自訂位子且能調整透明度的小時鐘。</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><pre><code>from PyQt5.QtCore import *\nfrom PyQt5.QtGui import *\nfrom PyQt5.QtWidgets import *\nfrom time import strftime\nimport sys\nimport threading\n</code></pre>\n<p>載入GUI套件跟多執行緒，因為不能因調整透明度導致時間暫停更新，所以採用多執行緒。</p>\n<pre><code>class MyWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.setWindowTitle(&#39;Ann Clock&#39;)\n        self.setWindowFlags(Qt.WindowStaysOnTopHint)  # 視窗置頂\n        self.setWindowFlag(Qt.FramelessWindowHint)  # 標題列消失\n        self.setAttribute(Qt.WA_TranslucentBackground)  # 整個label以外設為半透明\n        self.resize(360, 110)\n        self.setUpdatesEnabled(True)  # 時間更新的Thread\n        self.ui()\n        self.clock_window = True\n</code></pre>\n<p>主視窗建置跟設定</p>\n<pre><code>def ui(self):\n\n        self.label_time = QLabel(self)\n        font = QFont()\n        font.setFamily(&#39;calibri&#39;)\n        font.setPointSize(40)\n        font.setBold(True)\n        self.label = QLabel(self)\n        self.label.setGeometry(140, 90, 100, 30)\n        self.label_time.setFont(font)\n        self.label_time.setAlignment(Qt.AlignCenter)\n        radius = 12\n        self.label_time.setStyleSheet(&#39;&#39;&#39;\n            color:\tblack;\n            background:rgb(245, 245, 245);\n            border-top-left-radius:&#123;0&#125;px;\n            border-bottom-left-radius:&#123;0&#125;px;\n            border-top-right-radius:&#123;0&#125;px;\n            border-bottom-right-radius:&#123;0&#125;px;\n            &#39;&#39;&#39;.format(radius))\n        self.slider = QSlider(self)\n        self.slider.setGeometry(30, 75, 300, 30)\n        self.slider.setRange(1, 10)\n        self.slider.setValue(5)\n        self.slider.setOrientation(1)\n        self.slider.setStyleSheet(&#39;&#39;&#39;\n        QSlider &#123;   border-radius: 10px;    &#125;\n        QSlider::groove:horizontal &#123;\n            height: 5px;\n            background: #C2C287;\n        &#125;\n        QSlider::handle:horizontal&#123;\n            background: #FFFFAA;\n            width: 16px;\n            height: 16px;\n            margin:-6px 0;\n            border-radius:8px;\n        &#125;\n        QSlider::sub-page:horizontal&#123;\n            background:#A5A552;\n        &#125;\n        &#39;&#39;&#39;)\n</code></pre>\n<p>setStyleSheet設定四個角的平滑度跟label顏色<br>並加上slider(滑桿)調整透明度</p>\n<pre><code>def nowtime(self):\n        while self.clock_window:\n            string = strftime(&#39;%H:%M:%S %p&#39;)\n            self.label_time.setText(string)\n</code></pre>\n<p>這邊是刷新時間的while迴圈，等等會用一個執行緒調用</p>\n<pre><code>def transparency(self):\n        while self.clock_window:\n            user_setting = ((self.slider.value())/10)\n            tran = user_setting\n            self.setWindowOpacity(tran)\n</code></pre>\n<p>這邊是讀取slider調整數值while迴圈，等等會用另一個執行緒調用，來實現一邊調整透明度又不影響時間更新。</p>\n<pre><code>def closeEvent(self, event):\n        self.clock_window = False\n\ndef mousePressEvent(self, event):\n    self.oldPosition = event.globalPos()\n\ndef mouseMoveEvent(self, event):\n    delta = QPoint(event.globalPos() - self.oldPosition)\n    self.move(self.x() + delta.x(), self.y() + delta.y())\n    self.oldPosition = event.globalPos()\n</code></pre>\n<p>closeEvent是結束視窗函數，下面兩段則是讓視窗能夠點及任何位子就能拉到自訂位子，不過在ubuntu上執行位子會有點怪怪的，不確定是不是我個人問題?</p>\n<pre><code>if __name__ == &#39;__main__&#39;:\n    app = QApplication(sys.argv)\n    window = MyWidget()\n    clock = threading.Thread(target=window.nowtime)\n    se = threading.Thread(target=window.transparency)\n    clock.start()\n    se.start()\n    window.show()\n    sys.exit(app.exec_())\n</code></pre>\n<p>最後是啟動GUI的函式。</p>"},{"title":"[Docker] 練習筆記","date":"2023-04-12T09:22:40.000Z","_content":"\n\n\n# CLI 登入\n\n先用網頁登入docker hub,到Security 新增Tocken\n__要先記錄下密碼__\n用取得的指令登入 ex: docker login -u anselchen\n\n若失敗\n\n```\nservice docker stop\nrm ~/.docker/config.json\nservice docker start\n```\nTry again!\n\n<!--more-->\n\n# 建立Image\n\n寫好Dockerfile\n\n```\n# 建立img\ndocker build -t mem_api .\n# 啟動 前面是container name 後面是要啟動的image\ndocker run -p 8000:8000 --name memberapi mem_api\n```\n\n# Push 到 Hub\n\n1. 先建立一個 repository\n2. 製作Tag\n```\n# docker images 查id, <tag>輸入備註\ndocker tag <image_id> <docker_hub_username>/<repository_name>:<tag>\n```\n3.\n```\ndocker push <docker_hub_username>/<repository_name>:<tag>\n```\n\n4.\n```\ndocker pull <docker_hub_username>/<repository_name>:<tag>\n\n```\n\nref\n1. https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID\n\n2. https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\n\n3. https://www.runoob.com/docker/docker-command-manual.html\n\n# WSL2 Docker 安裝\n\n官網: https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\n1. 系統管理員 模式中開啟 PowerShell\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\nwsl --install\n```\n\n2. 手動下載 [WSL2 Linux 核心更新套件 (適用於 x64 電腦)](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi),後安裝\n\n3. 將 WSL 2 設定為預設版本\n\n```\nwsl --set-default-version 2\n```\n\n4. 手動安裝想要的linux版本 請至[官網](https://learn.microsoft.com/zh-tw/windows/wsl/install-manual),下半部選擇\n\n或是\n\n```\nInvoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n\nAdd-AppxPackage .\\app_name.appx\n```\n\n5. 裝好WSL2後，打開WSL2\n```\nwsl.exe -l -v #查linux版本\nwsl.exe --set-version Ubuntu-20.04 2 #切換至V2\nwsl.exe --set-default-version 2\nwsl --set-default Ubuntu-20.04\n```\ndocker後台也要設定WSL2\n\n6. 在WSL terminal\n```\nwsl\ncode . #會打開VScode 左下角可以確認是否為WSL環境\n```\n<img src=\"./vscode_wsl2.jpg\" alt=\"ubuntu2004\" style=\"display:block; margin:auto;\"/>\n\n7. 更換Systemd(看個人習慣)\n```\ngit clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git\ncd ubuntu-wsl2-systemd-script\nbash ubuntu-wsl2-systemd-script.sh\n```\n重啟WSL\n\n```\nps aux #查看是否成功讀取\n```\n\nref: https://ithelp.ithome.com.tw/articles/10255920\n","source":"_posts/docker-memo.md","raw":"---\ntitle: \"[Docker] 練習筆記\"\ncategories:\n  - tutorial\ndate: 2023-04-12 17:22:40\ntags: [WSL2 , Docker]\n---\n\n\n\n# CLI 登入\n\n先用網頁登入docker hub,到Security 新增Tocken\n__要先記錄下密碼__\n用取得的指令登入 ex: docker login -u anselchen\n\n若失敗\n\n```\nservice docker stop\nrm ~/.docker/config.json\nservice docker start\n```\nTry again!\n\n<!--more-->\n\n# 建立Image\n\n寫好Dockerfile\n\n```\n# 建立img\ndocker build -t mem_api .\n# 啟動 前面是container name 後面是要啟動的image\ndocker run -p 8000:8000 --name memberapi mem_api\n```\n\n# Push 到 Hub\n\n1. 先建立一個 repository\n2. 製作Tag\n```\n# docker images 查id, <tag>輸入備註\ndocker tag <image_id> <docker_hub_username>/<repository_name>:<tag>\n```\n3.\n```\ndocker push <docker_hub_username>/<repository_name>:<tag>\n```\n\n4.\n```\ndocker pull <docker_hub_username>/<repository_name>:<tag>\n\n```\n\nref\n1. https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID\n\n2. https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\n\n3. https://www.runoob.com/docker/docker-command-manual.html\n\n# WSL2 Docker 安裝\n\n官網: https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\n1. 系統管理員 模式中開啟 PowerShell\n```\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\nwsl --install\n```\n\n2. 手動下載 [WSL2 Linux 核心更新套件 (適用於 x64 電腦)](https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi),後安裝\n\n3. 將 WSL 2 設定為預設版本\n\n```\nwsl --set-default-version 2\n```\n\n4. 手動安裝想要的linux版本 請至[官網](https://learn.microsoft.com/zh-tw/windows/wsl/install-manual),下半部選擇\n\n或是\n\n```\nInvoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n\nAdd-AppxPackage .\\app_name.appx\n```\n\n5. 裝好WSL2後，打開WSL2\n```\nwsl.exe -l -v #查linux版本\nwsl.exe --set-version Ubuntu-20.04 2 #切換至V2\nwsl.exe --set-default-version 2\nwsl --set-default Ubuntu-20.04\n```\ndocker後台也要設定WSL2\n\n6. 在WSL terminal\n```\nwsl\ncode . #會打開VScode 左下角可以確認是否為WSL環境\n```\n<img src=\"./vscode_wsl2.jpg\" alt=\"ubuntu2004\" style=\"display:block; margin:auto;\"/>\n\n7. 更換Systemd(看個人習慣)\n```\ngit clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git\ncd ubuntu-wsl2-systemd-script\nbash ubuntu-wsl2-systemd-script.sh\n```\n重啟WSL\n\n```\nps aux #查看是否成功讀取\n```\n\nref: https://ithelp.ithome.com.tw/articles/10255920\n","slug":"docker-memo","published":1,"updated":"2023-05-12T13:49:08.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqb0002uxrhev9tgqak","content":"<h1 id=\"CLI-登入\"><a href=\"#CLI-登入\" class=\"headerlink\" title=\"CLI 登入\"></a>CLI 登入</h1><p>先用網頁登入docker hub,到Security 新增Tocken<br><strong>要先記錄下密碼</strong><br>用取得的指令登入 ex: docker login -u anselchen</p>\n<p>若失敗</p>\n<pre><code>service docker stop\nrm ~/.docker/config.json\nservice docker start\n</code></pre>\n<p>Try again!</p>\n<span id=\"more\"></span>\n\n<h1 id=\"建立Image\"><a href=\"#建立Image\" class=\"headerlink\" title=\"建立Image\"></a>建立Image</h1><p>寫好Dockerfile</p>\n<pre><code># 建立img\ndocker build -t mem_api .\n# 啟動 前面是container name 後面是要啟動的image\ndocker run -p 8000:8000 --name memberapi mem_api\n</code></pre>\n<h1 id=\"Push-到-Hub\"><a href=\"#Push-到-Hub\" class=\"headerlink\" title=\"Push 到 Hub\"></a>Push 到 Hub</h1><ol>\n<li>先建立一個 repository</li>\n<li>製作Tag</li>\n</ol>\n<pre><code># docker images 查id, &lt;tag&gt;輸入備註\ndocker tag &lt;image_id&gt; &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code>docker push &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<ol start=\"4\">\n<li></li>\n</ol>\n<pre><code>docker pull &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<p>ref</p>\n<ol>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID\">https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID</a></p>\n</li>\n<li><p><a href=\"https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\">https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/docker/docker-command-manual.html\">https://www.runoob.com/docker/docker-command-manual.html</a></p>\n</li>\n</ol>\n<h1 id=\"WSL2-Docker-安裝\"><a href=\"#WSL2-Docker-安裝\" class=\"headerlink\" title=\"WSL2 Docker 安裝\"></a>WSL2 Docker 安裝</h1><p>官網: <a href=\"https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\">https://learn.microsoft.com/zh-tw/windows/wsl/install-manual</a></p>\n<ol>\n<li>系統管理員 模式中開啟 PowerShell</li>\n</ol>\n<pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\nwsl --install\n</code></pre>\n<ol start=\"2\">\n<li><p>手動下載 <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">WSL2 Linux 核心更新套件 (適用於 x64 電腦)</a>,後安裝</p>\n</li>\n<li><p>將 WSL 2 設定為預設版本</p>\n</li>\n</ol>\n<pre><code>wsl --set-default-version 2\n</code></pre>\n<ol start=\"4\">\n<li>手動安裝想要的linux版本 請至<a href=\"https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\">官網</a>,下半部選擇</li>\n</ol>\n<p>或是</p>\n<pre><code>Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n\nAdd-AppxPackage .\\app_name.appx\n</code></pre>\n<ol start=\"5\">\n<li>裝好WSL2後，打開WSL2</li>\n</ol>\n<pre><code>wsl.exe -l -v #查linux版本\nwsl.exe --set-version Ubuntu-20.04 2 #切換至V2\nwsl.exe --set-default-version 2\nwsl --set-default Ubuntu-20.04\n</code></pre>\n<p>docker後台也要設定WSL2</p>\n<ol start=\"6\">\n<li>在WSL terminal</li>\n</ol>\n<pre><code>wsl\ncode . #會打開VScode 左下角可以確認是否為WSL環境\n</code></pre>\n<img src=\"./vscode_wsl2.jpg\" alt=\"ubuntu2004\" style=\"display:block; margin:auto;\"/>\n\n<ol start=\"7\">\n<li>更換Systemd(看個人習慣)</li>\n</ol>\n<pre><code>git clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git\ncd ubuntu-wsl2-systemd-script\nbash ubuntu-wsl2-systemd-script.sh\n</code></pre>\n<p>重啟WSL</p>\n<pre><code>ps aux #查看是否成功讀取\n</code></pre>\n<p>ref: <a href=\"https://ithelp.ithome.com.tw/articles/10255920\">https://ithelp.ithome.com.tw/articles/10255920</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"CLI-登入\"><a href=\"#CLI-登入\" class=\"headerlink\" title=\"CLI 登入\"></a>CLI 登入</h1><p>先用網頁登入docker hub,到Security 新增Tocken<br><strong>要先記錄下密碼</strong><br>用取得的指令登入 ex: docker login -u anselchen</p>\n<p>若失敗</p>\n<pre><code>service docker stop\nrm ~/.docker/config.json\nservice docker start\n</code></pre>\n<p>Try again!</p>","more":"<h1 id=\"建立Image\"><a href=\"#建立Image\" class=\"headerlink\" title=\"建立Image\"></a>建立Image</h1><p>寫好Dockerfile</p>\n<pre><code># 建立img\ndocker build -t mem_api .\n# 啟動 前面是container name 後面是要啟動的image\ndocker run -p 8000:8000 --name memberapi mem_api\n</code></pre>\n<h1 id=\"Push-到-Hub\"><a href=\"#Push-到-Hub\" class=\"headerlink\" title=\"Push 到 Hub\"></a>Push 到 Hub</h1><ol>\n<li>先建立一個 repository</li>\n<li>製作Tag</li>\n</ol>\n<pre><code># docker images 查id, &lt;tag&gt;輸入備註\ndocker tag &lt;image_id&gt; &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<ol start=\"3\">\n<li></li>\n</ol>\n<pre><code>docker push &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<ol start=\"4\">\n<li></li>\n</ol>\n<pre><code>docker pull &lt;docker_hub_username&gt;/&lt;repository_name&gt;:&lt;tag&gt;\n</code></pre>\n<p>ref</p>\n<ol>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID\">https://ithelp.ithome.com.tw/articles/10191727#:~:text=%E5%A6%82%E6%9E%9C%E8%A6%81%E9%80%B2%E5%85%A5%20container%20%E7%9C%8B%E6%9C%89%E5%93%AA%E4%BA%9B%E8%B3%87%E6%96%99%E5%A4%BE%E3%80%81%E6%AA%94%E6%A1%88%E6%88%96%E6%98%AF%E8%A6%81%E4%BF%AE%E6%94%B9%E6%AA%94%E6%A1%88%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E7%9A%84%E6%8C%87%E4%BB%A4%EF%BC%9A%20%24%20docker%20exec%20-it,nginx%20%2Fbin%2Fbash%20nginx%20%E7%82%BA%20Container%20Name%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20Container%20ID</a></p>\n</li>\n<li><p><a href=\"https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\">https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/</a></p>\n</li>\n<li><p><a href=\"https://www.runoob.com/docker/docker-command-manual.html\">https://www.runoob.com/docker/docker-command-manual.html</a></p>\n</li>\n</ol>\n<h1 id=\"WSL2-Docker-安裝\"><a href=\"#WSL2-Docker-安裝\" class=\"headerlink\" title=\"WSL2 Docker 安裝\"></a>WSL2 Docker 安裝</h1><p>官網: <a href=\"https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\">https://learn.microsoft.com/zh-tw/windows/wsl/install-manual</a></p>\n<ol>\n<li>系統管理員 模式中開啟 PowerShell</li>\n</ol>\n<pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\nwsl --install\n</code></pre>\n<ol start=\"2\">\n<li><p>手動下載 <a href=\"https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\">WSL2 Linux 核心更新套件 (適用於 x64 電腦)</a>,後安裝</p>\n</li>\n<li><p>將 WSL 2 設定為預設版本</p>\n</li>\n</ol>\n<pre><code>wsl --set-default-version 2\n</code></pre>\n<ol start=\"4\">\n<li>手動安裝想要的linux版本 請至<a href=\"https://learn.microsoft.com/zh-tw/windows/wsl/install-manual\">官網</a>,下半部選擇</li>\n</ol>\n<p>或是</p>\n<pre><code>Invoke-WebRequest -Uri https://aka.ms/wslubuntu2004 -OutFile Ubuntu.appx -UseBasicParsing\n\nAdd-AppxPackage .\\app_name.appx\n</code></pre>\n<ol start=\"5\">\n<li>裝好WSL2後，打開WSL2</li>\n</ol>\n<pre><code>wsl.exe -l -v #查linux版本\nwsl.exe --set-version Ubuntu-20.04 2 #切換至V2\nwsl.exe --set-default-version 2\nwsl --set-default Ubuntu-20.04\n</code></pre>\n<p>docker後台也要設定WSL2</p>\n<ol start=\"6\">\n<li>在WSL terminal</li>\n</ol>\n<pre><code>wsl\ncode . #會打開VScode 左下角可以確認是否為WSL環境\n</code></pre>\n<img src=\"./vscode_wsl2.jpg\" alt=\"ubuntu2004\" style=\"display:block; margin:auto;\"/>\n\n<ol start=\"7\">\n<li>更換Systemd(看個人習慣)</li>\n</ol>\n<pre><code>git clone https://github.com/DamionGans/ubuntu-wsl2-systemd-script.git\ncd ubuntu-wsl2-systemd-script\nbash ubuntu-wsl2-systemd-script.sh\n</code></pre>\n<p>重啟WSL</p>\n<pre><code>ps aux #查看是否成功讀取\n</code></pre>\n<p>ref: <a href=\"https://ithelp.ithome.com.tw/articles/10255920\">https://ithelp.ithome.com.tw/articles/10255920</a></p>"},{"title":"[Fastapi] 快速製作一個會員後台API,並用ajax串接","date":"2023-03-15T02:51:56.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n今天要用python來開發API，至於什麼是RESTful API就不贅述，網路上都可以輕易找到!\n\n這次會使用Fastapi並連接MongoDB製作會員系統API，過程相當簡單!\n\n並在最後寫一個簡單的註冊頁面測試API。\n\n<!--more-->\n\n---\n\n# 前置作業\n\n```\npip install fastapi[all]==0.75.0\npip install pydantic==1.9\npip install pymongo[srv]==3.11.0\npip install python-dotenv==0.19.2\npip install pytest==7.0.1\n\n```\n\n[fastapi](https://github.com/tiangolo/fastapi)是一個開源的api框架，可以去官網看，且swagger UI支援，不需要加裝第三方套件測試\npydantic 是資料處理的套件\n[pymongo](pymongo) 是MongoDB出的py連接套件\n並準備一個MongoDB帳號，若要用本地端的DB就不用準備，這邊附上[官方教學](https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster)\n\n## 資料結構\n\n--main.py\n--models.py\n--routes.py\n--.env\n\n---\n\n# Coding\n\n1. 先設置好.env，連接DB用，ATLAS_URI照著上面官方教學就可以拿到了\n\n```\nATLAS_URI=mongodb+srv://<usr>:<pwd>@cluster0.mxggl0u.mongodb.net/?retryWrites=true&w=majority\nDB_NAME=membership #自己定義資料庫\n```\n\n2. main.py\n\n```\nfrom fastapi import FastAPI\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as member_router\n\nconfig = dotenv_values(\".env\") #讀取.env\n\napp = FastAPI() #設置主要的API\n\n# 設置允許串接ip，等等前端才能連進來\norigins = [\n    \"http://127.0.0.1:5500\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.on_event(\"startup\") #連接DB\ndef startup_db_client():\n    app.mongodb_client = MongoClient(config[\"ATLAS_URI\"])\n    app.database = app.mongodb_client[config[\"DB_NAME\"]]\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_db_client():\n    app.mongodb_client.close()\n\n# member_router是會員系統的router,若有需求可以設置多個router\napp.include_router(member_router, tags=[\"membership\"], prefix=\"/membership\")\n\n```\n\n3. models.py #建立資料格式\n\n```\nimport uuid\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\n\nclass Member(BaseModel):\n    account: str = Field(max_length=16,\n                         min_length=8, description='最少輸入8個字元,最多16個字元')\n    password: str = Field(...)\n    name: str = Field(...)\n    phone: str = Field(...)\n    '''\n    Field(...)是必填欄位,Field（None） 是可選填\n    Field(None,title=\"The description of the item\",max_length=10,alias='我是替代字')\n\n    '''\n\n    class Config:\n        allow_population_by_field_name = True\n        schema_extra = {\n            \"example\": {\n                \"account\": \"testtest123\",\n                \"password\": \"testpassword\",\n                \"name\": \"Ansel\",\n                \"phone\": \"0912345678\"\n            }\n        }\n\n\nclass MemberUpdate(BaseModel):\n    name: Optional[str]\n    phone: Optional[str]\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"NewName\",\n                \"phone\": \"0900123321\"\n            }\n        }\n\n```\n\n4. routes.py #這邊只設置 membership的API，有需要可以多設置購物車等等的API\n\n```\nfrom fastapi import APIRouter, Body, Request, Response, HTTPException, status\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List\n\nfrom models import Member, MemberUpdate\n\nrouter = APIRouter()\n\n\n@router.post(\"/\", response_description=\"Create a new account\", status_code=status.HTTP_201_CREATED, response_model=Member)\ndef create_member(request: Request, member: Member = Body(...)):\n    # 檢查帳號是否已存在\n    existing_member = request.app.database[\"member_data\"].find_one(\n        {\"account\": member.account}\n    )\n    if existing_member:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Account already exists\")\n\n    # 新增會員\n    member = jsonable_encoder(member)\n    new_member = request.app.database[\"member_data\"].insert_one(member)\n    created_member = request.app.database[\"member_data\"].find_one(\n        {\"_id\": new_member.inserted_id}\n    )\n\n    return created_member\n\n\n@router.get(\"/\", response_description=\"List all member\", response_model=List[Member])\ndef list_memberships(request: Request):\n    books = list(request.app.database[\"member_data\"].find(limit=100))\n    return books\n\n\n@router.get(\"/{account}\", response_description=\"Get member by id\", response_model=Member)\ndef find_member(account: str, request: Request):\n    if (member := request.app.database[\"member_data\"].find_one({\"account\": account})) is not None:\n        return member\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with account {account} not found\")\n\n\n@router.patch(\"/{account}\", response_description=\"Update member info\", response_model=Member)\ndef update_member(account: str, request: Request, member: MemberUpdate = Body(...)):\n    member = {k: v for k, v in member.dict().items() if v is not None}\n\n    if len(member) >= 1:\n        update_result = request.app.database[\"member_data\"].update_one(\n            {\"account\": account}, {\"$set\": member}\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=f\"Member with ID {account} not found\")\n\n    if (\n        existing_book := request.app.database[\"member_data\"].find_one({\"account\": account})\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with ID {account} not found\")\n\n\n@router.delete(\"/{account}\", response_description=\"Delete account\")\ndef delete_member(account: str, request: Request, response: Response):\n    delete_result = request.app.database[\"member_data\"].delete_one(\n        {\"account\": account})\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with ID {account} not found\")\n\n```\n\n這邊我用啟動後的畫面比較好懂\n<img src=\"./swagger.jpg\" alt=\"swagger\" style=\"display:block; margin:auto;\"/>\n\n上面可以看到用\nGET /membership/:得到DB內的所有資料\nPOST /membership/:建立會員資料\nGET /membership/{account}:{account}內帶入要查詢的帳號\nDELETE /membership/{account}:{account}內帶入要刪除的帳號\nPATCH /membership/{account}:{account}內帶入要更新的帳號\n\n至於啟動的部分會用到uvicorn來跑這隻程式，在終端機輸入\n\n```\npython -m uvicorn main:app --reload\n```\n\n跑起來會出現\n\n```\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [9560] using watchgod\nINFO:     Started server process [9244]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n之後再瀏覽器輸入http://127.0.0.1:8000/docs 就會進入剛才的swagger UI了，便可以開始做測試\n\n不想開啟也可以用curl指令進行測試，不過這邊不贅述。\n\n# 網頁前端\n\n<img src=\"./signup.jpg\"  alt=\"註冊畫面\" />\n\n```\n<script>\n\n      $(document).ready(function () {\n         $('#formId').submit(function (event) {\n            // 防止提交默認\n            event.preventDefault();\n\n            // 獲取表單數據\n            var account = $('#account').val();\n            var password = $('#password').val();\n            var name = $('#name').val();\n            var contactNumber = $('#phone').val();\n\n            // POST Requests with JSON\n            $.ajax({\n               url: 'http://127.0.0.1:8000/membership/',\n               type: 'POST',\n               contentType: 'application/json',\n               data: JSON.stringify({\n                  account: account,\n                  password: password,\n                  name: name,\n                  phone: contactNumber\n               }),\n\n               success: function (response) {\n                  console.log(response);\n               },\n               error: function (xhr, status, error) {\n                  console.error(error);\n               }\n            });\n         });\n      });\n\n   </script>\n\n   <form class=\"transfot\" id='formId'>\n        <div class=\"col-md-12\">\n        <span>Sign up</span>\n        <h3>Let start!</h3>\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"account\" placeholder=\"Account\" type=\"text\"\n            name=\"Account\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"password\" placeholder=\"Password\" type=\"text\"\n            name=\"Password\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"name\" placeholder=\"Name\" type=\"text\" name=\"Name\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"phone\" placeholder=\"Contact Number\" type=\"text\"\n            name=\"Contact Number\">\n        </div>\n        <div class=\"col-md-12\">\n        <button type='submit' id='submitButton'>Sign up</button>\n        </div>\n    </form>\n```\nAJAX程式碼大致是這樣\n\n<br/>\n<img src=\"./ajaxpost.jpg\"  alt=\"postdata\" />\n填好資料後送出\n<br/>\n<img src=\"./console.jpg\" alt=\"postsuccess\" />\n<br/>\n\n可以看到console回傳JSON格式，且FAST API的terminal顯示POST Created\n之後再進到Swagger用GET memberlist驗證\n\n<br/>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./get1.jpg\" alt=\"before\" style=\"display:block; margin:auto;\" />\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./get2.jpg\" alt=\"after\" style=\"display:block; margin:auto;\"width=\"50%\"/>\n</div>\n<br/>\n\n左邊是傳送前只有一筆資料，右邊可以看到剛剛POST進來的第二筆。\n\n簡單的前後端連接就完成啦!\n\n# Ref\n\n* https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\n* https://www.mongodb.com/languages/python/pymongo-tutorial\n* https://www.mongodb.com/docs/drivers/pymongo/\n* https://cloud.tencent.com/developer/article/1949684\n* https://chat.openai.com/chat","source":"_posts/fastapi.md","raw":"---\ntitle: \"[Fastapi] 快速製作一個會員後台API,並用ajax串接\"\ncategories:\n  - repository\ndate: 2023-03-15 10:51:56\ntags: [Python,Fastapi,RESTful API,AJAX,JavaScript]\n---\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n今天要用python來開發API，至於什麼是RESTful API就不贅述，網路上都可以輕易找到!\n\n這次會使用Fastapi並連接MongoDB製作會員系統API，過程相當簡單!\n\n並在最後寫一個簡單的註冊頁面測試API。\n\n<!--more-->\n\n---\n\n# 前置作業\n\n```\npip install fastapi[all]==0.75.0\npip install pydantic==1.9\npip install pymongo[srv]==3.11.0\npip install python-dotenv==0.19.2\npip install pytest==7.0.1\n\n```\n\n[fastapi](https://github.com/tiangolo/fastapi)是一個開源的api框架，可以去官網看，且swagger UI支援，不需要加裝第三方套件測試\npydantic 是資料處理的套件\n[pymongo](pymongo) 是MongoDB出的py連接套件\n並準備一個MongoDB帳號，若要用本地端的DB就不用準備，這邊附上[官方教學](https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster)\n\n## 資料結構\n\n--main.py\n--models.py\n--routes.py\n--.env\n\n---\n\n# Coding\n\n1. 先設置好.env，連接DB用，ATLAS_URI照著上面官方教學就可以拿到了\n\n```\nATLAS_URI=mongodb+srv://<usr>:<pwd>@cluster0.mxggl0u.mongodb.net/?retryWrites=true&w=majority\nDB_NAME=membership #自己定義資料庫\n```\n\n2. main.py\n\n```\nfrom fastapi import FastAPI\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as member_router\n\nconfig = dotenv_values(\".env\") #讀取.env\n\napp = FastAPI() #設置主要的API\n\n# 設置允許串接ip，等等前端才能連進來\norigins = [\n    \"http://127.0.0.1:5500\"]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n@app.on_event(\"startup\") #連接DB\ndef startup_db_client():\n    app.mongodb_client = MongoClient(config[\"ATLAS_URI\"])\n    app.database = app.mongodb_client[config[\"DB_NAME\"]]\n\n\n@app.on_event(\"shutdown\")\ndef shutdown_db_client():\n    app.mongodb_client.close()\n\n# member_router是會員系統的router,若有需求可以設置多個router\napp.include_router(member_router, tags=[\"membership\"], prefix=\"/membership\")\n\n```\n\n3. models.py #建立資料格式\n\n```\nimport uuid\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\n\nclass Member(BaseModel):\n    account: str = Field(max_length=16,\n                         min_length=8, description='最少輸入8個字元,最多16個字元')\n    password: str = Field(...)\n    name: str = Field(...)\n    phone: str = Field(...)\n    '''\n    Field(...)是必填欄位,Field（None） 是可選填\n    Field(None,title=\"The description of the item\",max_length=10,alias='我是替代字')\n\n    '''\n\n    class Config:\n        allow_population_by_field_name = True\n        schema_extra = {\n            \"example\": {\n                \"account\": \"testtest123\",\n                \"password\": \"testpassword\",\n                \"name\": \"Ansel\",\n                \"phone\": \"0912345678\"\n            }\n        }\n\n\nclass MemberUpdate(BaseModel):\n    name: Optional[str]\n    phone: Optional[str]\n\n    class Config:\n        schema_extra = {\n            \"example\": {\n                \"name\": \"NewName\",\n                \"phone\": \"0900123321\"\n            }\n        }\n\n```\n\n4. routes.py #這邊只設置 membership的API，有需要可以多設置購物車等等的API\n\n```\nfrom fastapi import APIRouter, Body, Request, Response, HTTPException, status\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List\n\nfrom models import Member, MemberUpdate\n\nrouter = APIRouter()\n\n\n@router.post(\"/\", response_description=\"Create a new account\", status_code=status.HTTP_201_CREATED, response_model=Member)\ndef create_member(request: Request, member: Member = Body(...)):\n    # 檢查帳號是否已存在\n    existing_member = request.app.database[\"member_data\"].find_one(\n        {\"account\": member.account}\n    )\n    if existing_member:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=\"Account already exists\")\n\n    # 新增會員\n    member = jsonable_encoder(member)\n    new_member = request.app.database[\"member_data\"].insert_one(member)\n    created_member = request.app.database[\"member_data\"].find_one(\n        {\"_id\": new_member.inserted_id}\n    )\n\n    return created_member\n\n\n@router.get(\"/\", response_description=\"List all member\", response_model=List[Member])\ndef list_memberships(request: Request):\n    books = list(request.app.database[\"member_data\"].find(limit=100))\n    return books\n\n\n@router.get(\"/{account}\", response_description=\"Get member by id\", response_model=Member)\ndef find_member(account: str, request: Request):\n    if (member := request.app.database[\"member_data\"].find_one({\"account\": account})) is not None:\n        return member\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with account {account} not found\")\n\n\n@router.patch(\"/{account}\", response_description=\"Update member info\", response_model=Member)\ndef update_member(account: str, request: Request, member: MemberUpdate = Body(...)):\n    member = {k: v for k, v in member.dict().items() if v is not None}\n\n    if len(member) >= 1:\n        update_result = request.app.database[\"member_data\"].update_one(\n            {\"account\": account}, {\"$set\": member}\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=f\"Member with ID {account} not found\")\n\n    if (\n        existing_book := request.app.database[\"member_data\"].find_one({\"account\": account})\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with ID {account} not found\")\n\n\n@router.delete(\"/{account}\", response_description=\"Delete account\")\ndef delete_member(account: str, request: Request, response: Response):\n    delete_result = request.app.database[\"member_data\"].delete_one(\n        {\"account\": account})\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f\"Member with ID {account} not found\")\n\n```\n\n這邊我用啟動後的畫面比較好懂\n<img src=\"./swagger.jpg\" alt=\"swagger\" style=\"display:block; margin:auto;\"/>\n\n上面可以看到用\nGET /membership/:得到DB內的所有資料\nPOST /membership/:建立會員資料\nGET /membership/{account}:{account}內帶入要查詢的帳號\nDELETE /membership/{account}:{account}內帶入要刪除的帳號\nPATCH /membership/{account}:{account}內帶入要更新的帳號\n\n至於啟動的部分會用到uvicorn來跑這隻程式，在終端機輸入\n\n```\npython -m uvicorn main:app --reload\n```\n\n跑起來會出現\n\n```\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [9560] using watchgod\nINFO:     Started server process [9244]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```\n之後再瀏覽器輸入http://127.0.0.1:8000/docs 就會進入剛才的swagger UI了，便可以開始做測試\n\n不想開啟也可以用curl指令進行測試，不過這邊不贅述。\n\n# 網頁前端\n\n<img src=\"./signup.jpg\"  alt=\"註冊畫面\" />\n\n```\n<script>\n\n      $(document).ready(function () {\n         $('#formId').submit(function (event) {\n            // 防止提交默認\n            event.preventDefault();\n\n            // 獲取表單數據\n            var account = $('#account').val();\n            var password = $('#password').val();\n            var name = $('#name').val();\n            var contactNumber = $('#phone').val();\n\n            // POST Requests with JSON\n            $.ajax({\n               url: 'http://127.0.0.1:8000/membership/',\n               type: 'POST',\n               contentType: 'application/json',\n               data: JSON.stringify({\n                  account: account,\n                  password: password,\n                  name: name,\n                  phone: contactNumber\n               }),\n\n               success: function (response) {\n                  console.log(response);\n               },\n               error: function (xhr, status, error) {\n                  console.error(error);\n               }\n            });\n         });\n      });\n\n   </script>\n\n   <form class=\"transfot\" id='formId'>\n        <div class=\"col-md-12\">\n        <span>Sign up</span>\n        <h3>Let start!</h3>\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"account\" placeholder=\"Account\" type=\"text\"\n            name=\"Account\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"password\" placeholder=\"Password\" type=\"text\"\n            name=\"Password\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"name\" placeholder=\"Name\" type=\"text\" name=\"Name\">\n        </div>\n        <div class=\"col-md-12\">\n        <input class=\"col-md-12\" id=\"phone\" placeholder=\"Contact Number\" type=\"text\"\n            name=\"Contact Number\">\n        </div>\n        <div class=\"col-md-12\">\n        <button type='submit' id='submitButton'>Sign up</button>\n        </div>\n    </form>\n```\nAJAX程式碼大致是這樣\n\n<br/>\n<img src=\"./ajaxpost.jpg\"  alt=\"postdata\" />\n填好資料後送出\n<br/>\n<img src=\"./console.jpg\" alt=\"postsuccess\" />\n<br/>\n\n可以看到console回傳JSON格式，且FAST API的terminal顯示POST Created\n之後再進到Swagger用GET memberlist驗證\n\n<br/>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./get1.jpg\" alt=\"before\" style=\"display:block; margin:auto;\" />\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./get2.jpg\" alt=\"after\" style=\"display:block; margin:auto;\"width=\"50%\"/>\n</div>\n<br/>\n\n左邊是傳送前只有一筆資料，右邊可以看到剛剛POST進來的第二筆。\n\n簡單的前後端連接就完成啦!\n\n# Ref\n\n* https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\n* https://www.mongodb.com/languages/python/pymongo-tutorial\n* https://www.mongodb.com/docs/drivers/pymongo/\n* https://cloud.tencent.com/developer/article/1949684\n* https://chat.openai.com/chat","slug":"fastapi","published":1,"updated":"2023-05-12T13:49:08.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqe000fuxrhavd9gvao","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<p>今天要用python來開發API，至於什麼是RESTful API就不贅述，網路上都可以輕易找到!</p>\n<p>這次會使用Fastapi並連接MongoDB製作會員系統API，過程相當簡單!</p>\n<p>並在最後寫一個簡單的註冊頁面測試API。</p>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h1><pre><code>pip install fastapi[all]==0.75.0\npip install pydantic==1.9\npip install pymongo[srv]==3.11.0\npip install python-dotenv==0.19.2\npip install pytest==7.0.1\n</code></pre>\n<p><a href=\"https://github.com/tiangolo/fastapi\">fastapi</a>是一個開源的api框架，可以去官網看，且swagger UI支援，不需要加裝第三方套件測試<br>pydantic 是資料處理的套件<br><a href=\"pymongo\">pymongo</a> 是MongoDB出的py連接套件<br>並準備一個MongoDB帳號，若要用本地端的DB就不用準備，這邊附上<a href=\"https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\">官方教學</a></p>\n<h2 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h2><p>–main.py<br>–models.py<br>–routes.py<br>–.env</p>\n<hr>\n<h1 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h1><ol>\n<li>先設置好.env，連接DB用，ATLAS_URI照著上面官方教學就可以拿到了</li>\n</ol>\n<pre><code>ATLAS_URI=mongodb+srv://&lt;usr&gt;:&lt;pwd&gt;@cluster0.mxggl0u.mongodb.net/?retryWrites=true&amp;w=majority\nDB_NAME=membership #自己定義資料庫\n</code></pre>\n<ol start=\"2\">\n<li>main.py</li>\n</ol>\n<pre><code>from fastapi import FastAPI\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as member_router\n\nconfig = dotenv_values(&quot;.env&quot;) #讀取.env\n\napp = FastAPI() #設置主要的API\n\n# 設置允許串接ip，等等前端才能連進來\norigins = [\n    &quot;http://127.0.0.1:5500&quot;]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[&quot;*&quot;],\n    allow_headers=[&quot;*&quot;],\n)\n\n@app.on_event(&quot;startup&quot;) #連接DB\ndef startup_db_client():\n    app.mongodb_client = MongoClient(config[&quot;ATLAS_URI&quot;])\n    app.database = app.mongodb_client[config[&quot;DB_NAME&quot;]]\n\n\n@app.on_event(&quot;shutdown&quot;)\ndef shutdown_db_client():\n    app.mongodb_client.close()\n\n# member_router是會員系統的router,若有需求可以設置多個router\napp.include_router(member_router, tags=[&quot;membership&quot;], prefix=&quot;/membership&quot;)\n</code></pre>\n<ol start=\"3\">\n<li>models.py #建立資料格式</li>\n</ol>\n<pre><code>import uuid\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\n\nclass Member(BaseModel):\n    account: str = Field(max_length=16,\n                         min_length=8, description=&#39;最少輸入8個字元,最多16個字元&#39;)\n    password: str = Field(...)\n    name: str = Field(...)\n    phone: str = Field(...)\n    &#39;&#39;&#39;\n    Field(...)是必填欄位,Field（None） 是可選填\n    Field(None,title=&quot;The description of the item&quot;,max_length=10,alias=&#39;我是替代字&#39;)\n\n    &#39;&#39;&#39;\n\n    class Config:\n        allow_population_by_field_name = True\n        schema_extra = &#123;\n            &quot;example&quot;: &#123;\n                &quot;account&quot;: &quot;testtest123&quot;,\n                &quot;password&quot;: &quot;testpassword&quot;,\n                &quot;name&quot;: &quot;Ansel&quot;,\n                &quot;phone&quot;: &quot;0912345678&quot;\n            &#125;\n        &#125;\n\n\nclass MemberUpdate(BaseModel):\n    name: Optional[str]\n    phone: Optional[str]\n\n    class Config:\n        schema_extra = &#123;\n            &quot;example&quot;: &#123;\n                &quot;name&quot;: &quot;NewName&quot;,\n                &quot;phone&quot;: &quot;0900123321&quot;\n            &#125;\n        &#125;\n</code></pre>\n<ol start=\"4\">\n<li>routes.py #這邊只設置 membership的API，有需要可以多設置購物車等等的API</li>\n</ol>\n<pre><code>from fastapi import APIRouter, Body, Request, Response, HTTPException, status\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List\n\nfrom models import Member, MemberUpdate\n\nrouter = APIRouter()\n\n\n@router.post(&quot;/&quot;, response_description=&quot;Create a new account&quot;, status_code=status.HTTP_201_CREATED, response_model=Member)\ndef create_member(request: Request, member: Member = Body(...)):\n    # 檢查帳號是否已存在\n    existing_member = request.app.database[&quot;member_data&quot;].find_one(\n        &#123;&quot;account&quot;: member.account&#125;\n    )\n    if existing_member:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=&quot;Account already exists&quot;)\n\n    # 新增會員\n    member = jsonable_encoder(member)\n    new_member = request.app.database[&quot;member_data&quot;].insert_one(member)\n    created_member = request.app.database[&quot;member_data&quot;].find_one(\n        &#123;&quot;_id&quot;: new_member.inserted_id&#125;\n    )\n\n    return created_member\n\n\n@router.get(&quot;/&quot;, response_description=&quot;List all member&quot;, response_model=List[Member])\ndef list_memberships(request: Request):\n    books = list(request.app.database[&quot;member_data&quot;].find(limit=100))\n    return books\n\n\n@router.get(&quot;/&#123;account&#125;&quot;, response_description=&quot;Get member by id&quot;, response_model=Member)\ndef find_member(account: str, request: Request):\n    if (member := request.app.database[&quot;member_data&quot;].find_one(&#123;&quot;account&quot;: account&#125;)) is not None:\n        return member\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with account &#123;account&#125; not found&quot;)\n\n\n@router.patch(&quot;/&#123;account&#125;&quot;, response_description=&quot;Update member info&quot;, response_model=Member)\ndef update_member(account: str, request: Request, member: MemberUpdate = Body(...)):\n    member = &#123;k: v for k, v in member.dict().items() if v is not None&#125;\n\n    if len(member) &gt;= 1:\n        update_result = request.app.database[&quot;member_data&quot;].update_one(\n            &#123;&quot;account&quot;: account&#125;, &#123;&quot;$set&quot;: member&#125;\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n\n    if (\n        existing_book := request.app.database[&quot;member_data&quot;].find_one(&#123;&quot;account&quot;: account&#125;)\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n\n\n@router.delete(&quot;/&#123;account&#125;&quot;, response_description=&quot;Delete account&quot;)\ndef delete_member(account: str, request: Request, response: Response):\n    delete_result = request.app.database[&quot;member_data&quot;].delete_one(\n        &#123;&quot;account&quot;: account&#125;)\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n</code></pre>\n<p>這邊我用啟動後的畫面比較好懂<br><img src=\"./swagger.jpg\" alt=\"swagger\" style=\"display:block; margin:auto;\"/></p>\n<p>上面可以看到用<br>GET &#x2F;membership&#x2F;:得到DB內的所有資料<br>POST &#x2F;membership&#x2F;:建立會員資料<br>GET &#x2F;membership&#x2F;{account}:{account}內帶入要查詢的帳號<br>DELETE &#x2F;membership&#x2F;{account}:{account}內帶入要刪除的帳號<br>PATCH &#x2F;membership&#x2F;{account}:{account}內帶入要更新的帳號</p>\n<p>至於啟動的部分會用到uvicorn來跑這隻程式，在終端機輸入</p>\n<pre><code>python -m uvicorn main:app --reload\n</code></pre>\n<p>跑起來會出現</p>\n<pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [9560] using watchgod\nINFO:     Started server process [9244]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>\n<p>之後再瀏覽器輸入<a href=\"http://127.0.0.1:8000/docs\">http://127.0.0.1:8000/docs</a> 就會進入剛才的swagger UI了，便可以開始做測試</p>\n<p>不想開啟也可以用curl指令進行測試，不過這邊不贅述。</p>\n<h1 id=\"網頁前端\"><a href=\"#網頁前端\" class=\"headerlink\" title=\"網頁前端\"></a>網頁前端</h1><img src=\"./signup.jpg\"  alt=\"註冊畫面\" />\n\n<pre><code>&lt;script&gt;\n\n      $(document).ready(function () &#123;\n         $(&#39;#formId&#39;).submit(function (event) &#123;\n            // 防止提交默認\n            event.preventDefault();\n\n            // 獲取表單數據\n            var account = $(&#39;#account&#39;).val();\n            var password = $(&#39;#password&#39;).val();\n            var name = $(&#39;#name&#39;).val();\n            var contactNumber = $(&#39;#phone&#39;).val();\n\n            // POST Requests with JSON\n            $.ajax(&#123;\n               url: &#39;http://127.0.0.1:8000/membership/&#39;,\n               type: &#39;POST&#39;,\n               contentType: &#39;application/json&#39;,\n               data: JSON.stringify(&#123;\n                  account: account,\n                  password: password,\n                  name: name,\n                  phone: contactNumber\n               &#125;),\n\n               success: function (response) &#123;\n                  console.log(response);\n               &#125;,\n               error: function (xhr, status, error) &#123;\n                  console.error(error);\n               &#125;\n            &#125;);\n         &#125;);\n      &#125;);\n\n   &lt;/script&gt;\n\n   &lt;form class=&quot;transfot&quot; id=&#39;formId&#39;&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;span&gt;Sign up&lt;/span&gt;\n        &lt;h3&gt;Let start!&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;account&quot; placeholder=&quot;Account&quot; type=&quot;text&quot;\n            name=&quot;Account&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;password&quot; placeholder=&quot;Password&quot; type=&quot;text&quot;\n            name=&quot;Password&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;name&quot; placeholder=&quot;Name&quot; type=&quot;text&quot; name=&quot;Name&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;phone&quot; placeholder=&quot;Contact Number&quot; type=&quot;text&quot;\n            name=&quot;Contact Number&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;button type=&#39;submit&#39; id=&#39;submitButton&#39;&gt;Sign up&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n</code></pre>\n<p>AJAX程式碼大致是這樣</p>\n<br/>\n<img src=\"./ajaxpost.jpg\"  alt=\"postdata\" />\n填好資料後送出\n<br/>\n<img src=\"./console.jpg\" alt=\"postsuccess\" />\n<br/>\n\n<p>可以看到console回傳JSON格式，且FAST API的terminal顯示POST Created<br>之後再進到Swagger用GET memberlist驗證</p>\n<br/>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./get1.jpg\" alt=\"before\" style=\"display:block; margin:auto;\" />\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./get2.jpg\" alt=\"after\" style=\"display:block; margin:auto;\"width=\"50%\"/>\n</div>\n<br/>\n\n<p>左邊是傳送前只有一筆資料，右邊可以看到剛剛POST進來的第二筆。</p>\n<p>簡單的前後端連接就完成啦!</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><ul>\n<li><a href=\"https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\">https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster</a></li>\n<li><a href=\"https://www.mongodb.com/languages/python/pymongo-tutorial\">https://www.mongodb.com/languages/python/pymongo-tutorial</a></li>\n<li><a href=\"https://www.mongodb.com/docs/drivers/pymongo/\">https://www.mongodb.com/docs/drivers/pymongo/</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1949684\">https://cloud.tencent.com/developer/article/1949684</a></li>\n<li><a href=\"https://chat.openai.com/chat\">https://chat.openai.com/chat</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<p>今天要用python來開發API，至於什麼是RESTful API就不贅述，網路上都可以輕易找到!</p>\n<p>這次會使用Fastapi並連接MongoDB製作會員系統API，過程相當簡單!</p>\n<p>並在最後寫一個簡單的註冊頁面測試API。</p>","more":"<hr>\n<h1 id=\"前置作業\"><a href=\"#前置作業\" class=\"headerlink\" title=\"前置作業\"></a>前置作業</h1><pre><code>pip install fastapi[all]==0.75.0\npip install pydantic==1.9\npip install pymongo[srv]==3.11.0\npip install python-dotenv==0.19.2\npip install pytest==7.0.1\n</code></pre>\n<p><a href=\"https://github.com/tiangolo/fastapi\">fastapi</a>是一個開源的api框架，可以去官網看，且swagger UI支援，不需要加裝第三方套件測試<br>pydantic 是資料處理的套件<br><a href=\"pymongo\">pymongo</a> 是MongoDB出的py連接套件<br>並準備一個MongoDB帳號，若要用本地端的DB就不用準備，這邊附上<a href=\"https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\">官方教學</a></p>\n<h2 id=\"資料結構\"><a href=\"#資料結構\" class=\"headerlink\" title=\"資料結構\"></a>資料結構</h2><p>–main.py<br>–models.py<br>–routes.py<br>–.env</p>\n<hr>\n<h1 id=\"Coding\"><a href=\"#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h1><ol>\n<li>先設置好.env，連接DB用，ATLAS_URI照著上面官方教學就可以拿到了</li>\n</ol>\n<pre><code>ATLAS_URI=mongodb+srv://&lt;usr&gt;:&lt;pwd&gt;@cluster0.mxggl0u.mongodb.net/?retryWrites=true&amp;w=majority\nDB_NAME=membership #自己定義資料庫\n</code></pre>\n<ol start=\"2\">\n<li>main.py</li>\n</ol>\n<pre><code>from fastapi import FastAPI\nfrom dotenv import dotenv_values\nfrom pymongo import MongoClient\nfrom routes import router as member_router\n\nconfig = dotenv_values(&quot;.env&quot;) #讀取.env\n\napp = FastAPI() #設置主要的API\n\n# 設置允許串接ip，等等前端才能連進來\norigins = [\n    &quot;http://127.0.0.1:5500&quot;]\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[&quot;*&quot;],\n    allow_headers=[&quot;*&quot;],\n)\n\n@app.on_event(&quot;startup&quot;) #連接DB\ndef startup_db_client():\n    app.mongodb_client = MongoClient(config[&quot;ATLAS_URI&quot;])\n    app.database = app.mongodb_client[config[&quot;DB_NAME&quot;]]\n\n\n@app.on_event(&quot;shutdown&quot;)\ndef shutdown_db_client():\n    app.mongodb_client.close()\n\n# member_router是會員系統的router,若有需求可以設置多個router\napp.include_router(member_router, tags=[&quot;membership&quot;], prefix=&quot;/membership&quot;)\n</code></pre>\n<ol start=\"3\">\n<li>models.py #建立資料格式</li>\n</ol>\n<pre><code>import uuid\nfrom typing import Optional\nfrom pydantic import BaseModel, Field\n\n\nclass Member(BaseModel):\n    account: str = Field(max_length=16,\n                         min_length=8, description=&#39;最少輸入8個字元,最多16個字元&#39;)\n    password: str = Field(...)\n    name: str = Field(...)\n    phone: str = Field(...)\n    &#39;&#39;&#39;\n    Field(...)是必填欄位,Field（None） 是可選填\n    Field(None,title=&quot;The description of the item&quot;,max_length=10,alias=&#39;我是替代字&#39;)\n\n    &#39;&#39;&#39;\n\n    class Config:\n        allow_population_by_field_name = True\n        schema_extra = &#123;\n            &quot;example&quot;: &#123;\n                &quot;account&quot;: &quot;testtest123&quot;,\n                &quot;password&quot;: &quot;testpassword&quot;,\n                &quot;name&quot;: &quot;Ansel&quot;,\n                &quot;phone&quot;: &quot;0912345678&quot;\n            &#125;\n        &#125;\n\n\nclass MemberUpdate(BaseModel):\n    name: Optional[str]\n    phone: Optional[str]\n\n    class Config:\n        schema_extra = &#123;\n            &quot;example&quot;: &#123;\n                &quot;name&quot;: &quot;NewName&quot;,\n                &quot;phone&quot;: &quot;0900123321&quot;\n            &#125;\n        &#125;\n</code></pre>\n<ol start=\"4\">\n<li>routes.py #這邊只設置 membership的API，有需要可以多設置購物車等等的API</li>\n</ol>\n<pre><code>from fastapi import APIRouter, Body, Request, Response, HTTPException, status\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List\n\nfrom models import Member, MemberUpdate\n\nrouter = APIRouter()\n\n\n@router.post(&quot;/&quot;, response_description=&quot;Create a new account&quot;, status_code=status.HTTP_201_CREATED, response_model=Member)\ndef create_member(request: Request, member: Member = Body(...)):\n    # 檢查帳號是否已存在\n    existing_member = request.app.database[&quot;member_data&quot;].find_one(\n        &#123;&quot;account&quot;: member.account&#125;\n    )\n    if existing_member:\n        raise HTTPException(\n            status_code=status.HTTP_400_BAD_REQUEST, detail=&quot;Account already exists&quot;)\n\n    # 新增會員\n    member = jsonable_encoder(member)\n    new_member = request.app.database[&quot;member_data&quot;].insert_one(member)\n    created_member = request.app.database[&quot;member_data&quot;].find_one(\n        &#123;&quot;_id&quot;: new_member.inserted_id&#125;\n    )\n\n    return created_member\n\n\n@router.get(&quot;/&quot;, response_description=&quot;List all member&quot;, response_model=List[Member])\ndef list_memberships(request: Request):\n    books = list(request.app.database[&quot;member_data&quot;].find(limit=100))\n    return books\n\n\n@router.get(&quot;/&#123;account&#125;&quot;, response_description=&quot;Get member by id&quot;, response_model=Member)\ndef find_member(account: str, request: Request):\n    if (member := request.app.database[&quot;member_data&quot;].find_one(&#123;&quot;account&quot;: account&#125;)) is not None:\n        return member\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with account &#123;account&#125; not found&quot;)\n\n\n@router.patch(&quot;/&#123;account&#125;&quot;, response_description=&quot;Update member info&quot;, response_model=Member)\ndef update_member(account: str, request: Request, member: MemberUpdate = Body(...)):\n    member = &#123;k: v for k, v in member.dict().items() if v is not None&#125;\n\n    if len(member) &gt;= 1:\n        update_result = request.app.database[&quot;member_data&quot;].update_one(\n            &#123;&quot;account&quot;: account&#125;, &#123;&quot;$set&quot;: member&#125;\n        )\n\n        if update_result.modified_count == 0:\n            raise HTTPException(\n                status_code=status.HTTP_404_NOT_FOUND, detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n\n    if (\n        existing_book := request.app.database[&quot;member_data&quot;].find_one(&#123;&quot;account&quot;: account&#125;)\n    ) is not None:\n        return existing_book\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n\n\n@router.delete(&quot;/&#123;account&#125;&quot;, response_description=&quot;Delete account&quot;)\ndef delete_member(account: str, request: Request, response: Response):\n    delete_result = request.app.database[&quot;member_data&quot;].delete_one(\n        &#123;&quot;account&quot;: account&#125;)\n\n    if delete_result.deleted_count == 1:\n        response.status_code = status.HTTP_204_NO_CONTENT\n        return response\n\n    raise HTTPException(status_code=status.HTTP_404_NOT_FOUND,\n                        detail=f&quot;Member with ID &#123;account&#125; not found&quot;)\n</code></pre>\n<p>這邊我用啟動後的畫面比較好懂<br><img src=\"./swagger.jpg\" alt=\"swagger\" style=\"display:block; margin:auto;\"/></p>\n<p>上面可以看到用<br>GET &#x2F;membership&#x2F;:得到DB內的所有資料<br>POST &#x2F;membership&#x2F;:建立會員資料<br>GET &#x2F;membership&#x2F;{account}:{account}內帶入要查詢的帳號<br>DELETE &#x2F;membership&#x2F;{account}:{account}內帶入要刪除的帳號<br>PATCH &#x2F;membership&#x2F;{account}:{account}內帶入要更新的帳號</p>\n<p>至於啟動的部分會用到uvicorn來跑這隻程式，在終端機輸入</p>\n<pre><code>python -m uvicorn main:app --reload\n</code></pre>\n<p>跑起來會出現</p>\n<pre><code>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [9560] using watchgod\nINFO:     Started server process [9244]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre>\n<p>之後再瀏覽器輸入<a href=\"http://127.0.0.1:8000/docs\">http://127.0.0.1:8000/docs</a> 就會進入剛才的swagger UI了，便可以開始做測試</p>\n<p>不想開啟也可以用curl指令進行測試，不過這邊不贅述。</p>\n<h1 id=\"網頁前端\"><a href=\"#網頁前端\" class=\"headerlink\" title=\"網頁前端\"></a>網頁前端</h1><img src=\"./signup.jpg\"  alt=\"註冊畫面\" />\n\n<pre><code>&lt;script&gt;\n\n      $(document).ready(function () &#123;\n         $(&#39;#formId&#39;).submit(function (event) &#123;\n            // 防止提交默認\n            event.preventDefault();\n\n            // 獲取表單數據\n            var account = $(&#39;#account&#39;).val();\n            var password = $(&#39;#password&#39;).val();\n            var name = $(&#39;#name&#39;).val();\n            var contactNumber = $(&#39;#phone&#39;).val();\n\n            // POST Requests with JSON\n            $.ajax(&#123;\n               url: &#39;http://127.0.0.1:8000/membership/&#39;,\n               type: &#39;POST&#39;,\n               contentType: &#39;application/json&#39;,\n               data: JSON.stringify(&#123;\n                  account: account,\n                  password: password,\n                  name: name,\n                  phone: contactNumber\n               &#125;),\n\n               success: function (response) &#123;\n                  console.log(response);\n               &#125;,\n               error: function (xhr, status, error) &#123;\n                  console.error(error);\n               &#125;\n            &#125;);\n         &#125;);\n      &#125;);\n\n   &lt;/script&gt;\n\n   &lt;form class=&quot;transfot&quot; id=&#39;formId&#39;&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;span&gt;Sign up&lt;/span&gt;\n        &lt;h3&gt;Let start!&lt;/h3&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;account&quot; placeholder=&quot;Account&quot; type=&quot;text&quot;\n            name=&quot;Account&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;password&quot; placeholder=&quot;Password&quot; type=&quot;text&quot;\n            name=&quot;Password&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;name&quot; placeholder=&quot;Name&quot; type=&quot;text&quot; name=&quot;Name&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;input class=&quot;col-md-12&quot; id=&quot;phone&quot; placeholder=&quot;Contact Number&quot; type=&quot;text&quot;\n            name=&quot;Contact Number&quot;&gt;\n        &lt;/div&gt;\n        &lt;div class=&quot;col-md-12&quot;&gt;\n        &lt;button type=&#39;submit&#39; id=&#39;submitButton&#39;&gt;Sign up&lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n</code></pre>\n<p>AJAX程式碼大致是這樣</p>\n<br/>\n<img src=\"./ajaxpost.jpg\"  alt=\"postdata\" />\n填好資料後送出\n<br/>\n<img src=\"./console.jpg\" alt=\"postsuccess\" />\n<br/>\n\n<p>可以看到console回傳JSON格式，且FAST API的terminal顯示POST Created<br>之後再進到Swagger用GET memberlist驗證</p>\n<br/>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./get1.jpg\" alt=\"before\" style=\"display:block; margin:auto;\" />\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./get2.jpg\" alt=\"after\" style=\"display:block; margin:auto;\"width=\"50%\"/>\n</div>\n<br/>\n\n<p>左邊是傳送前只有一筆資料，右邊可以看到剛剛POST進來的第二筆。</p>\n<p>簡單的前後端連接就完成啦!</p>\n<h1 id=\"Ref\"><a href=\"#Ref\" class=\"headerlink\" title=\"Ref\"></a>Ref</h1><ul>\n<li><a href=\"https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster\">https://www.mongodb.com/docs/atlas/tutorial/connect-to-your-cluster/?_ga=2.105960192.2035563352.1678696693-1842266058.1678696693#connect-to-your-atlas-cluster</a></li>\n<li><a href=\"https://www.mongodb.com/languages/python/pymongo-tutorial\">https://www.mongodb.com/languages/python/pymongo-tutorial</a></li>\n<li><a href=\"https://www.mongodb.com/docs/drivers/pymongo/\">https://www.mongodb.com/docs/drivers/pymongo/</a></li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1949684\">https://cloud.tencent.com/developer/article/1949684</a></li>\n<li><a href=\"https://chat.openai.com/chat\">https://chat.openai.com/chat</a></li>\n</ul>"},{"title":"[會員系統] 使用Flask建置會員系統路由，並串接API連接資料庫 ","date":"2023-04-07T05:50:29.000Z","_content":"\n這篇文章算是前一篇FAST API的延伸，上次只有串一個很簡略的html前端頁面，而這次比較認真的做了一系列的網頁串接每個API，\n主要路由會有 \"/index\", \"/login\", \"/register\", \"/memberlist\"，分別是首頁、登入、註冊跟會員清單，\n其中除了登入及註冊頁面外，都需要用相對應的身分才能進入，像是 \"/memberlist\"就需要管理員身分才能進入，\n否則便會返回登入頁面要求登入。\n<!--more-->\n這次主要會分成兩個區塊，啟動時會需要開flask跟fastapi的server，flask負責整個網頁你看的到的架構，包含裡面包的html,js,css等等，\n再透過串接fastapi獲取資料後渲染到前端，這次登入方法是採用session的方式，之後會再使用JWT的方式進行登入的驗證。\n至於網頁html,CSS等等這邊不會做講解，這次全部都是使用Bootstrap建置的，有興趣的人可以參考參考。\n\n---\n# 程式架構\n\n<img src=\"./程式架構.jpg\"  alt=\"程式架構\" />\n\napp.py 是啟動網頁的主程式，裡面包含了每個網頁的路由跟資料庫的連接。\ntemplates 裡面則是放了每個路由所需要使用到的html頁面。\nmembership 是此次專案的虛擬環境可以不用裡他。\n剩下的資料夾就都是存放網站資源的地方，像是CSS,js腳本。\n\n\n---\n\n# 註冊\n\n我會依照一般使用者的登入邏輯先run過一次後面再附上程式碼，\n\"http://127.0.0.1:5000/register\":\n\n<img src=\"./register.jpg\"  alt=\"註冊頁面\" />\n\n這個頁面會串接上一篇文章製作的api將資料寫入到DB，註冊完成後上面會跳出'Register success!'並轉跳至\"/login\"登入頁面\n以下附上串接api的js\n```\n$(document).ready(function () {\n  $('#registerform').submit(function (event) {\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $('#Username').val();\n    var password = $('#Password').val();\n    var name = $('#Name').val();\n    var contactNumber = $('#Phone').val();\n\n    // POST Requests with JSON\n    $.ajax({\n      url: 'http://127.0.0.1:8000/membership/',\n      type: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      }),\n\n      success: function (response) {\n        console.log(response);\n        alert('Register success!');\n        // 跳轉到/signin\n        window.location.href = \"/login\";\n      },\n      error: function (xhr, status, error) {\n        if (xhr.status === 400) {\n          alert('Account already exist');\n        }\n        console.error(error);\n        // 清空欄位\n        $('#Username').val('');\n        $('#Password').val('');\n        $('#Name').val('');\n        $('#Phone').val('');\n      }\n    });\n  });\n});\n```\n\n---\n# 登入\n\n\"http://127.0.0.1:5000/login\":\n\n<img src=\"./signin.jpg\"  alt=\"signin\" />\n\n後台會串連接DB進行驗證，若會員存在就會發出一個session給瀏覽器，瀏覽器便會帶著發出的帳號轉跳至 \"http://127.0.0.1:5000/index\"\n或者管理員身分會轉跳至\"http://127.0.0.1:5000/memberlist\"\n\n```\n@application.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        account = request.form.get(\"Username\")\n        password = request.form.get(\"Password\")\n\n        if (account == admin[\"account\"] and password == admin[\"password\"]):\n            response = make_response(redirect(url_for(\"memberlist\")))\n            session['username'] = admin[\"account\"]\n            return response\n\n        db = client.membership\n        collection = db.member_data\n        member = collection.find_one(\n            {\"account\": account, \"password\": password})\n        if member:\n            response = make_response(redirect(url_for(\"index\")))\n            session['username'] = account\n            return response\n        else:\n            # 失敗跳出錯誤訊息\n            error_msg = (\"Invalid account or password\")\n            return render_template(\"login.html\", error_msg=error_msg)\n    else:\n        # GET\n        return render_template(\"login.html\")\n```\n\n並且在\"/index\"右上會顯示現在的使用者帳號(因為剛剛session中賦予了後端使用者訊息)，按下右上的\"Sign Out\"會刪除session並導回\"/login\"。\n<img src=\"./index.jpg\"  alt=\"index\" />\n\n以下是\"Sign Out\"後端連接的路由\n```\n@application.route(\"/logout\")\ndef logout():\n    session.clear()  # 清除 session\n    return redirect(url_for('login'))\n```\n清除session後就必須重新登入\n\n---\n# 會員清單\n\n這邊因為我只設定一組管理員帳號所以就直接將管理員放在flask的檔案中，較好的做法是在DB中建立一個管理員資料庫，\n登入頁面只要使用管理員帳號登入，路由會直接導到 \"http://127.0.0.1:5000/memberlist\" 而不是 \"/index\"，\n<img src=\"./memberlist.jpg\"  alt=\"memberlist\" />\n\n在管理者頁面中右上角的\"Refresh Data\"背後串接了取的DB的api，每次按一次便會刷新頁面重新取得會員資料，\n這邊比較麻煩的是在更新資料時，必須要寫一段javascript來更新畫面，一開始開發顯示會員資料時是一頁到底，後來為了避免資料過於龐大所以便想要最多顯示10筆資料，並且新增換頁的按鍵。\n後來靠chatGPT幫忙，並且告著自己做些調整，沒有前端經驗的我也能成功寫出想要的畫面!\n\"Create Account\"則會直接將路由導引至 \"http://127.0.0.1:5000/register\" 創建帳號，\n\"Delete Account\"可以直接刪除選取的帳號，背後是直接串接DELETE的api\n\"Sign Out\"跟一般會員頁面一樣，會刪除session。\n\n這邊js稍微比較多，內容是每個按鍵所串接的api\n```\n$(document).ready(function () {\n  $('#registerform').submit(function (event) {\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $('#Username').val();\n    var password = $('#Password').val();\n    var name = $('#Name').val();\n    var contactNumber = $('#Phone').val();\n\n    // POST Requests with JSON\n    $.ajax({\n      url: 'http://127.0.0.1:8000/membership/',\n      type: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      }),\n\n      success: function (response) {\n        console.log(response);\n        alert('Register success!');\n        // 跳轉到/signin\n        window.location.href = \"/login\";\n      },\n      error: function (xhr, status, error) {\n        if (xhr.status === 400) {\n          alert('Account already exist');\n        }\n        console.error(error);\n        // 清空欄位\n        $('#Username').val('');\n        $('#Password').val('');\n        $('#Name').val('');\n        $('#Phone').val('');\n      }\n    });\n  });\n});\n\n\n```\n---\n# 驗證問題\n\n這時候就會想到如果使用者直接輸入網址是不是可以繞過登入的步驟進到會員頁面，\n所以這邊在\"/index\",\"/memberlist\"都有設置session的驗證，若使用者直接輸入網址且沒有帶上session便會被導回\"/login\"，且跳出\"請先登入\"，\n若是一般帳號登入後想直接進入\"/memberlist\"頁面，則會跳出\"你並非管理員\"，並導回\"/index\"\n\n<img src=\"./plzsignin.jpg\"  alt=\"plzsignin\" />\n\n\n```\n@application.route(\"/index\")\ndef index():\n    if 'username' not in session:\n        flash(\"請先登入\")\n        return redirect(url_for('login'))\n    return render_template(\"index.html\")\n```\n\n<img src=\"./memberlistSign.jpg\"  alt=\"要求先用管理員身分\" />\n<img src=\"./notadmin.jpg\"  alt=\"非管理員身分\" />\n\n\n```\n@application.route(\"/memberlist\")\ndef memberlist():\n    if 'username' not in session:\n        flash(\"請先登入\")\n        return redirect(url_for('login'))\n    elif session['username'] != admin['account']:\n        flash(\"你並非管理員\")\n        return redirect(url_for('index'))\n    # 查詢所有會員頁面\n    return render_template(\"memberlist.html\")\n\n```\n\n---\n\n最後附上GitHub連結:https://github.com/AnselCh/Flask_MemberSystem\n\n\n","source":"_posts/membersys.md","raw":"---\ntitle: \"[會員系統] 使用Flask建置會員系統路由，並串接API連接資料庫 \"\ncategories:\n  - tutorial\ndate: 2023-04-07 13:50:29\ntags: [Python,Fastapi,RESTful API,Flask,AJAX,JavaScript,MongoDB,Atlas]\n---\n\n這篇文章算是前一篇FAST API的延伸，上次只有串一個很簡略的html前端頁面，而這次比較認真的做了一系列的網頁串接每個API，\n主要路由會有 \"/index\", \"/login\", \"/register\", \"/memberlist\"，分別是首頁、登入、註冊跟會員清單，\n其中除了登入及註冊頁面外，都需要用相對應的身分才能進入，像是 \"/memberlist\"就需要管理員身分才能進入，\n否則便會返回登入頁面要求登入。\n<!--more-->\n這次主要會分成兩個區塊，啟動時會需要開flask跟fastapi的server，flask負責整個網頁你看的到的架構，包含裡面包的html,js,css等等，\n再透過串接fastapi獲取資料後渲染到前端，這次登入方法是採用session的方式，之後會再使用JWT的方式進行登入的驗證。\n至於網頁html,CSS等等這邊不會做講解，這次全部都是使用Bootstrap建置的，有興趣的人可以參考參考。\n\n---\n# 程式架構\n\n<img src=\"./程式架構.jpg\"  alt=\"程式架構\" />\n\napp.py 是啟動網頁的主程式，裡面包含了每個網頁的路由跟資料庫的連接。\ntemplates 裡面則是放了每個路由所需要使用到的html頁面。\nmembership 是此次專案的虛擬環境可以不用裡他。\n剩下的資料夾就都是存放網站資源的地方，像是CSS,js腳本。\n\n\n---\n\n# 註冊\n\n我會依照一般使用者的登入邏輯先run過一次後面再附上程式碼，\n\"http://127.0.0.1:5000/register\":\n\n<img src=\"./register.jpg\"  alt=\"註冊頁面\" />\n\n這個頁面會串接上一篇文章製作的api將資料寫入到DB，註冊完成後上面會跳出'Register success!'並轉跳至\"/login\"登入頁面\n以下附上串接api的js\n```\n$(document).ready(function () {\n  $('#registerform').submit(function (event) {\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $('#Username').val();\n    var password = $('#Password').val();\n    var name = $('#Name').val();\n    var contactNumber = $('#Phone').val();\n\n    // POST Requests with JSON\n    $.ajax({\n      url: 'http://127.0.0.1:8000/membership/',\n      type: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      }),\n\n      success: function (response) {\n        console.log(response);\n        alert('Register success!');\n        // 跳轉到/signin\n        window.location.href = \"/login\";\n      },\n      error: function (xhr, status, error) {\n        if (xhr.status === 400) {\n          alert('Account already exist');\n        }\n        console.error(error);\n        // 清空欄位\n        $('#Username').val('');\n        $('#Password').val('');\n        $('#Name').val('');\n        $('#Phone').val('');\n      }\n    });\n  });\n});\n```\n\n---\n# 登入\n\n\"http://127.0.0.1:5000/login\":\n\n<img src=\"./signin.jpg\"  alt=\"signin\" />\n\n後台會串連接DB進行驗證，若會員存在就會發出一個session給瀏覽器，瀏覽器便會帶著發出的帳號轉跳至 \"http://127.0.0.1:5000/index\"\n或者管理員身分會轉跳至\"http://127.0.0.1:5000/memberlist\"\n\n```\n@application.route(\"/login\", methods=[\"GET\", \"POST\"])\ndef login():\n    if request.method == \"POST\":\n        account = request.form.get(\"Username\")\n        password = request.form.get(\"Password\")\n\n        if (account == admin[\"account\"] and password == admin[\"password\"]):\n            response = make_response(redirect(url_for(\"memberlist\")))\n            session['username'] = admin[\"account\"]\n            return response\n\n        db = client.membership\n        collection = db.member_data\n        member = collection.find_one(\n            {\"account\": account, \"password\": password})\n        if member:\n            response = make_response(redirect(url_for(\"index\")))\n            session['username'] = account\n            return response\n        else:\n            # 失敗跳出錯誤訊息\n            error_msg = (\"Invalid account or password\")\n            return render_template(\"login.html\", error_msg=error_msg)\n    else:\n        # GET\n        return render_template(\"login.html\")\n```\n\n並且在\"/index\"右上會顯示現在的使用者帳號(因為剛剛session中賦予了後端使用者訊息)，按下右上的\"Sign Out\"會刪除session並導回\"/login\"。\n<img src=\"./index.jpg\"  alt=\"index\" />\n\n以下是\"Sign Out\"後端連接的路由\n```\n@application.route(\"/logout\")\ndef logout():\n    session.clear()  # 清除 session\n    return redirect(url_for('login'))\n```\n清除session後就必須重新登入\n\n---\n# 會員清單\n\n這邊因為我只設定一組管理員帳號所以就直接將管理員放在flask的檔案中，較好的做法是在DB中建立一個管理員資料庫，\n登入頁面只要使用管理員帳號登入，路由會直接導到 \"http://127.0.0.1:5000/memberlist\" 而不是 \"/index\"，\n<img src=\"./memberlist.jpg\"  alt=\"memberlist\" />\n\n在管理者頁面中右上角的\"Refresh Data\"背後串接了取的DB的api，每次按一次便會刷新頁面重新取得會員資料，\n這邊比較麻煩的是在更新資料時，必須要寫一段javascript來更新畫面，一開始開發顯示會員資料時是一頁到底，後來為了避免資料過於龐大所以便想要最多顯示10筆資料，並且新增換頁的按鍵。\n後來靠chatGPT幫忙，並且告著自己做些調整，沒有前端經驗的我也能成功寫出想要的畫面!\n\"Create Account\"則會直接將路由導引至 \"http://127.0.0.1:5000/register\" 創建帳號，\n\"Delete Account\"可以直接刪除選取的帳號，背後是直接串接DELETE的api\n\"Sign Out\"跟一般會員頁面一樣，會刪除session。\n\n這邊js稍微比較多，內容是每個按鍵所串接的api\n```\n$(document).ready(function () {\n  $('#registerform').submit(function (event) {\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $('#Username').val();\n    var password = $('#Password').val();\n    var name = $('#Name').val();\n    var contactNumber = $('#Phone').val();\n\n    // POST Requests with JSON\n    $.ajax({\n      url: 'http://127.0.0.1:8000/membership/',\n      type: 'POST',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      }),\n\n      success: function (response) {\n        console.log(response);\n        alert('Register success!');\n        // 跳轉到/signin\n        window.location.href = \"/login\";\n      },\n      error: function (xhr, status, error) {\n        if (xhr.status === 400) {\n          alert('Account already exist');\n        }\n        console.error(error);\n        // 清空欄位\n        $('#Username').val('');\n        $('#Password').val('');\n        $('#Name').val('');\n        $('#Phone').val('');\n      }\n    });\n  });\n});\n\n\n```\n---\n# 驗證問題\n\n這時候就會想到如果使用者直接輸入網址是不是可以繞過登入的步驟進到會員頁面，\n所以這邊在\"/index\",\"/memberlist\"都有設置session的驗證，若使用者直接輸入網址且沒有帶上session便會被導回\"/login\"，且跳出\"請先登入\"，\n若是一般帳號登入後想直接進入\"/memberlist\"頁面，則會跳出\"你並非管理員\"，並導回\"/index\"\n\n<img src=\"./plzsignin.jpg\"  alt=\"plzsignin\" />\n\n\n```\n@application.route(\"/index\")\ndef index():\n    if 'username' not in session:\n        flash(\"請先登入\")\n        return redirect(url_for('login'))\n    return render_template(\"index.html\")\n```\n\n<img src=\"./memberlistSign.jpg\"  alt=\"要求先用管理員身分\" />\n<img src=\"./notadmin.jpg\"  alt=\"非管理員身分\" />\n\n\n```\n@application.route(\"/memberlist\")\ndef memberlist():\n    if 'username' not in session:\n        flash(\"請先登入\")\n        return redirect(url_for('login'))\n    elif session['username'] != admin['account']:\n        flash(\"你並非管理員\")\n        return redirect(url_for('index'))\n    # 查詢所有會員頁面\n    return render_template(\"memberlist.html\")\n\n```\n\n---\n\n最後附上GitHub連結:https://github.com/AnselCh/Flask_MemberSystem\n\n\n","slug":"membersys","published":1,"updated":"2023-05-12T13:49:08.364Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqe000guxrhfc2p3u39","content":"<p>這篇文章算是前一篇FAST API的延伸，上次只有串一個很簡略的html前端頁面，而這次比較認真的做了一系列的網頁串接每個API，<br>主要路由會有 “&#x2F;index”, “&#x2F;login”, “&#x2F;register”, “&#x2F;memberlist”，分別是首頁、登入、註冊跟會員清單，<br>其中除了登入及註冊頁面外，都需要用相對應的身分才能進入，像是 “&#x2F;memberlist”就需要管理員身分才能進入，<br>否則便會返回登入頁面要求登入。</p>\n<span id=\"more\"></span>\n<p>這次主要會分成兩個區塊，啟動時會需要開flask跟fastapi的server，flask負責整個網頁你看的到的架構，包含裡面包的html,js,css等等，<br>再透過串接fastapi獲取資料後渲染到前端，這次登入方法是採用session的方式，之後會再使用JWT的方式進行登入的驗證。<br>至於網頁html,CSS等等這邊不會做講解，這次全部都是使用Bootstrap建置的，有興趣的人可以參考參考。</p>\n<hr>\n<h1 id=\"程式架構\"><a href=\"#程式架構\" class=\"headerlink\" title=\"程式架構\"></a>程式架構</h1><img src=\"./程式架構.jpg\"  alt=\"程式架構\" />\n\n<p>app.py 是啟動網頁的主程式，裡面包含了每個網頁的路由跟資料庫的連接。<br>templates 裡面則是放了每個路由所需要使用到的html頁面。<br>membership 是此次專案的虛擬環境可以不用裡他。<br>剩下的資料夾就都是存放網站資源的地方，像是CSS,js腳本。</p>\n<hr>\n<h1 id=\"註冊\"><a href=\"#註冊\" class=\"headerlink\" title=\"註冊\"></a>註冊</h1><p>我會依照一般使用者的登入邏輯先run過一次後面再附上程式碼，<br>“<a href=\"http://127.0.0.1:5000/register\">http://127.0.0.1:5000/register</a>“:</p>\n<img src=\"./register.jpg\"  alt=\"註冊頁面\" />\n\n<p>這個頁面會串接上一篇文章製作的api將資料寫入到DB，註冊完成後上面會跳出’Register success!’並轉跳至”&#x2F;login”登入頁面<br>以下附上串接api的js</p>\n<pre><code>$(document).ready(function () &#123;\n  $(&#39;#registerform&#39;).submit(function (event) &#123;\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $(&#39;#Username&#39;).val();\n    var password = $(&#39;#Password&#39;).val();\n    var name = $(&#39;#Name&#39;).val();\n    var contactNumber = $(&#39;#Phone&#39;).val();\n\n    // POST Requests with JSON\n    $.ajax(&#123;\n      url: &#39;http://127.0.0.1:8000/membership/&#39;,\n      type: &#39;POST&#39;,\n      contentType: &#39;application/json&#39;,\n      data: JSON.stringify(&#123;\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      &#125;),\n\n      success: function (response) &#123;\n        console.log(response);\n        alert(&#39;Register success!&#39;);\n        // 跳轉到/signin\n        window.location.href = &quot;/login&quot;;\n      &#125;,\n      error: function (xhr, status, error) &#123;\n        if (xhr.status === 400) &#123;\n          alert(&#39;Account already exist&#39;);\n        &#125;\n        console.error(error);\n        // 清空欄位\n        $(&#39;#Username&#39;).val(&#39;&#39;);\n        $(&#39;#Password&#39;).val(&#39;&#39;);\n        $(&#39;#Name&#39;).val(&#39;&#39;);\n        $(&#39;#Phone&#39;).val(&#39;&#39;);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;);\n</code></pre>\n<hr>\n<h1 id=\"登入\"><a href=\"#登入\" class=\"headerlink\" title=\"登入\"></a>登入</h1><p>“<a href=\"http://127.0.0.1:5000/login\">http://127.0.0.1:5000/login</a>“:</p>\n<img src=\"./signin.jpg\"  alt=\"signin\" />\n\n<p>後台會串連接DB進行驗證，若會員存在就會發出一個session給瀏覽器，瀏覽器便會帶著發出的帳號轉跳至 “<a href=\"http://127.0.0.1:5000/index\">http://127.0.0.1:5000/index</a>“<br>或者管理員身分會轉跳至”<a href=\"http://127.0.0.1:5000/memberlist\">http://127.0.0.1:5000/memberlist</a>“</p>\n<pre><code>@application.route(&quot;/login&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])\ndef login():\n    if request.method == &quot;POST&quot;:\n        account = request.form.get(&quot;Username&quot;)\n        password = request.form.get(&quot;Password&quot;)\n\n        if (account == admin[&quot;account&quot;] and password == admin[&quot;password&quot;]):\n            response = make_response(redirect(url_for(&quot;memberlist&quot;)))\n            session[&#39;username&#39;] = admin[&quot;account&quot;]\n            return response\n\n        db = client.membership\n        collection = db.member_data\n        member = collection.find_one(\n            &#123;&quot;account&quot;: account, &quot;password&quot;: password&#125;)\n        if member:\n            response = make_response(redirect(url_for(&quot;index&quot;)))\n            session[&#39;username&#39;] = account\n            return response\n        else:\n            # 失敗跳出錯誤訊息\n            error_msg = (&quot;Invalid account or password&quot;)\n            return render_template(&quot;login.html&quot;, error_msg=error_msg)\n    else:\n        # GET\n        return render_template(&quot;login.html&quot;)\n</code></pre>\n<p>並且在”&#x2F;index”右上會顯示現在的使用者帳號(因為剛剛session中賦予了後端使用者訊息)，按下右上的”Sign Out”會刪除session並導回”&#x2F;login”。<br><img src=\"./index.jpg\"  alt=\"index\" /></p>\n<p>以下是”Sign Out”後端連接的路由</p>\n<pre><code>@application.route(&quot;/logout&quot;)\ndef logout():\n    session.clear()  # 清除 session\n    return redirect(url_for(&#39;login&#39;))\n</code></pre>\n<p>清除session後就必須重新登入</p>\n<hr>\n<h1 id=\"會員清單\"><a href=\"#會員清單\" class=\"headerlink\" title=\"會員清單\"></a>會員清單</h1><p>這邊因為我只設定一組管理員帳號所以就直接將管理員放在flask的檔案中，較好的做法是在DB中建立一個管理員資料庫，<br>登入頁面只要使用管理員帳號登入，路由會直接導到 “<a href=\"http://127.0.0.1:5000/memberlist\">http://127.0.0.1:5000/memberlist</a>“ 而不是 “&#x2F;index”，<br><img src=\"./memberlist.jpg\"  alt=\"memberlist\" /></p>\n<p>在管理者頁面中右上角的”Refresh Data”背後串接了取的DB的api，每次按一次便會刷新頁面重新取得會員資料，<br>這邊比較麻煩的是在更新資料時，必須要寫一段javascript來更新畫面，一開始開發顯示會員資料時是一頁到底，後來為了避免資料過於龐大所以便想要最多顯示10筆資料，並且新增換頁的按鍵。<br>後來靠chatGPT幫忙，並且告著自己做些調整，沒有前端經驗的我也能成功寫出想要的畫面!<br>“Create Account”則會直接將路由導引至 “<a href=\"http://127.0.0.1:5000/register\">http://127.0.0.1:5000/register</a>“ 創建帳號，<br>“Delete Account”可以直接刪除選取的帳號，背後是直接串接DELETE的api<br>“Sign Out”跟一般會員頁面一樣，會刪除session。</p>\n<p>這邊js稍微比較多，內容是每個按鍵所串接的api</p>\n<pre><code>$(document).ready(function () &#123;\n  $(&#39;#registerform&#39;).submit(function (event) &#123;\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $(&#39;#Username&#39;).val();\n    var password = $(&#39;#Password&#39;).val();\n    var name = $(&#39;#Name&#39;).val();\n    var contactNumber = $(&#39;#Phone&#39;).val();\n\n    // POST Requests with JSON\n    $.ajax(&#123;\n      url: &#39;http://127.0.0.1:8000/membership/&#39;,\n      type: &#39;POST&#39;,\n      contentType: &#39;application/json&#39;,\n      data: JSON.stringify(&#123;\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      &#125;),\n\n      success: function (response) &#123;\n        console.log(response);\n        alert(&#39;Register success!&#39;);\n        // 跳轉到/signin\n        window.location.href = &quot;/login&quot;;\n      &#125;,\n      error: function (xhr, status, error) &#123;\n        if (xhr.status === 400) &#123;\n          alert(&#39;Account already exist&#39;);\n        &#125;\n        console.error(error);\n        // 清空欄位\n        $(&#39;#Username&#39;).val(&#39;&#39;);\n        $(&#39;#Password&#39;).val(&#39;&#39;);\n        $(&#39;#Name&#39;).val(&#39;&#39;);\n        $(&#39;#Phone&#39;).val(&#39;&#39;);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;);\n\n</code></pre>\n<hr>\n<h1 id=\"驗證問題\"><a href=\"#驗證問題\" class=\"headerlink\" title=\"驗證問題\"></a>驗證問題</h1><p>這時候就會想到如果使用者直接輸入網址是不是可以繞過登入的步驟進到會員頁面，<br>所以這邊在”&#x2F;index”,”&#x2F;memberlist”都有設置session的驗證，若使用者直接輸入網址且沒有帶上session便會被導回”&#x2F;login”，且跳出”請先登入”，<br>若是一般帳號登入後想直接進入”&#x2F;memberlist”頁面，則會跳出”你並非管理員”，並導回”&#x2F;index”</p>\n<img src=\"./plzsignin.jpg\"  alt=\"plzsignin\" />\n\n\n<pre><code>@application.route(&quot;/index&quot;)\ndef index():\n    if &#39;username&#39; not in session:\n        flash(&quot;請先登入&quot;)\n        return redirect(url_for(&#39;login&#39;))\n    return render_template(&quot;index.html&quot;)\n</code></pre>\n<img src=\"./memberlistSign.jpg\"  alt=\"要求先用管理員身分\" />\n<img src=\"./notadmin.jpg\"  alt=\"非管理員身分\" />\n\n\n<pre><code>@application.route(&quot;/memberlist&quot;)\ndef memberlist():\n    if &#39;username&#39; not in session:\n        flash(&quot;請先登入&quot;)\n        return redirect(url_for(&#39;login&#39;))\n    elif session[&#39;username&#39;] != admin[&#39;account&#39;]:\n        flash(&quot;你並非管理員&quot;)\n        return redirect(url_for(&#39;index&#39;))\n    # 查詢所有會員頁面\n    return render_template(&quot;memberlist.html&quot;)\n</code></pre>\n<hr>\n<p>最後附上GitHub連結:<a href=\"https://github.com/AnselCh/Flask_MemberSystem\">https://github.com/AnselCh/Flask_MemberSystem</a></p>\n","site":{"data":{}},"excerpt":"<p>這篇文章算是前一篇FAST API的延伸，上次只有串一個很簡略的html前端頁面，而這次比較認真的做了一系列的網頁串接每個API，<br>主要路由會有 “&#x2F;index”, “&#x2F;login”, “&#x2F;register”, “&#x2F;memberlist”，分別是首頁、登入、註冊跟會員清單，<br>其中除了登入及註冊頁面外，都需要用相對應的身分才能進入，像是 “&#x2F;memberlist”就需要管理員身分才能進入，<br>否則便會返回登入頁面要求登入。</p>","more":"<p>這次主要會分成兩個區塊，啟動時會需要開flask跟fastapi的server，flask負責整個網頁你看的到的架構，包含裡面包的html,js,css等等，<br>再透過串接fastapi獲取資料後渲染到前端，這次登入方法是採用session的方式，之後會再使用JWT的方式進行登入的驗證。<br>至於網頁html,CSS等等這邊不會做講解，這次全部都是使用Bootstrap建置的，有興趣的人可以參考參考。</p>\n<hr>\n<h1 id=\"程式架構\"><a href=\"#程式架構\" class=\"headerlink\" title=\"程式架構\"></a>程式架構</h1><img src=\"./程式架構.jpg\"  alt=\"程式架構\" />\n\n<p>app.py 是啟動網頁的主程式，裡面包含了每個網頁的路由跟資料庫的連接。<br>templates 裡面則是放了每個路由所需要使用到的html頁面。<br>membership 是此次專案的虛擬環境可以不用裡他。<br>剩下的資料夾就都是存放網站資源的地方，像是CSS,js腳本。</p>\n<hr>\n<h1 id=\"註冊\"><a href=\"#註冊\" class=\"headerlink\" title=\"註冊\"></a>註冊</h1><p>我會依照一般使用者的登入邏輯先run過一次後面再附上程式碼，<br>“<a href=\"http://127.0.0.1:5000/register\">http://127.0.0.1:5000/register</a>“:</p>\n<img src=\"./register.jpg\"  alt=\"註冊頁面\" />\n\n<p>這個頁面會串接上一篇文章製作的api將資料寫入到DB，註冊完成後上面會跳出’Register success!’並轉跳至”&#x2F;login”登入頁面<br>以下附上串接api的js</p>\n<pre><code>$(document).ready(function () &#123;\n  $(&#39;#registerform&#39;).submit(function (event) &#123;\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $(&#39;#Username&#39;).val();\n    var password = $(&#39;#Password&#39;).val();\n    var name = $(&#39;#Name&#39;).val();\n    var contactNumber = $(&#39;#Phone&#39;).val();\n\n    // POST Requests with JSON\n    $.ajax(&#123;\n      url: &#39;http://127.0.0.1:8000/membership/&#39;,\n      type: &#39;POST&#39;,\n      contentType: &#39;application/json&#39;,\n      data: JSON.stringify(&#123;\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      &#125;),\n\n      success: function (response) &#123;\n        console.log(response);\n        alert(&#39;Register success!&#39;);\n        // 跳轉到/signin\n        window.location.href = &quot;/login&quot;;\n      &#125;,\n      error: function (xhr, status, error) &#123;\n        if (xhr.status === 400) &#123;\n          alert(&#39;Account already exist&#39;);\n        &#125;\n        console.error(error);\n        // 清空欄位\n        $(&#39;#Username&#39;).val(&#39;&#39;);\n        $(&#39;#Password&#39;).val(&#39;&#39;);\n        $(&#39;#Name&#39;).val(&#39;&#39;);\n        $(&#39;#Phone&#39;).val(&#39;&#39;);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;);\n</code></pre>\n<hr>\n<h1 id=\"登入\"><a href=\"#登入\" class=\"headerlink\" title=\"登入\"></a>登入</h1><p>“<a href=\"http://127.0.0.1:5000/login\">http://127.0.0.1:5000/login</a>“:</p>\n<img src=\"./signin.jpg\"  alt=\"signin\" />\n\n<p>後台會串連接DB進行驗證，若會員存在就會發出一個session給瀏覽器，瀏覽器便會帶著發出的帳號轉跳至 “<a href=\"http://127.0.0.1:5000/index\">http://127.0.0.1:5000/index</a>“<br>或者管理員身分會轉跳至”<a href=\"http://127.0.0.1:5000/memberlist\">http://127.0.0.1:5000/memberlist</a>“</p>\n<pre><code>@application.route(&quot;/login&quot;, methods=[&quot;GET&quot;, &quot;POST&quot;])\ndef login():\n    if request.method == &quot;POST&quot;:\n        account = request.form.get(&quot;Username&quot;)\n        password = request.form.get(&quot;Password&quot;)\n\n        if (account == admin[&quot;account&quot;] and password == admin[&quot;password&quot;]):\n            response = make_response(redirect(url_for(&quot;memberlist&quot;)))\n            session[&#39;username&#39;] = admin[&quot;account&quot;]\n            return response\n\n        db = client.membership\n        collection = db.member_data\n        member = collection.find_one(\n            &#123;&quot;account&quot;: account, &quot;password&quot;: password&#125;)\n        if member:\n            response = make_response(redirect(url_for(&quot;index&quot;)))\n            session[&#39;username&#39;] = account\n            return response\n        else:\n            # 失敗跳出錯誤訊息\n            error_msg = (&quot;Invalid account or password&quot;)\n            return render_template(&quot;login.html&quot;, error_msg=error_msg)\n    else:\n        # GET\n        return render_template(&quot;login.html&quot;)\n</code></pre>\n<p>並且在”&#x2F;index”右上會顯示現在的使用者帳號(因為剛剛session中賦予了後端使用者訊息)，按下右上的”Sign Out”會刪除session並導回”&#x2F;login”。<br><img src=\"./index.jpg\"  alt=\"index\" /></p>\n<p>以下是”Sign Out”後端連接的路由</p>\n<pre><code>@application.route(&quot;/logout&quot;)\ndef logout():\n    session.clear()  # 清除 session\n    return redirect(url_for(&#39;login&#39;))\n</code></pre>\n<p>清除session後就必須重新登入</p>\n<hr>\n<h1 id=\"會員清單\"><a href=\"#會員清單\" class=\"headerlink\" title=\"會員清單\"></a>會員清單</h1><p>這邊因為我只設定一組管理員帳號所以就直接將管理員放在flask的檔案中，較好的做法是在DB中建立一個管理員資料庫，<br>登入頁面只要使用管理員帳號登入，路由會直接導到 “<a href=\"http://127.0.0.1:5000/memberlist\">http://127.0.0.1:5000/memberlist</a>“ 而不是 “&#x2F;index”，<br><img src=\"./memberlist.jpg\"  alt=\"memberlist\" /></p>\n<p>在管理者頁面中右上角的”Refresh Data”背後串接了取的DB的api，每次按一次便會刷新頁面重新取得會員資料，<br>這邊比較麻煩的是在更新資料時，必須要寫一段javascript來更新畫面，一開始開發顯示會員資料時是一頁到底，後來為了避免資料過於龐大所以便想要最多顯示10筆資料，並且新增換頁的按鍵。<br>後來靠chatGPT幫忙，並且告著自己做些調整，沒有前端經驗的我也能成功寫出想要的畫面!<br>“Create Account”則會直接將路由導引至 “<a href=\"http://127.0.0.1:5000/register\">http://127.0.0.1:5000/register</a>“ 創建帳號，<br>“Delete Account”可以直接刪除選取的帳號，背後是直接串接DELETE的api<br>“Sign Out”跟一般會員頁面一樣，會刪除session。</p>\n<p>這邊js稍微比較多，內容是每個按鍵所串接的api</p>\n<pre><code>$(document).ready(function () &#123;\n  $(&#39;#registerform&#39;).submit(function (event) &#123;\n    // 防止提交默認\n    event.preventDefault();\n\n    // 獲取表單數據\n    var account = $(&#39;#Username&#39;).val();\n    var password = $(&#39;#Password&#39;).val();\n    var name = $(&#39;#Name&#39;).val();\n    var contactNumber = $(&#39;#Phone&#39;).val();\n\n    // POST Requests with JSON\n    $.ajax(&#123;\n      url: &#39;http://127.0.0.1:8000/membership/&#39;,\n      type: &#39;POST&#39;,\n      contentType: &#39;application/json&#39;,\n      data: JSON.stringify(&#123;\n        account: account,\n        password: password,\n        name: name,\n        phone: contactNumber\n      &#125;),\n\n      success: function (response) &#123;\n        console.log(response);\n        alert(&#39;Register success!&#39;);\n        // 跳轉到/signin\n        window.location.href = &quot;/login&quot;;\n      &#125;,\n      error: function (xhr, status, error) &#123;\n        if (xhr.status === 400) &#123;\n          alert(&#39;Account already exist&#39;);\n        &#125;\n        console.error(error);\n        // 清空欄位\n        $(&#39;#Username&#39;).val(&#39;&#39;);\n        $(&#39;#Password&#39;).val(&#39;&#39;);\n        $(&#39;#Name&#39;).val(&#39;&#39;);\n        $(&#39;#Phone&#39;).val(&#39;&#39;);\n      &#125;\n    &#125;);\n  &#125;);\n&#125;);\n\n</code></pre>\n<hr>\n<h1 id=\"驗證問題\"><a href=\"#驗證問題\" class=\"headerlink\" title=\"驗證問題\"></a>驗證問題</h1><p>這時候就會想到如果使用者直接輸入網址是不是可以繞過登入的步驟進到會員頁面，<br>所以這邊在”&#x2F;index”,”&#x2F;memberlist”都有設置session的驗證，若使用者直接輸入網址且沒有帶上session便會被導回”&#x2F;login”，且跳出”請先登入”，<br>若是一般帳號登入後想直接進入”&#x2F;memberlist”頁面，則會跳出”你並非管理員”，並導回”&#x2F;index”</p>\n<img src=\"./plzsignin.jpg\"  alt=\"plzsignin\" />\n\n\n<pre><code>@application.route(&quot;/index&quot;)\ndef index():\n    if &#39;username&#39; not in session:\n        flash(&quot;請先登入&quot;)\n        return redirect(url_for(&#39;login&#39;))\n    return render_template(&quot;index.html&quot;)\n</code></pre>\n<img src=\"./memberlistSign.jpg\"  alt=\"要求先用管理員身分\" />\n<img src=\"./notadmin.jpg\"  alt=\"非管理員身分\" />\n\n\n<pre><code>@application.route(&quot;/memberlist&quot;)\ndef memberlist():\n    if &#39;username&#39; not in session:\n        flash(&quot;請先登入&quot;)\n        return redirect(url_for(&#39;login&#39;))\n    elif session[&#39;username&#39;] != admin[&#39;account&#39;]:\n        flash(&quot;你並非管理員&quot;)\n        return redirect(url_for(&#39;index&#39;))\n    # 查詢所有會員頁面\n    return render_template(&quot;memberlist.html&quot;)\n</code></pre>\n<hr>\n<p>最後附上GitHub連結:<a href=\"https://github.com/AnselCh/Flask_MemberSystem\">https://github.com/AnselCh/Flask_MemberSystem</a></p>"},{"title":"[Pytorch] 想用GPU跑ML環境卻裝不好?看完這篇帶你避開各種雷!","date":"2023-02-08T02:41:56.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n前陣子想說要來玩看看ML，一開始好傻好天真的以為pip install pytorch就好了，\n殊不知還要裝CUDA，還要對照顯卡版本、驅動、Python版本等等...\n前前後後環境裝了又刪、刪了又裝，但下面的指令一直出現...\n\n```\ntorch.cuda.is_available()\nFalse\n```\n\n<!--more-->\n---\n# 正文\n__重點有三個__\n1. 顯卡及CUDA版本\n2. Python版本\n3. Pytorch版本\n__這三點非常重要他們有一項不對就裝不好!__\n\n## 顯卡及CUDA版本\n先打開powershell輸入: __nvidia-smi__\n\n```\nnvidia-smi\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 528.33       Driver Version: 528.33       CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Quadro M1000M      WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P0    N/A /  N/A |      0MiB /  2048MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n```\n最上面可以看到我的顯卡驅動是528.33，支援的CUDA到12版\n__這邊很重要的__\n千萬不要看到支援到12版就去載CUDA 12，因為Pytorch目前還不支援\n\n<img src=\"./support.png\" alt=\"torch_support\" style=\"display:block; margin:auto;\"/>\n\n[Pytorch](https://pytorch.org/blog/deprecation-cuda-python-support/)可以看到目前最高支援CUDA 11.8, CUDNN 8.7.0.84\n\n所以現在可以得到一個結論，顯卡基本上是向下相容的，所以你可以去安裝CUDA11.X，甚至CUDA10.X都可以，取決於你想裝哪一版Pytorch\n但假如你的顯卡CUDA只支援到10，那當然你就只能裝<=10的CUDA版本\n\n終端機輸入:__nvcc --version__ 可以查詢CUDA版本\n\n```\nnvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n```\n\n至於安裝CUDA的流程可以參考:https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb\n假如有需要切換版本可以參考:https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29\n\n## Python版本\n上圖可見CUDA 11.8對應的Pytorch是2.0，所以對照的Python版本是>=3.8, <=3.11\n\n```\npython -V\nPython 3.10.8\n```\n我電腦 Python 3.10.8 所以沒問題\n\n## Pytorch版本\n\n[安裝指令](https://pytorch.org/get-started/locally/)\n\n<img src=\"./cmd.png\" alt=\"cmd\" style=\"display:block; margin:auto;\"/>\n\nPytorch首頁可以照自己規格點選然後會產生安裝指令\n這邊我是用conda安裝的所以選conda，另外Compute Platform這裡要選跟你剛剛裝一樣版本的CUDA\n__因為只要選錯版本安裝時他就會自動裝成CPU版__\n\n另外比[較舊的Pytorch版本](https://pytorch.org/get-started/previous-versions/)可點進去找自己要的安裝\n\n## 測試\n\n最後安裝完後打開conda進入剛剛安裝的環境\n\n```\npython\nPython 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\nTrue\n```\n出現True就成功啦!\n---\n","source":"_posts/pytorch-tips.md","raw":"---\ntitle: \"[Pytorch] 想用GPU跑ML環境卻裝不好?看完這篇帶你避開各種雷!\"\ncategories:\n  - tutorial\ndate: 2023-02-08 10:41:56\ntags: [Python,Pytorch,Machine Learning,ML,AI,CUDA]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n前陣子想說要來玩看看ML，一開始好傻好天真的以為pip install pytorch就好了，\n殊不知還要裝CUDA，還要對照顯卡版本、驅動、Python版本等等...\n前前後後環境裝了又刪、刪了又裝，但下面的指令一直出現...\n\n```\ntorch.cuda.is_available()\nFalse\n```\n\n<!--more-->\n---\n# 正文\n__重點有三個__\n1. 顯卡及CUDA版本\n2. Python版本\n3. Pytorch版本\n__這三點非常重要他們有一項不對就裝不好!__\n\n## 顯卡及CUDA版本\n先打開powershell輸入: __nvidia-smi__\n\n```\nnvidia-smi\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 528.33       Driver Version: 528.33       CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Quadro M1000M      WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P0    N/A /  N/A |      0MiB /  2048MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n```\n最上面可以看到我的顯卡驅動是528.33，支援的CUDA到12版\n__這邊很重要的__\n千萬不要看到支援到12版就去載CUDA 12，因為Pytorch目前還不支援\n\n<img src=\"./support.png\" alt=\"torch_support\" style=\"display:block; margin:auto;\"/>\n\n[Pytorch](https://pytorch.org/blog/deprecation-cuda-python-support/)可以看到目前最高支援CUDA 11.8, CUDNN 8.7.0.84\n\n所以現在可以得到一個結論，顯卡基本上是向下相容的，所以你可以去安裝CUDA11.X，甚至CUDA10.X都可以，取決於你想裝哪一版Pytorch\n但假如你的顯卡CUDA只支援到10，那當然你就只能裝<=10的CUDA版本\n\n終端機輸入:__nvcc --version__ 可以查詢CUDA版本\n\n```\nnvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n```\n\n至於安裝CUDA的流程可以參考:https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb\n假如有需要切換版本可以參考:https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29\n\n## Python版本\n上圖可見CUDA 11.8對應的Pytorch是2.0，所以對照的Python版本是>=3.8, <=3.11\n\n```\npython -V\nPython 3.10.8\n```\n我電腦 Python 3.10.8 所以沒問題\n\n## Pytorch版本\n\n[安裝指令](https://pytorch.org/get-started/locally/)\n\n<img src=\"./cmd.png\" alt=\"cmd\" style=\"display:block; margin:auto;\"/>\n\nPytorch首頁可以照自己規格點選然後會產生安裝指令\n這邊我是用conda安裝的所以選conda，另外Compute Platform這裡要選跟你剛剛裝一樣版本的CUDA\n__因為只要選錯版本安裝時他就會自動裝成CPU版__\n\n另外比[較舊的Pytorch版本](https://pytorch.org/get-started/previous-versions/)可點進去找自己要的安裝\n\n## 測試\n\n最後安裝完後打開conda進入剛剛安裝的環境\n\n```\npython\nPython 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import torch\n>>> torch.cuda.is_available()\nTrue\n```\n出現True就成功啦!\n---\n","slug":"pytorch-tips","published":1,"updated":"2023-05-12T13:49:08.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqf000iuxrh4qp11j8w","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前陣子想說要來玩看看ML，一開始好傻好天真的以為pip install pytorch就好了，<br>殊不知還要裝CUDA，還要對照顯卡版本、驅動、Python版本等等…<br>前前後後環境裝了又刪、刪了又裝，但下面的指令一直出現…</p>\n<pre><code>torch.cuda.is_available()\nFalse\n</code></pre>\n<span id=\"more\"></span>\n<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><strong>重點有三個</strong></p>\n<ol>\n<li>顯卡及CUDA版本</li>\n<li>Python版本</li>\n<li>Pytorch版本<br><strong>這三點非常重要他們有一項不對就裝不好!</strong></li>\n</ol>\n<h2 id=\"顯卡及CUDA版本\"><a href=\"#顯卡及CUDA版本\" class=\"headerlink\" title=\"顯卡及CUDA版本\"></a>顯卡及CUDA版本</h2><p>先打開powershell輸入: <strong>nvidia-smi</strong></p>\n<pre><code>nvidia-smi\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 528.33       Driver Version: 528.33       CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Quadro M1000M      WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P0    N/A /  N/A |      0MiB /  2048MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n</code></pre>\n<p>最上面可以看到我的顯卡驅動是528.33，支援的CUDA到12版<br><strong>這邊很重要的</strong><br>千萬不要看到支援到12版就去載CUDA 12，因為Pytorch目前還不支援</p>\n<img src=\"./support.png\" alt=\"torch_support\" style=\"display:block; margin:auto;\"/>\n\n<p><a href=\"https://pytorch.org/blog/deprecation-cuda-python-support/\">Pytorch</a>可以看到目前最高支援CUDA 11.8, CUDNN 8.7.0.84</p>\n<p>所以現在可以得到一個結論，顯卡基本上是向下相容的，所以你可以去安裝CUDA11.X，甚至CUDA10.X都可以，取決於你想裝哪一版Pytorch<br>但假如你的顯卡CUDA只支援到10，那當然你就只能裝&lt;&#x3D;10的CUDA版本</p>\n<p>終端機輸入:<strong>nvcc –version</strong> 可以查詢CUDA版本</p>\n<pre><code>nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n</code></pre>\n<p>至於安裝CUDA的流程可以參考:<a href=\"https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb\">https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb</a><br>假如有需要切換版本可以參考:<a href=\"https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29\">https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29</a></p>\n<h2 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h2><p>上圖可見CUDA 11.8對應的Pytorch是2.0，所以對照的Python版本是&gt;&#x3D;3.8, &lt;&#x3D;3.11</p>\n<pre><code>python -V\nPython 3.10.8\n</code></pre>\n<p>我電腦 Python 3.10.8 所以沒問題</p>\n<h2 id=\"Pytorch版本\"><a href=\"#Pytorch版本\" class=\"headerlink\" title=\"Pytorch版本\"></a>Pytorch版本</h2><p><a href=\"https://pytorch.org/get-started/locally/\">安裝指令</a></p>\n<img src=\"./cmd.png\" alt=\"cmd\" style=\"display:block; margin:auto;\"/>\n\n<p>Pytorch首頁可以照自己規格點選然後會產生安裝指令<br>這邊我是用conda安裝的所以選conda，另外Compute Platform這裡要選跟你剛剛裝一樣版本的CUDA<br><strong>因為只要選錯版本安裝時他就會自動裝成CPU版</strong></p>\n<p>另外比<a href=\"https://pytorch.org/get-started/previous-versions/\">較舊的Pytorch版本</a>可點進去找自己要的安裝</p>\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>最後安裝完後打開conda進入剛剛安裝的環境</p>\n<pre><code>python\nPython 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)] on win32\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; torch.cuda.is_available()\nTrue\n</code></pre>\n<h2 id=\"出現True就成功啦\"><a href=\"#出現True就成功啦\" class=\"headerlink\" title=\"出現True就成功啦!\"></a>出現True就成功啦!</h2>","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>前陣子想說要來玩看看ML，一開始好傻好天真的以為pip install pytorch就好了，<br>殊不知還要裝CUDA，還要對照顯卡版本、驅動、Python版本等等…<br>前前後後環境裝了又刪、刪了又裝，但下面的指令一直出現…</p>\n<pre><code>torch.cuda.is_available()\nFalse\n</code></pre>","more":"<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p><strong>重點有三個</strong></p>\n<ol>\n<li>顯卡及CUDA版本</li>\n<li>Python版本</li>\n<li>Pytorch版本<br><strong>這三點非常重要他們有一項不對就裝不好!</strong></li>\n</ol>\n<h2 id=\"顯卡及CUDA版本\"><a href=\"#顯卡及CUDA版本\" class=\"headerlink\" title=\"顯卡及CUDA版本\"></a>顯卡及CUDA版本</h2><p>先打開powershell輸入: <strong>nvidia-smi</strong></p>\n<pre><code>nvidia-smi\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 528.33       Driver Version: 528.33       CUDA Version: 12.0     |\n|-------------------------------+----------------------+----------------------+\n| GPU  Name            TCC/WDDM | Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  Quadro M1000M      WDDM  | 00000000:01:00.0 Off |                  N/A |\n| N/A    0C    P0    N/A /  N/A |      0MiB /  2048MiB |      0%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|  No running processes found                                                 |\n+-----------------------------------------------------------------------------+\n</code></pre>\n<p>最上面可以看到我的顯卡驅動是528.33，支援的CUDA到12版<br><strong>這邊很重要的</strong><br>千萬不要看到支援到12版就去載CUDA 12，因為Pytorch目前還不支援</p>\n<img src=\"./support.png\" alt=\"torch_support\" style=\"display:block; margin:auto;\"/>\n\n<p><a href=\"https://pytorch.org/blog/deprecation-cuda-python-support/\">Pytorch</a>可以看到目前最高支援CUDA 11.8, CUDNN 8.7.0.84</p>\n<p>所以現在可以得到一個結論，顯卡基本上是向下相容的，所以你可以去安裝CUDA11.X，甚至CUDA10.X都可以，取決於你想裝哪一版Pytorch<br>但假如你的顯卡CUDA只支援到10，那當然你就只能裝&lt;&#x3D;10的CUDA版本</p>\n<p>終端機輸入:<strong>nvcc –version</strong> 可以查詢CUDA版本</p>\n<pre><code>nvcc --version\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:41:10_Pacific_Daylight_Time_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n</code></pre>\n<p>至於安裝CUDA的流程可以參考:<a href=\"https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb\">https://medium.com/ching-i/win10-%E5%AE%89%E8%A3%9D-cuda-cudnn-%E6%95%99%E5%AD%B8-c617b3b76deb</a><br>假如有需要切換版本可以參考:<a href=\"https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29\">https://cvfiasd.pixnet.net/blog/post/175311141-caffe%E5%92%8Ctensorflow%E5%85%B1%E5%AD%98%28%E5%A4%9A%E7%89%88%E6%9C%ACcuda%E5%88%87%E6%8F%9B%29</a></p>\n<h2 id=\"Python版本\"><a href=\"#Python版本\" class=\"headerlink\" title=\"Python版本\"></a>Python版本</h2><p>上圖可見CUDA 11.8對應的Pytorch是2.0，所以對照的Python版本是&gt;&#x3D;3.8, &lt;&#x3D;3.11</p>\n<pre><code>python -V\nPython 3.10.8\n</code></pre>\n<p>我電腦 Python 3.10.8 所以沒問題</p>\n<h2 id=\"Pytorch版本\"><a href=\"#Pytorch版本\" class=\"headerlink\" title=\"Pytorch版本\"></a>Pytorch版本</h2><p><a href=\"https://pytorch.org/get-started/locally/\">安裝指令</a></p>\n<img src=\"./cmd.png\" alt=\"cmd\" style=\"display:block; margin:auto;\"/>\n\n<p>Pytorch首頁可以照自己規格點選然後會產生安裝指令<br>這邊我是用conda安裝的所以選conda，另外Compute Platform這裡要選跟你剛剛裝一樣版本的CUDA<br><strong>因為只要選錯版本安裝時他就會自動裝成CPU版</strong></p>\n<p>另外比<a href=\"https://pytorch.org/get-started/previous-versions/\">較舊的Pytorch版本</a>可點進去找自己要的安裝</p>\n<h2 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h2><p>最後安裝完後打開conda進入剛剛安裝的環境</p>\n<pre><code>python\nPython 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)] on win32\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; import torch\n&gt;&gt;&gt; torch.cuda.is_available()\nTrue\n</code></pre>\n<h2 id=\"出現True就成功啦\"><a href=\"#出現True就成功啦\" class=\"headerlink\" title=\"出現True就成功啦!\"></a>出現True就成功啦!</h2>"},{"title":"[Pytorch] Yolov5的一些筆記","date":"2023-02-18T01:15:38.000Z","_content":"\n[Load YOLOv5 from PyTorch Hub ](https://github.com/ultralytics/yolov5/issues/36)\n\n<!--more-->\n\n__Detailed Example__\n\n```\nimport cv2\nimport torch\nfrom PIL import Image\n\n# Model\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s')\n\n# Custom Models\nmodel = torch.hub.load('ultralytics/yolov5', 'custom', path='path/to/best.pt')  # local model\nmodel = torch.hub.load('path/to/yolov5', 'custom', path='path/to/best.pt', source='local')  # local repo\n\n# load on CPU\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', device='cpu')\n\n# Images\nfor f in 'zidane.jpg', 'bus.jpg':\n    torch.hub.download_url_to_file('https://ultralytics.com/images/' + f, f)  # download 2 images\nim1 = Image.open('zidane.jpg')  # PIL image\nim2 = cv2.imread('bus.jpg')[..., ::-1]  # OpenCV image (BGR to RGB)\n\n# Inference\nresults = model([im1, im2], size=640) # batch of images\n\n# Results\nresults.print()\nresults.save()  # or .show()\n\nresults.xyxy[0]  # im1 predictions (tensor)\nresults.pandas().xyxy[0]  # im1 predictions (pandas)\n```\n\n__Inference Settings__\n\n```\nmodel.conf = 0.25  # NMS confidence threshold\n      iou = 0.45  # NMS IoU threshold\n      agnostic = False  # NMS class-agnostic\n      multi_label = False  # NMS multiple labels per box\n      classes = None  # (optional list) filter by class, i.e. = [0, 15, 16] for COCO persons, cats and dogs\n      max_det = 1000  # maximum number of detections per image\n      amp = False  # Automatic Mixed Precision (AMP) inference\n\nresults = model(im, size=320)  # custom inference size\n```\n\n__Cropped Results__\n\n```\nresults = model(img)\ncrops = results.crop(\n    save=True, save_dir=r'path')\n```\n\n__Pandas Results__\n\n```\nresults = model(im)  # inference\nresults.pandas().xyxy[0]  # Pandas DataFrame\n```\n\n__JSON Results__\n\n```\nresults = model(ims)  # inference\nresults.pandas().xyxy[0].to_json(orient=\"records\")  # JSON img1 predictions\n```\n__Training__\n\n```\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', autoshape=False)  # load pretrained\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', autoshape=False, pretrained=False)  # load scratch\n```\n\n__TensorRT, ONNX and OpenVINO Models__\n\n```\n# ProTip: TensorRT may be up to 2-5X faster than PyTorch on GPU benchmarks\nmodel = torch.hub.load('ultralytics/yolov5', 'custom', path='yolov5s.pt')  # PyTorch\n                                                            'yolov5s.torchscript')  # TorchScript\n                                                            'yolov5s.onnx')  # ONNX\n                                                            'yolov5s_openvino_model/')  # OpenVINO\n                                                            'yolov5s.engine')  # TensorRT\n                                                            'yolov5s.mlmodel')  # CoreML (macOS-only)\n                                                            'yolov5s.tflite')  # TFLite\n                                                            'yolov5s_paddle_model/')  # PaddlePaddle\n\n```\n\n\n__training__\n\n[Train Custom Data](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data)\n[Colab](https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb)\n\n```\ngit clone https://github.com/ultralytics/yolov5  # clone\ncd yolov5\npip install -r requirements.txt  # install\npip install clearml\n# run clearml-init to connect to a ClearML server (deploy your own open-source server here, or use our free hosted server here)\n```\n\n__Export a Trained YOLOv5 Model__\n[TFLite, ONNX, CoreML, TensorRT Export](https://github.com/ultralytics/yolov5/issues/251)\n\n```\npython export.py --weights yolov5s.pt --include torchscript onnx openvino\n```\n\n__訓練自己資料__\n[train](https://officeguide.cc/pytorch-yolo-v5-object-egg-detection-models-tutorial-examples/)","source":"_posts/yolo-tips.md","raw":"---\ntitle: \"[Pytorch] Yolov5的一些筆記\"\ncategories:\n  - tutorial\ndate: 2023-02-18 09:15:38\ntags: [Python,Pytorch,Yolo,Machine Learning,ML,AI,DL]\n---\n\n[Load YOLOv5 from PyTorch Hub ](https://github.com/ultralytics/yolov5/issues/36)\n\n<!--more-->\n\n__Detailed Example__\n\n```\nimport cv2\nimport torch\nfrom PIL import Image\n\n# Model\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s')\n\n# Custom Models\nmodel = torch.hub.load('ultralytics/yolov5', 'custom', path='path/to/best.pt')  # local model\nmodel = torch.hub.load('path/to/yolov5', 'custom', path='path/to/best.pt', source='local')  # local repo\n\n# load on CPU\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', device='cpu')\n\n# Images\nfor f in 'zidane.jpg', 'bus.jpg':\n    torch.hub.download_url_to_file('https://ultralytics.com/images/' + f, f)  # download 2 images\nim1 = Image.open('zidane.jpg')  # PIL image\nim2 = cv2.imread('bus.jpg')[..., ::-1]  # OpenCV image (BGR to RGB)\n\n# Inference\nresults = model([im1, im2], size=640) # batch of images\n\n# Results\nresults.print()\nresults.save()  # or .show()\n\nresults.xyxy[0]  # im1 predictions (tensor)\nresults.pandas().xyxy[0]  # im1 predictions (pandas)\n```\n\n__Inference Settings__\n\n```\nmodel.conf = 0.25  # NMS confidence threshold\n      iou = 0.45  # NMS IoU threshold\n      agnostic = False  # NMS class-agnostic\n      multi_label = False  # NMS multiple labels per box\n      classes = None  # (optional list) filter by class, i.e. = [0, 15, 16] for COCO persons, cats and dogs\n      max_det = 1000  # maximum number of detections per image\n      amp = False  # Automatic Mixed Precision (AMP) inference\n\nresults = model(im, size=320)  # custom inference size\n```\n\n__Cropped Results__\n\n```\nresults = model(img)\ncrops = results.crop(\n    save=True, save_dir=r'path')\n```\n\n__Pandas Results__\n\n```\nresults = model(im)  # inference\nresults.pandas().xyxy[0]  # Pandas DataFrame\n```\n\n__JSON Results__\n\n```\nresults = model(ims)  # inference\nresults.pandas().xyxy[0].to_json(orient=\"records\")  # JSON img1 predictions\n```\n__Training__\n\n```\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', autoshape=False)  # load pretrained\nmodel = torch.hub.load('ultralytics/yolov5', 'yolov5s', autoshape=False, pretrained=False)  # load scratch\n```\n\n__TensorRT, ONNX and OpenVINO Models__\n\n```\n# ProTip: TensorRT may be up to 2-5X faster than PyTorch on GPU benchmarks\nmodel = torch.hub.load('ultralytics/yolov5', 'custom', path='yolov5s.pt')  # PyTorch\n                                                            'yolov5s.torchscript')  # TorchScript\n                                                            'yolov5s.onnx')  # ONNX\n                                                            'yolov5s_openvino_model/')  # OpenVINO\n                                                            'yolov5s.engine')  # TensorRT\n                                                            'yolov5s.mlmodel')  # CoreML (macOS-only)\n                                                            'yolov5s.tflite')  # TFLite\n                                                            'yolov5s_paddle_model/')  # PaddlePaddle\n\n```\n\n\n__training__\n\n[Train Custom Data](https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data)\n[Colab](https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb)\n\n```\ngit clone https://github.com/ultralytics/yolov5  # clone\ncd yolov5\npip install -r requirements.txt  # install\npip install clearml\n# run clearml-init to connect to a ClearML server (deploy your own open-source server here, or use our free hosted server here)\n```\n\n__Export a Trained YOLOv5 Model__\n[TFLite, ONNX, CoreML, TensorRT Export](https://github.com/ultralytics/yolov5/issues/251)\n\n```\npython export.py --weights yolov5s.pt --include torchscript onnx openvino\n```\n\n__訓練自己資料__\n[train](https://officeguide.cc/pytorch-yolo-v5-object-egg-detection-models-tutorial-examples/)","slug":"yolo-tips","published":1,"updated":"2023-05-12T13:49:08.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqf000juxrhbedx4ib8","content":"<p><a href=\"https://github.com/ultralytics/yolov5/issues/36\">Load YOLOv5 from PyTorch Hub </a></p>\n<span id=\"more\"></span>\n\n<p><strong>Detailed Example</strong></p>\n<pre><code>import cv2\nimport torch\nfrom PIL import Image\n\n# Model\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;)\n\n# Custom Models\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;custom&#39;, path=&#39;path/to/best.pt&#39;)  # local model\nmodel = torch.hub.load(&#39;path/to/yolov5&#39;, &#39;custom&#39;, path=&#39;path/to/best.pt&#39;, source=&#39;local&#39;)  # local repo\n\n# load on CPU\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, device=&#39;cpu&#39;)\n\n# Images\nfor f in &#39;zidane.jpg&#39;, &#39;bus.jpg&#39;:\n    torch.hub.download_url_to_file(&#39;https://ultralytics.com/images/&#39; + f, f)  # download 2 images\nim1 = Image.open(&#39;zidane.jpg&#39;)  # PIL image\nim2 = cv2.imread(&#39;bus.jpg&#39;)[..., ::-1]  # OpenCV image (BGR to RGB)\n\n# Inference\nresults = model([im1, im2], size=640) # batch of images\n\n# Results\nresults.print()\nresults.save()  # or .show()\n\nresults.xyxy[0]  # im1 predictions (tensor)\nresults.pandas().xyxy[0]  # im1 predictions (pandas)\n</code></pre>\n<p><strong>Inference Settings</strong></p>\n<pre><code>model.conf = 0.25  # NMS confidence threshold\n      iou = 0.45  # NMS IoU threshold\n      agnostic = False  # NMS class-agnostic\n      multi_label = False  # NMS multiple labels per box\n      classes = None  # (optional list) filter by class, i.e. = [0, 15, 16] for COCO persons, cats and dogs\n      max_det = 1000  # maximum number of detections per image\n      amp = False  # Automatic Mixed Precision (AMP) inference\n\nresults = model(im, size=320)  # custom inference size\n</code></pre>\n<p><strong>Cropped Results</strong></p>\n<pre><code>results = model(img)\ncrops = results.crop(\n    save=True, save_dir=r&#39;path&#39;)\n</code></pre>\n<p><strong>Pandas Results</strong></p>\n<pre><code>results = model(im)  # inference\nresults.pandas().xyxy[0]  # Pandas DataFrame\n</code></pre>\n<p><strong>JSON Results</strong></p>\n<pre><code>results = model(ims)  # inference\nresults.pandas().xyxy[0].to_json(orient=&quot;records&quot;)  # JSON img1 predictions\n</code></pre>\n<p><strong>Training</strong></p>\n<pre><code>model = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, autoshape=False)  # load pretrained\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, autoshape=False, pretrained=False)  # load scratch\n</code></pre>\n<p><strong>TensorRT, ONNX and OpenVINO Models</strong></p>\n<pre><code># ProTip: TensorRT may be up to 2-5X faster than PyTorch on GPU benchmarks\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;custom&#39;, path=&#39;yolov5s.pt&#39;)  # PyTorch\n                                                            &#39;yolov5s.torchscript&#39;)  # TorchScript\n                                                            &#39;yolov5s.onnx&#39;)  # ONNX\n                                                            &#39;yolov5s_openvino_model/&#39;)  # OpenVINO\n                                                            &#39;yolov5s.engine&#39;)  # TensorRT\n                                                            &#39;yolov5s.mlmodel&#39;)  # CoreML (macOS-only)\n                                                            &#39;yolov5s.tflite&#39;)  # TFLite\n                                                            &#39;yolov5s_paddle_model/&#39;)  # PaddlePaddle\n</code></pre>\n<p><strong>training</strong></p>\n<p><a href=\"https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data\">Train Custom Data</a><br><a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\">Colab</a></p>\n<pre><code>git clone https://github.com/ultralytics/yolov5  # clone\ncd yolov5\npip install -r requirements.txt  # install\npip install clearml\n# run clearml-init to connect to a ClearML server (deploy your own open-source server here, or use our free hosted server here)\n</code></pre>\n<p><strong>Export a Trained YOLOv5 Model</strong><br><a href=\"https://github.com/ultralytics/yolov5/issues/251\">TFLite, ONNX, CoreML, TensorRT Export</a></p>\n<pre><code>python export.py --weights yolov5s.pt --include torchscript onnx openvino\n</code></pre>\n<p><strong>訓練自己資料</strong><br><a href=\"https://officeguide.cc/pytorch-yolo-v5-object-egg-detection-models-tutorial-examples/\">train</a></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/ultralytics/yolov5/issues/36\">Load YOLOv5 from PyTorch Hub </a></p>","more":"<p><strong>Detailed Example</strong></p>\n<pre><code>import cv2\nimport torch\nfrom PIL import Image\n\n# Model\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;)\n\n# Custom Models\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;custom&#39;, path=&#39;path/to/best.pt&#39;)  # local model\nmodel = torch.hub.load(&#39;path/to/yolov5&#39;, &#39;custom&#39;, path=&#39;path/to/best.pt&#39;, source=&#39;local&#39;)  # local repo\n\n# load on CPU\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, device=&#39;cpu&#39;)\n\n# Images\nfor f in &#39;zidane.jpg&#39;, &#39;bus.jpg&#39;:\n    torch.hub.download_url_to_file(&#39;https://ultralytics.com/images/&#39; + f, f)  # download 2 images\nim1 = Image.open(&#39;zidane.jpg&#39;)  # PIL image\nim2 = cv2.imread(&#39;bus.jpg&#39;)[..., ::-1]  # OpenCV image (BGR to RGB)\n\n# Inference\nresults = model([im1, im2], size=640) # batch of images\n\n# Results\nresults.print()\nresults.save()  # or .show()\n\nresults.xyxy[0]  # im1 predictions (tensor)\nresults.pandas().xyxy[0]  # im1 predictions (pandas)\n</code></pre>\n<p><strong>Inference Settings</strong></p>\n<pre><code>model.conf = 0.25  # NMS confidence threshold\n      iou = 0.45  # NMS IoU threshold\n      agnostic = False  # NMS class-agnostic\n      multi_label = False  # NMS multiple labels per box\n      classes = None  # (optional list) filter by class, i.e. = [0, 15, 16] for COCO persons, cats and dogs\n      max_det = 1000  # maximum number of detections per image\n      amp = False  # Automatic Mixed Precision (AMP) inference\n\nresults = model(im, size=320)  # custom inference size\n</code></pre>\n<p><strong>Cropped Results</strong></p>\n<pre><code>results = model(img)\ncrops = results.crop(\n    save=True, save_dir=r&#39;path&#39;)\n</code></pre>\n<p><strong>Pandas Results</strong></p>\n<pre><code>results = model(im)  # inference\nresults.pandas().xyxy[0]  # Pandas DataFrame\n</code></pre>\n<p><strong>JSON Results</strong></p>\n<pre><code>results = model(ims)  # inference\nresults.pandas().xyxy[0].to_json(orient=&quot;records&quot;)  # JSON img1 predictions\n</code></pre>\n<p><strong>Training</strong></p>\n<pre><code>model = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, autoshape=False)  # load pretrained\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;yolov5s&#39;, autoshape=False, pretrained=False)  # load scratch\n</code></pre>\n<p><strong>TensorRT, ONNX and OpenVINO Models</strong></p>\n<pre><code># ProTip: TensorRT may be up to 2-5X faster than PyTorch on GPU benchmarks\nmodel = torch.hub.load(&#39;ultralytics/yolov5&#39;, &#39;custom&#39;, path=&#39;yolov5s.pt&#39;)  # PyTorch\n                                                            &#39;yolov5s.torchscript&#39;)  # TorchScript\n                                                            &#39;yolov5s.onnx&#39;)  # ONNX\n                                                            &#39;yolov5s_openvino_model/&#39;)  # OpenVINO\n                                                            &#39;yolov5s.engine&#39;)  # TensorRT\n                                                            &#39;yolov5s.mlmodel&#39;)  # CoreML (macOS-only)\n                                                            &#39;yolov5s.tflite&#39;)  # TFLite\n                                                            &#39;yolov5s_paddle_model/&#39;)  # PaddlePaddle\n</code></pre>\n<p><strong>training</strong></p>\n<p><a href=\"https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data\">Train Custom Data</a><br><a href=\"https://colab.research.google.com/github/ultralytics/yolov5/blob/master/tutorial.ipynb\">Colab</a></p>\n<pre><code>git clone https://github.com/ultralytics/yolov5  # clone\ncd yolov5\npip install -r requirements.txt  # install\npip install clearml\n# run clearml-init to connect to a ClearML server (deploy your own open-source server here, or use our free hosted server here)\n</code></pre>\n<p><strong>Export a Trained YOLOv5 Model</strong><br><a href=\"https://github.com/ultralytics/yolov5/issues/251\">TFLite, ONNX, CoreML, TensorRT Export</a></p>\n<pre><code>python export.py --weights yolov5s.pt --include torchscript onnx openvino\n</code></pre>\n<p><strong>訓練自己資料</strong><br><a href=\"https://officeguide.cc/pytorch-yolo-v5-object-egg-detection-models-tutorial-examples/\">train</a></p>"},{"title":"[Mediapipe] 利用Mediapipe手部辨識，不用滑鼠鍵盤也能快轉影片、調整音量!","date":"2023-02-01T05:21:13.000Z","_content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n ## Mediapipe是什麼?\n可以從[Mediapipe官網](https://google.github.io/mediapipe/)中看到他是Google公司的開源專案，在[Mediapipe的GitHub](https://github.com/google/mediapipe)介紹寫到\n > Cross-platform, customizable ML solutions for live and streaming media.\n\n並支援 Android , iOS , C++ , Python , JS 等平台，不過並不是所有平台都可以使用每一種演算法。\n目前官網所提供的演算法有 __Face Detection,Face Mesh,Iris,Hands\tPose,Holistic,Hair Segmentation,Object Detection,Box Tracking,Instant Motion Tracking,Objectron,KNIFT__\n<!--more-->\n<img src=\"./mpsolutions.png\"  alt=\"圖示說明\" />\n\n\n---\n## Hand\n\n而這次使用[Hands](https://google.github.io/mediapipe/solutions/hands#python-solution-api)這個演算法，所以其他就不贅述。至於演算法詳細介紹可以點進連結了解，這邊只做基本說明。\n手部辨識的演算法主要是透過手掌偵測手部位子，再透過21個定位點完成定位。\n而這次專案主要是透過21個定位點紀錄位置後，定義手勢名稱進行指令的分配，下圖是官網說明。\n<img src=\"./hand_landmarks.png\" alt=\"21定位點\"/>\n<img src=\"./hand_crops.png\" alt=\"偵測範例\" style=\"display:block; margin:auto;\"/>\n\n---\n# 正文\n\n首先這個專案是從[Kazuhito00](https://github.com/Kazuhito00)這位作者的[專案](https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe)進行改寫而成的，不過專案內容都是日文，所以後來是看[這篇](https://www.youtube.com/watch?v=a99p_fAr6e4&ab_channel=IvanGoncharov)的介紹才比較了解!\n原始[專案](https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe)使用Mediapipe進行手部辨識後，記錄手部的21個座標，再透過Tensorflow建置模型，最後利用OpenCV進行手勢的辨識，其中作者提供兩種模型的訓練，分別為靜態手勢及動態手勢。\n\n## __至於我改寫什麼部分?__\n\n使用PyQt5將主要功能GUI化,只要開啟main.py就能完成大部份的事(參考下圖)，並將訓練模式及偵測模式分開，因為我發現再同一個模式下執行兩件事情偵數掉得很嚴重，要記錄手勢會很不順，並且透過GUI介面直接跑py檔，不用去翻檔案。\n\n__為何我說是完成大部分的事呢?__\n因為幫手勢建好模型、上好標籤後，指派什麼手勢做什麼事情就需要大家發揮創意動手更改程式碼，來達成你想要遙控的的目的了!\n在這邊我目前想到的是用手勢控制影片的播放，接下來會結合[pyautogui](https://pyautogui.readthedocs.io/en/latest/)套件輸入按鍵，像是鍵盤輸入 \"->\" 影片就會快轉，看Netflix時輸入 \"s\" 就會跳過前導，這樣就可以一邊吃東西然後不怕用髒滑鼠鍵盤來控制影片播放了!\n[專案連結](https://github.com/AnselCh/HandGestures_GUI)\n\n\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./app.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * APP - 開啟偵測模式<br/>\n    * Build - 開啟訓練模式<br/>\n    * Label - 開啟CSV檔幫手勢命名<br/>\n    * Training - 將記錄好的座標透過Tensorflow建置模型\n </pre>\n</div>\n<br/>\n<br/>\n\n## __程式使用說明__\n最重要的環境建置!將專案clone下來後建立虛擬環境(看個人習慣)\n```\ngit clone https://github.com/AnselCh/HandGestures_GUI.git\nPython 3.10.8\npip install -r requirements.txt\n```\n\n1) 終端機執行python main.py就會進到上圖的GUI介面，接著就要開始訓練自己的手勢模型，不然原本預設的模型會是我的。\n2) 點擊\"Build\"後會開啟訓練模式，首先會跳出設定畫面\n\n\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./setting.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * Max Hands - 設定app.py裡的max_num_hands的參數\n      依需求填入要同時偵測幾隻手<br/><br/>\n    * Webcam ID - 設定鏡頭來源\n      若電腦內建鏡頭就是0，若有外接就是1(看使用者設備調整)\n </pre>\n</div>\n<br/>\n<br/>\n\n3) 按下\"Run\"就會開啟相機準備紀錄手勢(啟動時間因設備效能而異)\n4) 按下 \"a\" 鍵進入新增模式(左上角Mode會顯示Logging Key Point)，這邊可以新增10種手勢，分別是編號0~9，這邊會寫入21個座標到sp_model/keypoint.csv內\n   手勢擺好後按下數字0來記錄第一組動作，可以多新增不同角度讓事後偵測更準確!\n   就這樣一路新增完你想定義的手勢，記得要從0開始記(建議可以先把要定義的手勢寫起來)\n   下圖框框的\"Right\"是指右手，\"UP\"是我的模型中定義這個手勢是名叫UP\n\n<img src=\"./append.png\" alt=\"新增手勢\" style=\"display:block; margin:auto;\"/><br/>\n<img src=\"./csv.png\" alt=\"csv檔預覽\" style=\"display:block; margin:auto;\"/>\n\n5) 記錄完之後確認一下sp_model/keypoint.csv中是有數據的後，按一下esc關閉程式，並打開Label\n   會跳出 keypoint_label.csv，這邊要幫剛剛新增的手勢取名，下圖因為我新增5個手勢所以定義了5個名子\n\n<img src=\"./labe_csv.png\" alt=\"labe_csv檔預覽\" style=\"display:block; margin:auto;\"/><br/>\n\n6) 之後按下Training會詢問你剛剛新增了幾組手勢，注意剛剛是0~4是5組，如果輸入的數字不對會無法訓練模型喔!\n   成功後會跳出視窗提醒(參考下圖)\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./how_many.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./success.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<br/>\n<br/>\n\n7) 模型建好後就可以開始定義每個手勢想達成甚麼目的了!\n   這邊需要先開啟app.py進行編輯，以我的檔案為例:我在151行開始定義剛剛第0個手勢會按一下鍵盤的上，剩下的動作分別是下、左、右、\"s\"\n\n<img src=\"./functions.png\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/>\n\n    在205行:# cv.imshow('Hand Gesture Recognition', debug_image)\n    可以決定APP執行時要不要開起畫面，如果想要有影像就把註解取消(個人覺得太耗效能所以關閉，因為也沒必要顯示)\n\n8) 功能設置完後執行main.py，點擊APP就會開啟APP，這時候可以看終端機有沒有顯示\n\n```\nINFO: Created TensorFlow Lite XNNPACK     delegate for CPU.\n或是看鏡頭有沒有亮燈來判斷程式有沒有成功跑起來!\n```\n\n   剛剛在指派functions裡我有放print，所以可以對鏡頭比看看手勢確認有沒有成功。(下面範例我的s手勢是比數字六，因為跟往右的手勢有點重疊到，所以會有判斷錯誤的可能)\n   若要結束程式要在終端機按 ctrl+C\n\n<img src=\"./example.gif\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/>\n\n9) 最後都沒問題後就可以邊看影片邊快樂吃零食啦!\n   PS:Netflix上下是調整音量、左右是快轉、\"s\"是跳過前導\n   這次沒有把動態手勢寫入文章是因為我覺得效果沒有很好，所以有興趣的人可以再去看原始專案的介紹。\n","source":"_posts/handgestures.md","raw":"---\ntitle: \"[Mediapipe] 利用Mediapipe手部辨識，不用滑鼠鍵盤也能快轉影片、調整音量!\"\ncategories:\n  - repository\ndate: 2023-02-01 13:21:13\ntags: [Python,Mediapipe,OpenCV,Tensorflow,Machine Learning,ML,AI,PyQt5]\n---\n\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n ## Mediapipe是什麼?\n可以從[Mediapipe官網](https://google.github.io/mediapipe/)中看到他是Google公司的開源專案，在[Mediapipe的GitHub](https://github.com/google/mediapipe)介紹寫到\n > Cross-platform, customizable ML solutions for live and streaming media.\n\n並支援 Android , iOS , C++ , Python , JS 等平台，不過並不是所有平台都可以使用每一種演算法。\n目前官網所提供的演算法有 __Face Detection,Face Mesh,Iris,Hands\tPose,Holistic,Hair Segmentation,Object Detection,Box Tracking,Instant Motion Tracking,Objectron,KNIFT__\n<!--more-->\n<img src=\"./mpsolutions.png\"  alt=\"圖示說明\" />\n\n\n---\n## Hand\n\n而這次使用[Hands](https://google.github.io/mediapipe/solutions/hands#python-solution-api)這個演算法，所以其他就不贅述。至於演算法詳細介紹可以點進連結了解，這邊只做基本說明。\n手部辨識的演算法主要是透過手掌偵測手部位子，再透過21個定位點完成定位。\n而這次專案主要是透過21個定位點紀錄位置後，定義手勢名稱進行指令的分配，下圖是官網說明。\n<img src=\"./hand_landmarks.png\" alt=\"21定位點\"/>\n<img src=\"./hand_crops.png\" alt=\"偵測範例\" style=\"display:block; margin:auto;\"/>\n\n---\n# 正文\n\n首先這個專案是從[Kazuhito00](https://github.com/Kazuhito00)這位作者的[專案](https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe)進行改寫而成的，不過專案內容都是日文，所以後來是看[這篇](https://www.youtube.com/watch?v=a99p_fAr6e4&ab_channel=IvanGoncharov)的介紹才比較了解!\n原始[專案](https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe)使用Mediapipe進行手部辨識後，記錄手部的21個座標，再透過Tensorflow建置模型，最後利用OpenCV進行手勢的辨識，其中作者提供兩種模型的訓練，分別為靜態手勢及動態手勢。\n\n## __至於我改寫什麼部分?__\n\n使用PyQt5將主要功能GUI化,只要開啟main.py就能完成大部份的事(參考下圖)，並將訓練模式及偵測模式分開，因為我發現再同一個模式下執行兩件事情偵數掉得很嚴重，要記錄手勢會很不順，並且透過GUI介面直接跑py檔，不用去翻檔案。\n\n__為何我說是完成大部分的事呢?__\n因為幫手勢建好模型、上好標籤後，指派什麼手勢做什麼事情就需要大家發揮創意動手更改程式碼，來達成你想要遙控的的目的了!\n在這邊我目前想到的是用手勢控制影片的播放，接下來會結合[pyautogui](https://pyautogui.readthedocs.io/en/latest/)套件輸入按鍵，像是鍵盤輸入 \"->\" 影片就會快轉，看Netflix時輸入 \"s\" 就會跳過前導，這樣就可以一邊吃東西然後不怕用髒滑鼠鍵盤來控制影片播放了!\n[專案連結](https://github.com/AnselCh/HandGestures_GUI)\n\n\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./app.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * APP - 開啟偵測模式<br/>\n    * Build - 開啟訓練模式<br/>\n    * Label - 開啟CSV檔幫手勢命名<br/>\n    * Training - 將記錄好的座標透過Tensorflow建置模型\n </pre>\n</div>\n<br/>\n<br/>\n\n## __程式使用說明__\n最重要的環境建置!將專案clone下來後建立虛擬環境(看個人習慣)\n```\ngit clone https://github.com/AnselCh/HandGestures_GUI.git\nPython 3.10.8\npip install -r requirements.txt\n```\n\n1) 終端機執行python main.py就會進到上圖的GUI介面，接著就要開始訓練自己的手勢模型，不然原本預設的模型會是我的。\n2) 點擊\"Build\"後會開啟訓練模式，首先會跳出設定畫面\n\n\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./setting.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * Max Hands - 設定app.py裡的max_num_hands的參數\n      依需求填入要同時偵測幾隻手<br/><br/>\n    * Webcam ID - 設定鏡頭來源\n      若電腦內建鏡頭就是0，若有外接就是1(看使用者設備調整)\n </pre>\n</div>\n<br/>\n<br/>\n\n3) 按下\"Run\"就會開啟相機準備紀錄手勢(啟動時間因設備效能而異)\n4) 按下 \"a\" 鍵進入新增模式(左上角Mode會顯示Logging Key Point)，這邊可以新增10種手勢，分別是編號0~9，這邊會寫入21個座標到sp_model/keypoint.csv內\n   手勢擺好後按下數字0來記錄第一組動作，可以多新增不同角度讓事後偵測更準確!\n   就這樣一路新增完你想定義的手勢，記得要從0開始記(建議可以先把要定義的手勢寫起來)\n   下圖框框的\"Right\"是指右手，\"UP\"是我的模型中定義這個手勢是名叫UP\n\n<img src=\"./append.png\" alt=\"新增手勢\" style=\"display:block; margin:auto;\"/><br/>\n<img src=\"./csv.png\" alt=\"csv檔預覽\" style=\"display:block; margin:auto;\"/>\n\n5) 記錄完之後確認一下sp_model/keypoint.csv中是有數據的後，按一下esc關閉程式，並打開Label\n   會跳出 keypoint_label.csv，這邊要幫剛剛新增的手勢取名，下圖因為我新增5個手勢所以定義了5個名子\n\n<img src=\"./labe_csv.png\" alt=\"labe_csv檔預覽\" style=\"display:block; margin:auto;\"/><br/>\n\n6) 之後按下Training會詢問你剛剛新增了幾組手勢，注意剛剛是0~4是5組，如果輸入的數字不對會無法訓練模型喔!\n   成功後會跳出視窗提醒(參考下圖)\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./how_many.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./success.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<br/>\n<br/>\n\n7) 模型建好後就可以開始定義每個手勢想達成甚麼目的了!\n   這邊需要先開啟app.py進行編輯，以我的檔案為例:我在151行開始定義剛剛第0個手勢會按一下鍵盤的上，剩下的動作分別是下、左、右、\"s\"\n\n<img src=\"./functions.png\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/>\n\n    在205行:# cv.imshow('Hand Gesture Recognition', debug_image)\n    可以決定APP執行時要不要開起畫面，如果想要有影像就把註解取消(個人覺得太耗效能所以關閉，因為也沒必要顯示)\n\n8) 功能設置完後執行main.py，點擊APP就會開啟APP，這時候可以看終端機有沒有顯示\n\n```\nINFO: Created TensorFlow Lite XNNPACK     delegate for CPU.\n或是看鏡頭有沒有亮燈來判斷程式有沒有成功跑起來!\n```\n\n   剛剛在指派functions裡我有放print，所以可以對鏡頭比看看手勢確認有沒有成功。(下面範例我的s手勢是比數字六，因為跟往右的手勢有點重疊到，所以會有判斷錯誤的可能)\n   若要結束程式要在終端機按 ctrl+C\n\n<img src=\"./example.gif\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/>\n\n9) 最後都沒問題後就可以邊看影片邊快樂吃零食啦!\n   PS:Netflix上下是調整音量、左右是快轉、\"s\"是跳過前導\n   這次沒有把動態手勢寫入文章是因為我覺得效果沒有很好，所以有興趣的人可以再去看原始專案的介紹。\n","slug":"handgestures","published":1,"updated":"2023-05-12T13:49:08.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqf000luxrh89vo0bee","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"Mediapipe是什麼\"><a href=\"#Mediapipe是什麼\" class=\"headerlink\" title=\"Mediapipe是什麼?\"></a>Mediapipe是什麼?</h2><p>可以從<a href=\"https://google.github.io/mediapipe/\">Mediapipe官網</a>中看到他是Google公司的開源專案，在<a href=\"https://github.com/google/mediapipe\">Mediapipe的GitHub</a>介紹寫到</p>\n<blockquote>\n<p>Cross-platform, customizable ML solutions for live and streaming media.</p>\n</blockquote>\n<p>並支援 Android , iOS , C++ , Python , JS 等平台，不過並不是所有平台都可以使用每一種演算法。<br>目前官網所提供的演算法有 <strong>Face Detection,Face Mesh,Iris,Hands\tPose,Holistic,Hair Segmentation,Object Detection,Box Tracking,Instant Motion Tracking,Objectron,KNIFT</strong></p>\n<span id=\"more\"></span>\n<img src=\"./mpsolutions.png\"  alt=\"圖示說明\" />\n\n\n<hr>\n<h2 id=\"Hand\"><a href=\"#Hand\" class=\"headerlink\" title=\"Hand\"></a>Hand</h2><p>而這次使用<a href=\"https://google.github.io/mediapipe/solutions/hands#python-solution-api\">Hands</a>這個演算法，所以其他就不贅述。至於演算法詳細介紹可以點進連結了解，這邊只做基本說明。<br>手部辨識的演算法主要是透過手掌偵測手部位子，再透過21個定位點完成定位。<br>而這次專案主要是透過21個定位點紀錄位置後，定義手勢名稱進行指令的分配，下圖是官網說明。<br><img src=\"./hand_landmarks.png\" alt=\"21定位點\"/><br><img src=\"./hand_crops.png\" alt=\"偵測範例\" style=\"display:block; margin:auto;\"/></p>\n<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先這個專案是從<a href=\"https://github.com/Kazuhito00\">Kazuhito00</a>這位作者的<a href=\"https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe\">專案</a>進行改寫而成的，不過專案內容都是日文，所以後來是看<a href=\"https://www.youtube.com/watch?v=a99p_fAr6e4&ab_channel=IvanGoncharov\">這篇</a>的介紹才比較了解!<br>原始<a href=\"https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe\">專案</a>使用Mediapipe進行手部辨識後，記錄手部的21個座標，再透過Tensorflow建置模型，最後利用OpenCV進行手勢的辨識，其中作者提供兩種模型的訓練，分別為靜態手勢及動態手勢。</p>\n<h2 id=\"至於我改寫什麼部分\"><a href=\"#至於我改寫什麼部分\" class=\"headerlink\" title=\"至於我改寫什麼部分?\"></a><strong>至於我改寫什麼部分?</strong></h2><p>使用PyQt5將主要功能GUI化,只要開啟main.py就能完成大部份的事(參考下圖)，並將訓練模式及偵測模式分開，因為我發現再同一個模式下執行兩件事情偵數掉得很嚴重，要記錄手勢會很不順，並且透過GUI介面直接跑py檔，不用去翻檔案。</p>\n<p><strong>為何我說是完成大部分的事呢?</strong><br>因為幫手勢建好模型、上好標籤後，指派什麼手勢做什麼事情就需要大家發揮創意動手更改程式碼，來達成你想要遙控的的目的了!<br>在這邊我目前想到的是用手勢控制影片的播放，接下來會結合<a href=\"https://pyautogui.readthedocs.io/en/latest/\">pyautogui</a>套件輸入按鍵，像是鍵盤輸入 “-&gt;” 影片就會快轉，看Netflix時輸入 “s” 就會跳過前導，這樣就可以一邊吃東西然後不怕用髒滑鼠鍵盤來控制影片播放了!<br><a href=\"https://github.com/AnselCh/HandGestures_GUI\">專案連結</a></p>\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./app.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * APP - 開啟偵測模式<br/>\n    * Build - 開啟訓練模式<br/>\n    * Label - 開啟CSV檔幫手勢命名<br/>\n    * Training - 將記錄好的座標透過Tensorflow建置模型\n </pre>\n</div>\n<br/>\n<br/>\n\n<h2 id=\"程式使用說明\"><a href=\"#程式使用說明\" class=\"headerlink\" title=\"程式使用說明\"></a><strong>程式使用說明</strong></h2><p>最重要的環境建置!將專案clone下來後建立虛擬環境(看個人習慣)</p>\n<pre><code>git clone https://github.com/AnselCh/HandGestures_GUI.git\nPython 3.10.8\npip install -r requirements.txt\n</code></pre>\n<ol>\n<li>終端機執行python main.py就會進到上圖的GUI介面，接著就要開始訓練自己的手勢模型，不然原本預設的模型會是我的。</li>\n<li>點擊”Build”後會開啟訓練模式，首先會跳出設定畫面</li>\n</ol>\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./setting.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * Max Hands - 設定app.py裡的max_num_hands的參數\n      依需求填入要同時偵測幾隻手<br/><br/>\n    * Webcam ID - 設定鏡頭來源\n      若電腦內建鏡頭就是0，若有外接就是1(看使用者設備調整)\n </pre>\n</div>\n<br/>\n<br/>\n\n<ol start=\"3\">\n<li>按下”Run”就會開啟相機準備紀錄手勢(啟動時間因設備效能而異)</li>\n<li>按下 “a” 鍵進入新增模式(左上角Mode會顯示Logging Key Point)，這邊可以新增10種手勢，分別是編號0~9，這邊會寫入21個座標到sp_model&#x2F;keypoint.csv內<br>手勢擺好後按下數字0來記錄第一組動作，可以多新增不同角度讓事後偵測更準確!<br>就這樣一路新增完你想定義的手勢，記得要從0開始記(建議可以先把要定義的手勢寫起來)<br>下圖框框的”Right”是指右手，”UP”是我的模型中定義這個手勢是名叫UP</li>\n</ol>\n<p><img src=\"./append.png\" alt=\"新增手勢\" style=\"display:block; margin:auto;\"/><br/><br><img src=\"./csv.png\" alt=\"csv檔預覽\" style=\"display:block; margin:auto;\"/></p>\n<ol start=\"5\">\n<li>記錄完之後確認一下sp_model&#x2F;keypoint.csv中是有數據的後，按一下esc關閉程式，並打開Label<br>會跳出 keypoint_label.csv，這邊要幫剛剛新增的手勢取名，下圖因為我新增5個手勢所以定義了5個名子</li>\n</ol>\n<p><img src=\"./labe_csv.png\" alt=\"labe_csv檔預覽\" style=\"display:block; margin:auto;\"/><br/></p>\n<ol start=\"6\">\n<li>之後按下Training會詢問你剛剛新增了幾組手勢，注意剛剛是0~4是5組，如果輸入的數字不對會無法訓練模型喔!<br>成功後會跳出視窗提醒(參考下圖)</li>\n</ol>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./how_many.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./success.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<br/>\n<br/>\n\n<ol start=\"7\">\n<li>模型建好後就可以開始定義每個手勢想達成甚麼目的了!<br>這邊需要先開啟app.py進行編輯，以我的檔案為例:我在151行開始定義剛剛第0個手勢會按一下鍵盤的上，剩下的動作分別是下、左、右、”s”</li>\n</ol>\n<p><img src=\"./functions.png\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/></p>\n<pre><code>在205行:# cv.imshow(&#39;Hand Gesture Recognition&#39;, debug_image)\n可以決定APP執行時要不要開起畫面，如果想要有影像就把註解取消(個人覺得太耗效能所以關閉，因為也沒必要顯示)\n</code></pre>\n<ol start=\"8\">\n<li>功能設置完後執行main.py，點擊APP就會開啟APP，這時候可以看終端機有沒有顯示</li>\n</ol>\n<pre><code>INFO: Created TensorFlow Lite XNNPACK     delegate for CPU.\n或是看鏡頭有沒有亮燈來判斷程式有沒有成功跑起來!\n</code></pre>\n<p>   剛剛在指派functions裡我有放print，所以可以對鏡頭比看看手勢確認有沒有成功。(下面範例我的s手勢是比數字六，因為跟往右的手勢有點重疊到，所以會有判斷錯誤的可能)<br>   若要結束程式要在終端機按 ctrl+C</p>\n<p><img src=\"./example.gif\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/></p>\n<ol start=\"9\">\n<li>最後都沒問題後就可以邊看影片邊快樂吃零食啦!<br>PS:Netflix上下是調整音量、左右是快轉、”s”是跳過前導<br>這次沒有把動態手勢寫入文章是因為我覺得效果沒有很好，所以有興趣的人可以再去看原始專案的介紹。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"Mediapipe是什麼\"><a href=\"#Mediapipe是什麼\" class=\"headerlink\" title=\"Mediapipe是什麼?\"></a>Mediapipe是什麼?</h2><p>可以從<a href=\"https://google.github.io/mediapipe/\">Mediapipe官網</a>中看到他是Google公司的開源專案，在<a href=\"https://github.com/google/mediapipe\">Mediapipe的GitHub</a>介紹寫到</p>\n<blockquote>\n<p>Cross-platform, customizable ML solutions for live and streaming media.</p>\n</blockquote>\n<p>並支援 Android , iOS , C++ , Python , JS 等平台，不過並不是所有平台都可以使用每一種演算法。<br>目前官網所提供的演算法有 <strong>Face Detection,Face Mesh,Iris,Hands\tPose,Holistic,Hair Segmentation,Object Detection,Box Tracking,Instant Motion Tracking,Objectron,KNIFT</strong></p>","more":"<img src=\"./mpsolutions.png\"  alt=\"圖示說明\" />\n\n\n<hr>\n<h2 id=\"Hand\"><a href=\"#Hand\" class=\"headerlink\" title=\"Hand\"></a>Hand</h2><p>而這次使用<a href=\"https://google.github.io/mediapipe/solutions/hands#python-solution-api\">Hands</a>這個演算法，所以其他就不贅述。至於演算法詳細介紹可以點進連結了解，這邊只做基本說明。<br>手部辨識的演算法主要是透過手掌偵測手部位子，再透過21個定位點完成定位。<br>而這次專案主要是透過21個定位點紀錄位置後，定義手勢名稱進行指令的分配，下圖是官網說明。<br><img src=\"./hand_landmarks.png\" alt=\"21定位點\"/><br><img src=\"./hand_crops.png\" alt=\"偵測範例\" style=\"display:block; margin:auto;\"/></p>\n<hr>\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><p>首先這個專案是從<a href=\"https://github.com/Kazuhito00\">Kazuhito00</a>這位作者的<a href=\"https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe\">專案</a>進行改寫而成的，不過專案內容都是日文，所以後來是看<a href=\"https://www.youtube.com/watch?v=a99p_fAr6e4&ab_channel=IvanGoncharov\">這篇</a>的介紹才比較了解!<br>原始<a href=\"https://github.com/Kazuhito00/hand-gesture-recognition-using-mediapipe\">專案</a>使用Mediapipe進行手部辨識後，記錄手部的21個座標，再透過Tensorflow建置模型，最後利用OpenCV進行手勢的辨識，其中作者提供兩種模型的訓練，分別為靜態手勢及動態手勢。</p>\n<h2 id=\"至於我改寫什麼部分\"><a href=\"#至於我改寫什麼部分\" class=\"headerlink\" title=\"至於我改寫什麼部分?\"></a><strong>至於我改寫什麼部分?</strong></h2><p>使用PyQt5將主要功能GUI化,只要開啟main.py就能完成大部份的事(參考下圖)，並將訓練模式及偵測模式分開，因為我發現再同一個模式下執行兩件事情偵數掉得很嚴重，要記錄手勢會很不順，並且透過GUI介面直接跑py檔，不用去翻檔案。</p>\n<p><strong>為何我說是完成大部分的事呢?</strong><br>因為幫手勢建好模型、上好標籤後，指派什麼手勢做什麼事情就需要大家發揮創意動手更改程式碼，來達成你想要遙控的的目的了!<br>在這邊我目前想到的是用手勢控制影片的播放，接下來會結合<a href=\"https://pyautogui.readthedocs.io/en/latest/\">pyautogui</a>套件輸入按鍵，像是鍵盤輸入 “-&gt;” 影片就會快轉，看Netflix時輸入 “s” 就會跳過前導，這樣就可以一邊吃東西然後不怕用髒滑鼠鍵盤來控制影片播放了!<br><a href=\"https://github.com/AnselCh/HandGestures_GUI\">專案連結</a></p>\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./app.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * APP - 開啟偵測模式<br/>\n    * Build - 開啟訓練模式<br/>\n    * Label - 開啟CSV檔幫手勢命名<br/>\n    * Training - 將記錄好的座標透過Tensorflow建置模型\n </pre>\n</div>\n<br/>\n<br/>\n\n<h2 id=\"程式使用說明\"><a href=\"#程式使用說明\" class=\"headerlink\" title=\"程式使用說明\"></a><strong>程式使用說明</strong></h2><p>最重要的環境建置!將專案clone下來後建立虛擬環境(看個人習慣)</p>\n<pre><code>git clone https://github.com/AnselCh/HandGestures_GUI.git\nPython 3.10.8\npip install -r requirements.txt\n</code></pre>\n<ol>\n<li>終端機執行python main.py就會進到上圖的GUI介面，接著就要開始訓練自己的手勢模型，不然原本預設的模型會是我的。</li>\n<li>點擊”Build”後會開啟訓練模式，首先會跳出設定畫面</li>\n</ol>\n<div style=\"float: left; width: 40%;\">\n  <img src=\"./setting.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 60%;\">\n  <pre>\n    <br/>\n    <br/>\n    * Max Hands - 設定app.py裡的max_num_hands的參數\n      依需求填入要同時偵測幾隻手<br/><br/>\n    * Webcam ID - 設定鏡頭來源\n      若電腦內建鏡頭就是0，若有外接就是1(看使用者設備調整)\n </pre>\n</div>\n<br/>\n<br/>\n\n<ol start=\"3\">\n<li>按下”Run”就會開啟相機準備紀錄手勢(啟動時間因設備效能而異)</li>\n<li>按下 “a” 鍵進入新增模式(左上角Mode會顯示Logging Key Point)，這邊可以新增10種手勢，分別是編號0~9，這邊會寫入21個座標到sp_model&#x2F;keypoint.csv內<br>手勢擺好後按下數字0來記錄第一組動作，可以多新增不同角度讓事後偵測更準確!<br>就這樣一路新增完你想定義的手勢，記得要從0開始記(建議可以先把要定義的手勢寫起來)<br>下圖框框的”Right”是指右手，”UP”是我的模型中定義這個手勢是名叫UP</li>\n</ol>\n<p><img src=\"./append.png\" alt=\"新增手勢\" style=\"display:block; margin:auto;\"/><br/><br><img src=\"./csv.png\" alt=\"csv檔預覽\" style=\"display:block; margin:auto;\"/></p>\n<ol start=\"5\">\n<li>記錄完之後確認一下sp_model&#x2F;keypoint.csv中是有數據的後，按一下esc關閉程式，並打開Label<br>會跳出 keypoint_label.csv，這邊要幫剛剛新增的手勢取名，下圖因為我新增5個手勢所以定義了5個名子</li>\n</ol>\n<p><img src=\"./labe_csv.png\" alt=\"labe_csv檔預覽\" style=\"display:block; margin:auto;\"/><br/></p>\n<ol start=\"6\">\n<li>之後按下Training會詢問你剛剛新增了幾組手勢，注意剛剛是0~4是5組，如果輸入的數字不對會無法訓練模型喔!<br>成功後會跳出視窗提醒(參考下圖)</li>\n</ol>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./how_many.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./success.png\" alt=\"app\" style=\"display:block; margin:auto;\"/>\n</div>\n<br/>\n<br/>\n\n<ol start=\"7\">\n<li>模型建好後就可以開始定義每個手勢想達成甚麼目的了!<br>這邊需要先開啟app.py進行編輯，以我的檔案為例:我在151行開始定義剛剛第0個手勢會按一下鍵盤的上，剩下的動作分別是下、左、右、”s”</li>\n</ol>\n<p><img src=\"./functions.png\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/></p>\n<pre><code>在205行:# cv.imshow(&#39;Hand Gesture Recognition&#39;, debug_image)\n可以決定APP執行時要不要開起畫面，如果想要有影像就把註解取消(個人覺得太耗效能所以關閉，因為也沒必要顯示)\n</code></pre>\n<ol start=\"8\">\n<li>功能設置完後執行main.py，點擊APP就會開啟APP，這時候可以看終端機有沒有顯示</li>\n</ol>\n<pre><code>INFO: Created TensorFlow Lite XNNPACK     delegate for CPU.\n或是看鏡頭有沒有亮燈來判斷程式有沒有成功跑起來!\n</code></pre>\n<p>   剛剛在指派functions裡我有放print，所以可以對鏡頭比看看手勢確認有沒有成功。(下面範例我的s手勢是比數字六，因為跟往右的手勢有點重疊到，所以會有判斷錯誤的可能)<br>   若要結束程式要在終端機按 ctrl+C</p>\n<p><img src=\"./example.gif\" alt=\"手勢功能\" style=\"display:block; margin:auto;\"/><br/></p>\n<ol start=\"9\">\n<li>最後都沒問題後就可以邊看影片邊快樂吃零食啦!<br>PS:Netflix上下是調整音量、左右是快轉、”s”是跳過前導<br>這次沒有把動態手勢寫入文章是因為我覺得效果沒有很好，所以有興趣的人可以再去看原始專案的介紹。</li>\n</ol>"},{"title":"[Pytorch] 嘗試用Yolov5做車牌辨識","date":"2023-03-01T03:26:55.000Z","_content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n ## Yolov5是什麼?\n Yolov5是一種用於物件偵測的深度學習模型，它可以在圖像中找出並標記不同類別的物件。監督試學習是一種機器學習方法，它需要使用已經標註了正確答案的資料集來訓練模型。\n\n[Yolov5官網](https://github.com/ultralytics/yolov5)\n\n<!--more-->\n\n# Yolov5 訓練流程\n先來看一下官網提供的一條龍服務\n\n<img src=\"./chat_flow.jpg\"  alt=\"流程圖\" />\n\n首先左邊資料蒐集完之後可以用[roboflow](https://roboflow.com/?ref=ultralytics)進行標記，個人使用起來覺得比labelimg好用，而且也可以跨不同裝置，有點像colab登入帳號就能開始用。\n\n<img src=\"./roboflow.jpg\"  alt=\"label\" />\n\n圖中我大概標記了250張圖片，其中有順便標記車牌內的數字(這部分等到最後再說)，標記完後可以依個人習慣設定train,valid,test的比例。\n\n\n---\n\n標記完可以選擇要下載檔案或是用api的方式引入訓練腳本\n[colab](https://colab.research.google.com/drive/1g5K7OQkrMCSvsT8dKqXw1Fou2aMF76YR?usp=sharing)官方腳本在這，再自行替換api_key\n其中model可以自行成適合自己的，在執行的時候我用yolov5m ,--batch 128發現記憶體不足，所以將batch降低才能開始訓練。\n這部分的參數可以參考:https://blog.csdn.net/weixin_41990671/article/details/107300314\n訓練後就可以得到best.pt了\n\n---\n\n# 靜態圖片車牌辨識\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./TEST.JPG\" alt=\"before\" style=\"display:block; margin:auto;\" height=\"120%\" width=\"90%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./output.png\" alt=\"after\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n<br/>\n\n這邊使用torch.hub導入訓練好的model進行推論\n\n```\nimport torch\nimport cv2\nfrom PIL import Image\n```\n```\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, 'custom',model_path, source='local',force_reload=True)\n    model.classes = chosse_classes # class ='plate'\n    return model\n```\n\ntorch.hub.load的導入參數有問題可以參考官方文件，這邊不贅述\n\n```\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    results = model(img)\n    plate = results.pandas().xyxy[0]\n    return img,plate\n```\n\n這邊是把圖片用載入的model進行推論\n\n```\ndef crop_plates(img,plate):\n    img_tran = img.rotate(-90, expand=True)\n    for i in range(plate.index.array.size):\n        if plate['name'][i] == 'plate':\n            x = plate['xmin'][i]\n            y = plate['ymin'][i]\n            x2 = plate['xmax'][i]\n            y2 = plate['ymax'][i]\n            cropped = img_tran .crop((x, y, x2, y2))\n            cropped.save(f'./test/plate{i}.jpg')\n            print(f'save plate{i}.jpg success')\n```\nresults.pandas().xyxy[0]會顯示出標記的四個座標，這邊用PIL的crop截取車牌並存檔\n這邊不用cv2的原因是cv2不支援座標內有小數點\n```\ndef main():\n    yolov5_path = 'path'\n    model_path = 'path'\n    chosse_classes = 36 # or None\n    img_path = 'path'\n\n    try:\n        print('import model')\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print('import model fail')\n\n    try:\n        print('start inference')\n        img,plate = inference(img_path,model)\n        print('inference finish')\n    except:\n        print('inference error')\n\n    try:\n        crop_plates(img,plate)\n    except:\n        print('crop fail')\n\nif __name__ == '__main__':\n    main()\n```\n自行帶入每個參數的路徑就可以執行了!\n至於model.classes = 36 是指只推論編號第36的label，也就是plate，因為我當標記時順便把車牌內容也標進去了\n如果不加這行就會把所有偵測到的classes都顯示出來\n\n<img src=\"./crop.jpg\"  alt=\"擷取車牌\" />\n\n大致上到這邊就完成簡易的車牌辨識了!\n\n---\n\n# 關於車牌內文字辨識\n\n講道開源OCR辨識就必須提到Tesseract及EasyOCR，不過一開始嘗試後發現效果不是太好，可能跟車牌角度不固定有關。\n後來想說乾脆用yolo一起訓練成模型看看。\n\n先上程式碼\n\n```\nimport torch\nimport cv2\nimport numpy\nfrom PIL import Image\n\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, 'custom',model_path, source='local',force_reload=True)\n    model.classes = chosse_classes # class ='plate'\n    return model\n\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    img = img.rotate(0, expand=True)\n    results = model(img,size=80)\n    results.show()\n    print(results.pandas().xyxy[0].sort_values(by=\"xmin\",ascending=True))\n\ndef main():\n    yolov5_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\yolov5'\n    model_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\model\\moto.pt'\n    chosse_classes = [i for i in range(35)]\n    img_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\torch_crop\\test\\plate.jpg'\n\n    try:\n        print('import model')\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print('import model fail')\n\n    try:\n        print('start inference')\n        inference(img_path,model)\n\n    except:\n        print('inference error')\n\nif __name__ == '__main__':\n    main()\n\n```\n\n跟剛剛用同一套模型只是拿掉plate的類別，之後再用sort_values(by=\"xmin\",ascending=True)降冪排序讓偵測到的內容是由左至右!\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./plate1.jpg\" alt=\"plate\" style=\"display:block; margin:auto;\" height=\"30%\" width=\"50%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./result.jpg\" alt=\"result\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n\n很明顯辨識效果一樣沒有很好，畢竟訓練集沒有很完整，所以之後要用這個方法進辨識的話車牌的角度跟資料量就需要再更完整才行。","source":"_posts/yolov5-practice.md","raw":"---\ntitle: \"[Pytorch] 嘗試用Yolov5做車牌辨識\"\ncategories:\n  - repository\ndate: 2023-03-01 11:26:55\ntags: [Python,Pytorch,Yolo,Machine Learning,ML,AI,DL]\n---\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n# 前言\n ## Yolov5是什麼?\n Yolov5是一種用於物件偵測的深度學習模型，它可以在圖像中找出並標記不同類別的物件。監督試學習是一種機器學習方法，它需要使用已經標註了正確答案的資料集來訓練模型。\n\n[Yolov5官網](https://github.com/ultralytics/yolov5)\n\n<!--more-->\n\n# Yolov5 訓練流程\n先來看一下官網提供的一條龍服務\n\n<img src=\"./chat_flow.jpg\"  alt=\"流程圖\" />\n\n首先左邊資料蒐集完之後可以用[roboflow](https://roboflow.com/?ref=ultralytics)進行標記，個人使用起來覺得比labelimg好用，而且也可以跨不同裝置，有點像colab登入帳號就能開始用。\n\n<img src=\"./roboflow.jpg\"  alt=\"label\" />\n\n圖中我大概標記了250張圖片，其中有順便標記車牌內的數字(這部分等到最後再說)，標記完後可以依個人習慣設定train,valid,test的比例。\n\n\n---\n\n標記完可以選擇要下載檔案或是用api的方式引入訓練腳本\n[colab](https://colab.research.google.com/drive/1g5K7OQkrMCSvsT8dKqXw1Fou2aMF76YR?usp=sharing)官方腳本在這，再自行替換api_key\n其中model可以自行成適合自己的，在執行的時候我用yolov5m ,--batch 128發現記憶體不足，所以將batch降低才能開始訓練。\n這部分的參數可以參考:https://blog.csdn.net/weixin_41990671/article/details/107300314\n訓練後就可以得到best.pt了\n\n---\n\n# 靜態圖片車牌辨識\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./TEST.JPG\" alt=\"before\" style=\"display:block; margin:auto;\" height=\"120%\" width=\"90%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./output.png\" alt=\"after\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n<br/>\n\n這邊使用torch.hub導入訓練好的model進行推論\n\n```\nimport torch\nimport cv2\nfrom PIL import Image\n```\n```\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, 'custom',model_path, source='local',force_reload=True)\n    model.classes = chosse_classes # class ='plate'\n    return model\n```\n\ntorch.hub.load的導入參數有問題可以參考官方文件，這邊不贅述\n\n```\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    results = model(img)\n    plate = results.pandas().xyxy[0]\n    return img,plate\n```\n\n這邊是把圖片用載入的model進行推論\n\n```\ndef crop_plates(img,plate):\n    img_tran = img.rotate(-90, expand=True)\n    for i in range(plate.index.array.size):\n        if plate['name'][i] == 'plate':\n            x = plate['xmin'][i]\n            y = plate['ymin'][i]\n            x2 = plate['xmax'][i]\n            y2 = plate['ymax'][i]\n            cropped = img_tran .crop((x, y, x2, y2))\n            cropped.save(f'./test/plate{i}.jpg')\n            print(f'save plate{i}.jpg success')\n```\nresults.pandas().xyxy[0]會顯示出標記的四個座標，這邊用PIL的crop截取車牌並存檔\n這邊不用cv2的原因是cv2不支援座標內有小數點\n```\ndef main():\n    yolov5_path = 'path'\n    model_path = 'path'\n    chosse_classes = 36 # or None\n    img_path = 'path'\n\n    try:\n        print('import model')\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print('import model fail')\n\n    try:\n        print('start inference')\n        img,plate = inference(img_path,model)\n        print('inference finish')\n    except:\n        print('inference error')\n\n    try:\n        crop_plates(img,plate)\n    except:\n        print('crop fail')\n\nif __name__ == '__main__':\n    main()\n```\n自行帶入每個參數的路徑就可以執行了!\n至於model.classes = 36 是指只推論編號第36的label，也就是plate，因為我當標記時順便把車牌內容也標進去了\n如果不加這行就會把所有偵測到的classes都顯示出來\n\n<img src=\"./crop.jpg\"  alt=\"擷取車牌\" />\n\n大致上到這邊就完成簡易的車牌辨識了!\n\n---\n\n# 關於車牌內文字辨識\n\n講道開源OCR辨識就必須提到Tesseract及EasyOCR，不過一開始嘗試後發現效果不是太好，可能跟車牌角度不固定有關。\n後來想說乾脆用yolo一起訓練成模型看看。\n\n先上程式碼\n\n```\nimport torch\nimport cv2\nimport numpy\nfrom PIL import Image\n\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, 'custom',model_path, source='local',force_reload=True)\n    model.classes = chosse_classes # class ='plate'\n    return model\n\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    img = img.rotate(0, expand=True)\n    results = model(img,size=80)\n    results.show()\n    print(results.pandas().xyxy[0].sort_values(by=\"xmin\",ascending=True))\n\ndef main():\n    yolov5_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\yolov5'\n    model_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\model\\moto.pt'\n    chosse_classes = [i for i in range(35)]\n    img_path = r'C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\torch_crop\\test\\plate.jpg'\n\n    try:\n        print('import model')\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print('import model fail')\n\n    try:\n        print('start inference')\n        inference(img_path,model)\n\n    except:\n        print('inference error')\n\nif __name__ == '__main__':\n    main()\n\n```\n\n跟剛剛用同一套模型只是拿掉plate的類別，之後再用sort_values(by=\"xmin\",ascending=True)降冪排序讓偵測到的內容是由左至右!\n\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./plate1.jpg\" alt=\"plate\" style=\"display:block; margin:auto;\" height=\"30%\" width=\"50%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./result.jpg\" alt=\"result\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n\n很明顯辨識效果一樣沒有很好，畢竟訓練集沒有很完整，所以之後要用這個方法進辨識的話車牌的角度跟資料量就需要再更完整才行。","slug":"yolov5-practice","published":1,"updated":"2023-05-12T13:49:08.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clhkppfqg000ouxrhcsbs01a3","content":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"Yolov5是什麼\"><a href=\"#Yolov5是什麼\" class=\"headerlink\" title=\"Yolov5是什麼?\"></a>Yolov5是什麼?</h2><p> Yolov5是一種用於物件偵測的深度學習模型，它可以在圖像中找出並標記不同類別的物件。監督試學習是一種機器學習方法，它需要使用已經標註了正確答案的資料集來訓練模型。</p>\n<p><a href=\"https://github.com/ultralytics/yolov5\">Yolov5官網</a></p>\n<span id=\"more\"></span>\n\n<h1 id=\"Yolov5-訓練流程\"><a href=\"#Yolov5-訓練流程\" class=\"headerlink\" title=\"Yolov5 訓練流程\"></a>Yolov5 訓練流程</h1><p>先來看一下官網提供的一條龍服務</p>\n<img src=\"./chat_flow.jpg\"  alt=\"流程圖\" />\n\n<p>首先左邊資料蒐集完之後可以用<a href=\"https://roboflow.com/?ref=ultralytics\">roboflow</a>進行標記，個人使用起來覺得比labelimg好用，而且也可以跨不同裝置，有點像colab登入帳號就能開始用。</p>\n<img src=\"./roboflow.jpg\"  alt=\"label\" />\n\n<p>圖中我大概標記了250張圖片，其中有順便標記車牌內的數字(這部分等到最後再說)，標記完後可以依個人習慣設定train,valid,test的比例。</p>\n<hr>\n<p>標記完可以選擇要下載檔案或是用api的方式引入訓練腳本<br><a href=\"https://colab.research.google.com/drive/1g5K7OQkrMCSvsT8dKqXw1Fou2aMF76YR?usp=sharing\">colab</a>官方腳本在這，再自行替換api_key<br>其中model可以自行成適合自己的，在執行的時候我用yolov5m ,–batch 128發現記憶體不足，所以將batch降低才能開始訓練。<br>這部分的參數可以參考:<a href=\"https://blog.csdn.net/weixin_41990671/article/details/107300314\">https://blog.csdn.net/weixin_41990671/article/details/107300314</a><br>訓練後就可以得到best.pt了</p>\n<hr>\n<h1 id=\"靜態圖片車牌辨識\"><a href=\"#靜態圖片車牌辨識\" class=\"headerlink\" title=\"靜態圖片車牌辨識\"></a>靜態圖片車牌辨識</h1><div style=\"float: left; width: 50%;\">\n  <img src=\"./TEST.JPG\" alt=\"before\" style=\"display:block; margin:auto;\" height=\"120%\" width=\"90%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./output.png\" alt=\"after\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n<br/>\n\n<p>這邊使用torch.hub導入訓練好的model進行推論</p>\n<pre><code>import torch\nimport cv2\nfrom PIL import Image\n</code></pre>\n<pre><code>def model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, &#39;custom&#39;,model_path, source=&#39;local&#39;,force_reload=True)\n    model.classes = chosse_classes # class =&#39;plate&#39;\n    return model\n</code></pre>\n<p>torch.hub.load的導入參數有問題可以參考官方文件，這邊不贅述</p>\n<pre><code>def inference(img_path,model):\n    img = Image.open(img_path)\n    results = model(img)\n    plate = results.pandas().xyxy[0]\n    return img,plate\n</code></pre>\n<p>這邊是把圖片用載入的model進行推論</p>\n<pre><code>def crop_plates(img,plate):\n    img_tran = img.rotate(-90, expand=True)\n    for i in range(plate.index.array.size):\n        if plate[&#39;name&#39;][i] == &#39;plate&#39;:\n            x = plate[&#39;xmin&#39;][i]\n            y = plate[&#39;ymin&#39;][i]\n            x2 = plate[&#39;xmax&#39;][i]\n            y2 = plate[&#39;ymax&#39;][i]\n            cropped = img_tran .crop((x, y, x2, y2))\n            cropped.save(f&#39;./test/plate&#123;i&#125;.jpg&#39;)\n            print(f&#39;save plate&#123;i&#125;.jpg success&#39;)\n</code></pre>\n<p>results.pandas().xyxy[0]會顯示出標記的四個座標，這邊用PIL的crop截取車牌並存檔<br>這邊不用cv2的原因是cv2不支援座標內有小數點</p>\n<pre><code>def main():\n    yolov5_path = &#39;path&#39;\n    model_path = &#39;path&#39;\n    chosse_classes = 36 # or None\n    img_path = &#39;path&#39;\n\n    try:\n        print(&#39;import model&#39;)\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print(&#39;import model fail&#39;)\n\n    try:\n        print(&#39;start inference&#39;)\n        img,plate = inference(img_path,model)\n        print(&#39;inference finish&#39;)\n    except:\n        print(&#39;inference error&#39;)\n\n    try:\n        crop_plates(img,plate)\n    except:\n        print(&#39;crop fail&#39;)\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre>\n<p>自行帶入每個參數的路徑就可以執行了!<br>至於model.classes &#x3D; 36 是指只推論編號第36的label，也就是plate，因為我當標記時順便把車牌內容也標進去了<br>如果不加這行就會把所有偵測到的classes都顯示出來</p>\n<img src=\"./crop.jpg\"  alt=\"擷取車牌\" />\n\n<p>大致上到這邊就完成簡易的車牌辨識了!</p>\n<hr>\n<h1 id=\"關於車牌內文字辨識\"><a href=\"#關於車牌內文字辨識\" class=\"headerlink\" title=\"關於車牌內文字辨識\"></a>關於車牌內文字辨識</h1><p>講道開源OCR辨識就必須提到Tesseract及EasyOCR，不過一開始嘗試後發現效果不是太好，可能跟車牌角度不固定有關。<br>後來想說乾脆用yolo一起訓練成模型看看。</p>\n<p>先上程式碼</p>\n<pre><code>import torch\nimport cv2\nimport numpy\nfrom PIL import Image\n\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, &#39;custom&#39;,model_path, source=&#39;local&#39;,force_reload=True)\n    model.classes = chosse_classes # class =&#39;plate&#39;\n    return model\n\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    img = img.rotate(0, expand=True)\n    results = model(img,size=80)\n    results.show()\n    print(results.pandas().xyxy[0].sort_values(by=&quot;xmin&quot;,ascending=True))\n\ndef main():\n    yolov5_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\yolov5&#39;\n    model_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\model\\moto.pt&#39;\n    chosse_classes = [i for i in range(35)]\n    img_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\torch_crop\\test\\plate.jpg&#39;\n\n    try:\n        print(&#39;import model&#39;)\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print(&#39;import model fail&#39;)\n\n    try:\n        print(&#39;start inference&#39;)\n        inference(img_path,model)\n\n    except:\n        print(&#39;inference error&#39;)\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre>\n<p>跟剛剛用同一套模型只是拿掉plate的類別，之後再用sort_values(by&#x3D;”xmin”,ascending&#x3D;True)降冪排序讓偵測到的內容是由左至右!</p>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./plate1.jpg\" alt=\"plate\" style=\"display:block; margin:auto;\" height=\"30%\" width=\"50%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./result.jpg\" alt=\"result\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n\n<p>很明顯辨識效果一樣沒有很好，畢竟訓練集沒有很完整，所以之後要用這個方法進辨識的話車牌的角度跟資料量就需要再更完整才行。</p>\n","site":{"data":{}},"excerpt":"<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"Yolov5是什麼\"><a href=\"#Yolov5是什麼\" class=\"headerlink\" title=\"Yolov5是什麼?\"></a>Yolov5是什麼?</h2><p> Yolov5是一種用於物件偵測的深度學習模型，它可以在圖像中找出並標記不同類別的物件。監督試學習是一種機器學習方法，它需要使用已經標註了正確答案的資料集來訓練模型。</p>\n<p><a href=\"https://github.com/ultralytics/yolov5\">Yolov5官網</a></p>","more":"<h1 id=\"Yolov5-訓練流程\"><a href=\"#Yolov5-訓練流程\" class=\"headerlink\" title=\"Yolov5 訓練流程\"></a>Yolov5 訓練流程</h1><p>先來看一下官網提供的一條龍服務</p>\n<img src=\"./chat_flow.jpg\"  alt=\"流程圖\" />\n\n<p>首先左邊資料蒐集完之後可以用<a href=\"https://roboflow.com/?ref=ultralytics\">roboflow</a>進行標記，個人使用起來覺得比labelimg好用，而且也可以跨不同裝置，有點像colab登入帳號就能開始用。</p>\n<img src=\"./roboflow.jpg\"  alt=\"label\" />\n\n<p>圖中我大概標記了250張圖片，其中有順便標記車牌內的數字(這部分等到最後再說)，標記完後可以依個人習慣設定train,valid,test的比例。</p>\n<hr>\n<p>標記完可以選擇要下載檔案或是用api的方式引入訓練腳本<br><a href=\"https://colab.research.google.com/drive/1g5K7OQkrMCSvsT8dKqXw1Fou2aMF76YR?usp=sharing\">colab</a>官方腳本在這，再自行替換api_key<br>其中model可以自行成適合自己的，在執行的時候我用yolov5m ,–batch 128發現記憶體不足，所以將batch降低才能開始訓練。<br>這部分的參數可以參考:<a href=\"https://blog.csdn.net/weixin_41990671/article/details/107300314\">https://blog.csdn.net/weixin_41990671/article/details/107300314</a><br>訓練後就可以得到best.pt了</p>\n<hr>\n<h1 id=\"靜態圖片車牌辨識\"><a href=\"#靜態圖片車牌辨識\" class=\"headerlink\" title=\"靜態圖片車牌辨識\"></a>靜態圖片車牌辨識</h1><div style=\"float: left; width: 50%;\">\n  <img src=\"./TEST.JPG\" alt=\"before\" style=\"display:block; margin:auto;\" height=\"120%\" width=\"90%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./output.png\" alt=\"after\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n<br/>\n\n<p>這邊使用torch.hub導入訓練好的model進行推論</p>\n<pre><code>import torch\nimport cv2\nfrom PIL import Image\n</code></pre>\n<pre><code>def model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, &#39;custom&#39;,model_path, source=&#39;local&#39;,force_reload=True)\n    model.classes = chosse_classes # class =&#39;plate&#39;\n    return model\n</code></pre>\n<p>torch.hub.load的導入參數有問題可以參考官方文件，這邊不贅述</p>\n<pre><code>def inference(img_path,model):\n    img = Image.open(img_path)\n    results = model(img)\n    plate = results.pandas().xyxy[0]\n    return img,plate\n</code></pre>\n<p>這邊是把圖片用載入的model進行推論</p>\n<pre><code>def crop_plates(img,plate):\n    img_tran = img.rotate(-90, expand=True)\n    for i in range(plate.index.array.size):\n        if plate[&#39;name&#39;][i] == &#39;plate&#39;:\n            x = plate[&#39;xmin&#39;][i]\n            y = plate[&#39;ymin&#39;][i]\n            x2 = plate[&#39;xmax&#39;][i]\n            y2 = plate[&#39;ymax&#39;][i]\n            cropped = img_tran .crop((x, y, x2, y2))\n            cropped.save(f&#39;./test/plate&#123;i&#125;.jpg&#39;)\n            print(f&#39;save plate&#123;i&#125;.jpg success&#39;)\n</code></pre>\n<p>results.pandas().xyxy[0]會顯示出標記的四個座標，這邊用PIL的crop截取車牌並存檔<br>這邊不用cv2的原因是cv2不支援座標內有小數點</p>\n<pre><code>def main():\n    yolov5_path = &#39;path&#39;\n    model_path = &#39;path&#39;\n    chosse_classes = 36 # or None\n    img_path = &#39;path&#39;\n\n    try:\n        print(&#39;import model&#39;)\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print(&#39;import model fail&#39;)\n\n    try:\n        print(&#39;start inference&#39;)\n        img,plate = inference(img_path,model)\n        print(&#39;inference finish&#39;)\n    except:\n        print(&#39;inference error&#39;)\n\n    try:\n        crop_plates(img,plate)\n    except:\n        print(&#39;crop fail&#39;)\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre>\n<p>自行帶入每個參數的路徑就可以執行了!<br>至於model.classes &#x3D; 36 是指只推論編號第36的label，也就是plate，因為我當標記時順便把車牌內容也標進去了<br>如果不加這行就會把所有偵測到的classes都顯示出來</p>\n<img src=\"./crop.jpg\"  alt=\"擷取車牌\" />\n\n<p>大致上到這邊就完成簡易的車牌辨識了!</p>\n<hr>\n<h1 id=\"關於車牌內文字辨識\"><a href=\"#關於車牌內文字辨識\" class=\"headerlink\" title=\"關於車牌內文字辨識\"></a>關於車牌內文字辨識</h1><p>講道開源OCR辨識就必須提到Tesseract及EasyOCR，不過一開始嘗試後發現效果不是太好，可能跟車牌角度不固定有關。<br>後來想說乾脆用yolo一起訓練成模型看看。</p>\n<p>先上程式碼</p>\n<pre><code>import torch\nimport cv2\nimport numpy\nfrom PIL import Image\n\ndef model_load(yolov5_path,model_path,chosse_classes):\n    model = torch.hub.load(yolov5_path, &#39;custom&#39;,model_path, source=&#39;local&#39;,force_reload=True)\n    model.classes = chosse_classes # class =&#39;plate&#39;\n    return model\n\ndef inference(img_path,model):\n    img = Image.open(img_path)\n    img = img.rotate(0, expand=True)\n    results = model(img,size=80)\n    results.show()\n    print(results.pandas().xyxy[0].sort_values(by=&quot;xmin&quot;,ascending=True))\n\ndef main():\n    yolov5_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\yolov5&#39;\n    model_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\model\\moto.pt&#39;\n    chosse_classes = [i for i in range(35)]\n    img_path = r&#39;C:\\Users\\ansel_chen\\VScode_Ansel\\pytorch_practice\\torch_crop\\test\\plate.jpg&#39;\n\n    try:\n        print(&#39;import model&#39;)\n        model = model_load(yolov5_path,model_path,chosse_classes)\n    except:\n        print(&#39;import model fail&#39;)\n\n    try:\n        print(&#39;start inference&#39;)\n        inference(img_path,model)\n\n    except:\n        print(&#39;inference error&#39;)\n\nif __name__ == &#39;__main__&#39;:\n    main()\n</code></pre>\n<p>跟剛剛用同一套模型只是拿掉plate的類別，之後再用sort_values(by&#x3D;”xmin”,ascending&#x3D;True)降冪排序讓偵測到的內容是由左至右!</p>\n<div style=\"float: left; width: 50%;\">\n  <img src=\"./plate1.jpg\" alt=\"plate\" style=\"display:block; margin:auto;\" height=\"30%\" width=\"50%\"/>\n</div>\n<div tyle=\"float: right; width: 50%;\">\n  <img src=\"./result.jpg\" alt=\"result\" style=\"display:block; margin:auto;\"height=\"60%\" width=\"45%\" />\n</div>\n\n<p>很明顯辨識效果一樣沒有很好，畢竟訓練集沒有很完整，所以之後要用這個方法進辨識的話車牌的角度跟資料量就需要再更完整才行。</p>"}],"PostAsset":[{"_id":"source/_posts/clockapp/max.jpg","slug":"max.jpg","post":"clhkppfqa0001uxrh4e35b3p3","modified":0,"renderable":0},{"_id":"source/_posts/clockapp/min.jpg","slug":"min.jpg","post":"clhkppfqa0001uxrh4e35b3p3","modified":0,"renderable":0},{"_id":"source/_posts/docker-memo/vscode_wsl2.jpg","slug":"vscode_wsl2.jpg","post":"clhkppfqb0002uxrhev9tgqak","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/ajaxpost.jpg","slug":"ajaxpost.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/console.jpg","slug":"console.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/get1.jpg","slug":"get1.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/get2.jpg","slug":"get2.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/signup.jpg","slug":"signup.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/fastapi/swagger.jpg","slug":"swagger.jpg","post":"clhkppfqe000fuxrhavd9gvao","modified":0,"renderable":0},{"_id":"source/_posts/membersys/index.jpg","slug":"index.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/memberlist.jpg","slug":"memberlist.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/memberlistSign.jpg","slug":"memberlistSign.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/notadmin.jpg","slug":"notadmin.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/plzsignin.jpg","slug":"plzsignin.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/register.jpg","slug":"register.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/signin.jpg","slug":"signin.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/membersys/程式架構.jpg","slug":"程式架構.jpg","post":"clhkppfqe000guxrhfc2p3u39","modified":0,"renderable":0},{"_id":"source/_posts/pytorch-tips/cmd.png","slug":"cmd.png","post":"clhkppfqf000iuxrh4qp11j8w","modified":0,"renderable":0},{"_id":"source/_posts/pytorch-tips/support.png","slug":"support.png","post":"clhkppfqf000iuxrh4qp11j8w","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/TEST.JPG","slug":"TEST.JPG","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/chat_flow.jpg","slug":"chat_flow.jpg","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/crop.jpg","slug":"crop.jpg","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/output.png","slug":"output.png","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/plate1.jpg","slug":"plate1.jpg","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/result.jpg","slug":"result.jpg","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/yolov5-practice/roboflow.jpg","slug":"roboflow.jpg","post":"clhkppfqg000ouxrhcsbs01a3","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/app.png","slug":"app.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/append.png","slug":"append.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/csv.png","slug":"csv.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/example.gif","slug":"example.gif","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/functions.png","slug":"functions.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/hand_crops.png","slug":"hand_crops.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/hand_landmarks.png","slug":"hand_landmarks.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/how_many.png","slug":"how_many.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/labe_csv.png","slug":"labe_csv.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/mpsolutions.png","slug":"mpsolutions.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/setting.png","slug":"setting.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0},{"_id":"source/_posts/handgestures/success.png","slug":"success.png","post":"clhkppfqf000luxrh89vo0bee","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clhkppfqa0001uxrh4e35b3p3","category_id":"clhkppfqc0003uxrh2tv3e05l","_id":"clhkppfqd0007uxrhht3u1w4y"},{"post_id":"clhkppfqb0002uxrhev9tgqak","category_id":"clhkppfqd0005uxrh6u5x67ag","_id":"clhkppfqd000buxrh9434180m"},{"post_id":"clhkppfqe000fuxrhavd9gvao","category_id":"clhkppfqc0003uxrh2tv3e05l","_id":"clhkppfqf000kuxrh1n54796t"},{"post_id":"clhkppfqe000guxrhfc2p3u39","category_id":"clhkppfqd0005uxrh6u5x67ag","_id":"clhkppfqg000muxrh35e1f7e7"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","category_id":"clhkppfqd0005uxrh6u5x67ag","_id":"clhkppfqg000puxrhbn3l2qhf"},{"post_id":"clhkppfqf000juxrhbedx4ib8","category_id":"clhkppfqd0005uxrh6u5x67ag","_id":"clhkppfqg000quxrh58kyd5tz"},{"post_id":"clhkppfqf000luxrh89vo0bee","category_id":"clhkppfqc0003uxrh2tv3e05l","_id":"clhkppfqg000suxrh34u67ott"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","category_id":"clhkppfqc0003uxrh2tv3e05l","_id":"clhkppfqg000tuxrh8tom3r5y"}],"PostTag":[{"post_id":"clhkppfqa0001uxrh4e35b3p3","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqd0009uxrh4frtdjf7"},{"post_id":"clhkppfqa0001uxrh4e35b3p3","tag_id":"clhkppfqd0006uxrheiir2jpx","_id":"clhkppfqd000auxrh8kj2ffco"},{"post_id":"clhkppfqb0002uxrhev9tgqak","tag_id":"clhkppfqd0008uxrh44e9fxi0","_id":"clhkppfqd000duxrh2ybxd26l"},{"post_id":"clhkppfqb0002uxrhev9tgqak","tag_id":"clhkppfqd000cuxrhg89k2crz","_id":"clhkppfqd000euxrh92bw5jma"},{"post_id":"clhkppfqe000fuxrhavd9gvao","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqh000wuxrh4u4bf5h3"},{"post_id":"clhkppfqe000fuxrhavd9gvao","tag_id":"clhkppfqf000huxrh7eu1galz","_id":"clhkppfqh000xuxrh5x978dam"},{"post_id":"clhkppfqe000fuxrhavd9gvao","tag_id":"clhkppfqg000nuxrh8r1x3bba","_id":"clhkppfqh000zuxrh5ios1i0b"},{"post_id":"clhkppfqe000fuxrhavd9gvao","tag_id":"clhkppfqg000ruxrh2etgcurn","_id":"clhkppfqh0010uxrh9xocbytp"},{"post_id":"clhkppfqe000fuxrhavd9gvao","tag_id":"clhkppfqg000uuxrhcm4kfwtu","_id":"clhkppfqh0012uxrh5qa9gexr"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqh0018uxrh8gn5gf0k"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqf000huxrh7eu1galz","_id":"clhkppfqh0019uxrh1xa7flcs"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqg000nuxrh8r1x3bba","_id":"clhkppfqi001buxrh5kxuc7jv"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqh0011uxrhdjs985kp","_id":"clhkppfqi001cuxrh2ohoa559"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqg000ruxrh2etgcurn","_id":"clhkppfqi001euxrhbdxc4egf"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqg000uuxrhcm4kfwtu","_id":"clhkppfqi001fuxrhfyxf4tn7"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqh0015uxrhbp9t0fab","_id":"clhkppfqi001huxrham212e0r"},{"post_id":"clhkppfqe000guxrhfc2p3u39","tag_id":"clhkppfqh0016uxrhaf4j9i33","_id":"clhkppfqi001iuxrh36t7bmxv"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqi001luxrha4zy0ymn"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqh0017uxrh7ox2augd","_id":"clhkppfqi001muxrh5m891ffa"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqh001auxrh12vo30hs","_id":"clhkppfqi001ouxrhholrdxe8"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqi001duxrh5npk6uf1","_id":"clhkppfqi001puxrhcuou350k"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqi001guxrh208vdvwi","_id":"clhkppfqi001ruxrhech36qwr"},{"post_id":"clhkppfqf000iuxrh4qp11j8w","tag_id":"clhkppfqi001juxrh61axd78d","_id":"clhkppfqi001suxrh9gsaecf4"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqj001xuxrh8jg65wk3"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqh0017uxrh7ox2augd","_id":"clhkppfqj001yuxrhdfwqdp2c"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqi001nuxrh8fjbg3xw","_id":"clhkppfqj0020uxrhh3234onm"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqh001auxrh12vo30hs","_id":"clhkppfqj0021uxrh8bm6eip0"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqi001duxrh5npk6uf1","_id":"clhkppfqj0023uxrha7gp2m01"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqi001guxrh208vdvwi","_id":"clhkppfqj0024uxrh25i74hj2"},{"post_id":"clhkppfqf000juxrhbedx4ib8","tag_id":"clhkppfqi001vuxrhfqtn60gx","_id":"clhkppfqj0026uxrhdymrb8fc"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqj002auxrh9mii6e3o"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqi001wuxrhemq6adr9","_id":"clhkppfqj002buxrhejz6ewdo"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqj001zuxrhde4xfx8r","_id":"clhkppfqj002duxrh6lbac1ax"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqj0022uxrh82ol6pfp","_id":"clhkppfqj002euxrh0q3l3l00"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqh001auxrh12vo30hs","_id":"clhkppfqj002guxrhdlaahuae"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqi001duxrh5npk6uf1","_id":"clhkppfqk002huxrh0yw6hlf7"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqi001guxrh208vdvwi","_id":"clhkppfqk002juxrhe8xe6d8e"},{"post_id":"clhkppfqf000luxrh89vo0bee","tag_id":"clhkppfqd0006uxrheiir2jpx","_id":"clhkppfqk002kuxrh6cqf523k"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqc0004uxrhclevfhft","_id":"clhkppfqk002nuxrh20jjctoz"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqh0017uxrh7ox2augd","_id":"clhkppfqk002ouxrh46if90n2"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqi001nuxrh8fjbg3xw","_id":"clhkppfqk002puxrhhgbufmya"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqh001auxrh12vo30hs","_id":"clhkppfqk002quxrhd71a2qza"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqi001duxrh5npk6uf1","_id":"clhkppfqk002ruxrh9gxm2y9y"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqi001guxrh208vdvwi","_id":"clhkppfqk002suxrhahny6xwo"},{"post_id":"clhkppfqg000ouxrhcsbs01a3","tag_id":"clhkppfqi001vuxrhfqtn60gx","_id":"clhkppfqk002tuxrhe3uag6l0"}],"Tag":[{"name":"Python","_id":"clhkppfqc0004uxrhclevfhft"},{"name":"PyQt5","_id":"clhkppfqd0006uxrheiir2jpx"},{"name":"WSL2","_id":"clhkppfqd0008uxrh44e9fxi0"},{"name":"Docker","_id":"clhkppfqd000cuxrhg89k2crz"},{"name":"Fastapi","_id":"clhkppfqf000huxrh7eu1galz"},{"name":"RESTful API","_id":"clhkppfqg000nuxrh8r1x3bba"},{"name":"AJAX","_id":"clhkppfqg000ruxrh2etgcurn"},{"name":"JavaScript","_id":"clhkppfqg000uuxrhcm4kfwtu"},{"name":"Flask","_id":"clhkppfqh0011uxrhdjs985kp"},{"name":"MongoDB","_id":"clhkppfqh0015uxrhbp9t0fab"},{"name":"Atlas","_id":"clhkppfqh0016uxrhaf4j9i33"},{"name":"Pytorch","_id":"clhkppfqh0017uxrh7ox2augd"},{"name":"Machine Learning","_id":"clhkppfqh001auxrh12vo30hs"},{"name":"ML","_id":"clhkppfqi001duxrh5npk6uf1"},{"name":"AI","_id":"clhkppfqi001guxrh208vdvwi"},{"name":"CUDA","_id":"clhkppfqi001juxrh61axd78d"},{"name":"Yolo","_id":"clhkppfqi001nuxrh8fjbg3xw"},{"name":"DL","_id":"clhkppfqi001vuxrhfqtn60gx"},{"name":"Mediapipe","_id":"clhkppfqi001wuxrhemq6adr9"},{"name":"OpenCV","_id":"clhkppfqj001zuxrhde4xfx8r"},{"name":"Tensorflow","_id":"clhkppfqj0022uxrh82ol6pfp"}]}}